MERGE (p:Package {id: 'com', name: 'com'});
MERGE (p:Package {id: 'com.jwu', name: 'jwu'});
MERGE (p:Package {id: 'com.jwu.javaparser', name: 'javaparser'});
MERGE (p:Package {id: 'com.jwu.javaparser.analyser', name: 'analyser'});
MERGE (p:Project {id: 'javaparser/javaparser'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge', name: 'QualifiedDependencyEdge'});
MERGE (p:Package {id: 'com.jwu.javaparser.dependencygraph', name: 'dependencygraph'});
MERGE (p:Package {id: 'com.jwu.javaparser.dependencygraph.edges', name: 'edges'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge', name: 'DependencyEdge'});
MERGE (p:Package {id: 'java', name: 'java'});
MERGE (p:Package {id: 'java.util', name: 'util'});
MERGE (p:ClassOrInterface {id: 'java.util.Optional', name: 'Optional'});
MERGE (p:Method {id: 'java.util.Optional.of', name: 'of'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentDependencyNode', name: 'getParentDependencyNode'});
MERGE (p:Method {id: 'java.util.Optional.empty', name: 'empty'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentProjectNode', name: 'getParentProjectNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildDependencyNode', name: 'getChildDependencyNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildProjectNode', name: 'getChildProjectNode'});
MERGE (p:Package {id: 'com.jwu.javaparser.dependencygraph.edges.types', name: 'types'});
MERGE (p:Package {id: 'com.jwu.javaparser.parser', name: 'parser'});
MERGE (p:Package {id: 'com.jwu.javaparser.parser.visitors', name: 'visitors'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor', name: 'MethodCallVisitor'});
MERGE (p:Package {id: 'com.github', name: 'github'});
MERGE (p:Package {id: 'com.github.javaparser', name: 'javaparser'});
MERGE (p:Package {id: 'com.github.javaparser.ast', name: 'ast'});
MERGE (p:Package {id: 'com.github.javaparser.ast.visitor', name: 'visitor'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter', name: 'VoidVisitorAdapter'});
MERGE (p:Method {id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit', name: 'visit'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit', name: 'visit'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.visitor.VoidVisitor', name: 'VoidVisitor'});
MERGE (p:Method {id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit', name: 'visit'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.Node', name: 'Node'});
MERGE (p:Method {id: 'com.github.javaparser.ast.Node.getParentNode', name: 'getParentNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode', name: 'identifyParentNode'});
MERGE (p:Method {id: 'java.util.Optional.isPresent', name: 'isPresent'});
MERGE (p:Method {id: 'java.util.Optional.get', name: 'get'});
MERGE (p:Package {id: 'java.io', name: 'io'});
MERGE (p:ClassOrInterface {id: 'java.io.PrintStream', name: 'PrintStream'});
MERGE (p:Method {id: 'java.io.PrintStream.println', name: 'println'});
MERGE (p:Package {id: 'java.lang', name: 'lang'});
MERGE (p:ClassOrInterface {id: 'java.lang.Throwable', name: 'Throwable'});
MERGE (p:Method {id: 'java.lang.Throwable.toString', name: 'toString'});
MERGE (p:Package {id: 'com.github.javaparser.ast.expr', name: 'expr'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.expr.MethodCallExpr', name: 'MethodCallExpr'});
MERGE (p:Method {id: 'com.github.javaparser.ast.expr.MethodCallExpr.getName', name: 'getName'});
MERGE (p:Method {id: 'com.github.javaparser.ast.expr.MethodCallExpr.getArguments', name: 'getArguments'});
MERGE (p:Package {id: 'com.github.javaparser.ast.nodeTypes', name: 'nodeTypes'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange', name: 'NodeWithRange'});
MERGE (p:Method {id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange.getBegin', name: 'getBegin'});
MERGE (p:Method {id: 'java.util.Optional.ifPresent', name: 'ifPresent'});
MERGE (p:Method {id: 'com.github.javaparser.ast.expr.MethodCallExpr.resolve', name: 'resolve'});
MERGE (p:Package {id: 'com.github.javaparser.resolution', name: 'resolution'});
MERGE (p:Package {id: 'com.github.javaparser.resolution.declarations', name: 'declarations'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration', name: 'ResolvedMethodLikeDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getQualifiedName', name: 'getQualifiedName'});
MERGE (p:ClassOrInterface {id: 'java.lang.Object', name: 'Object'});
MERGE (p:Method {id: 'java.lang.Object.getClass', name: 'getClass'});
MERGE (p:ClassOrInterface {id: 'java.lang.Class', name: 'Class'});
MERGE (p:Method {id: 'java.lang.Class.getName', name: 'getName'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration', name: 'ResolvedDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration.getName', name: 'getName'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getClassName', name: 'getClassName'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getPackageName', name: 'getPackageName'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph', name: 'DependencyGraph'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod', name: 'addMethod'});
MERGE (p:Package {id: 'com.github.javaparser.ast.body', name: 'body'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.ConstructorDeclaration', name: 'ConstructorDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.ConstructorDeclaration.resolve', name: 'resolve'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addCallsEdge', name: 'addCallsEdge'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration', name: 'ClassOrInterfaceDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve', name: 'resolve'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration', name: 'ResolvedTypeDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getPackageName', name: 'getPackageName'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getClassName', name: 'getClassName'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass', name: 'addClass'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getQualifiedName', name: 'getQualifiedName'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.MethodDeclaration', name: 'MethodDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.MethodDeclaration.resolve', name: 'resolve'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor', name: 'ClassOrInterfaceDeclarationVisitor'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit', name: 'visit'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName', name: 'NodeWithSimpleName'});
MERGE (p:Method {id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString', name: 'getNameAsString'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes', name: 'getExtendedTypes'});
MERGE (p:Package {id: 'com.github.javaparser.ast.type', name: 'type'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.type.ClassOrInterfaceType', name: 'ClassOrInterfaceType'});
MERGE (p:Method {id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.getName', name: 'getName'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.expr.SimpleName', name: 'SimpleName'});
MERGE (p:Method {id: 'com.github.javaparser.ast.expr.SimpleName.asString', name: 'asString'});
MERGE (p:Method {id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.resolve', name: 'resolve'});
MERGE (p:Package {id: 'com.github.javaparser.resolution.types', name: 'types'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.resolution.types.ResolvedReferenceType', name: 'ResolvedReferenceType'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getTypeDeclaration', name: 'getTypeDeclaration'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addExtendsEdge', name: 'addExtendsEdge'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.NodeList', name: 'NodeList'});
MERGE (p:Method {id: 'com.github.javaparser.ast.NodeList.forEach', name: 'forEach'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.DirectoryParser', name: 'DirectoryParser'});
MERGE (p:ClassOrInterface {id: 'java.util.Collections', name: 'Collections'});
MERGE (p:Method {id: 'java.util.Collections.emptyList', name: 'emptyList'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath', name: 'listFilesAtPath'});
MERGE (p:Package {id: 'java.util.stream', name: 'stream'});
MERGE (p:ClassOrInterface {id: 'java.util.stream.Collectors', name: 'Collectors'});
MERGE (p:Method {id: 'java.util.stream.Collectors.toList', name: 'toList'});
MERGE (p:Package {id: 'java.nio', name: 'nio'});
MERGE (p:Package {id: 'java.nio.file', name: 'file'});
MERGE (p:ClassOrInterface {id: 'java.nio.file.Path', name: 'Path'});
MERGE (p:Method {id: 'java.nio.file.Path.toString', name: 'toString'});
MERGE (p:ClassOrInterface {id: 'java.lang.String', name: 'String'});
MERGE (p:Method {id: 'java.lang.String.endsWith', name: 'endsWith'});
MERGE (p:ClassOrInterface {id: 'java.nio.file.Files', name: 'Files'});
MERGE (p:Method {id: 'java.nio.file.Files.list', name: 'list'});
MERGE (p:ClassOrInterface {id: 'java.util.stream.Stream', name: 'Stream'});
MERGE (p:Method {id: 'java.util.stream.Stream.filter', name: 'filter'});
MERGE (p:Method {id: 'java.util.stream.Stream.collect', name: 'collect'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath', name: 'listDirsAtPath'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles', name: 'parseDirectoriesForFiles'});
MERGE (p:ClassOrInterface {id: 'java.util.Collection', name: 'Collection'});
MERGE (p:Method {id: 'java.util.Collection.addAll', name: 'addAll'});
MERGE (p:Package {id: 'com.github.javaparser.symbolsolver', name: 'symbolsolver'});
MERGE (p:Package {id: 'com.github.javaparser.symbolsolver.resolution', name: 'resolution'});
MERGE (p:Package {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers', name: 'typesolvers'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver', name: 'CombinedTypeSolver'});
MERGE (p:Method {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver.add', name: 'add'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods', name: 'parseMethods'});
MERGE (p:Package {id: 'com.github.javaparser.symbolsolver.utils', name: 'utils'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy', name: 'SymbolSolverCollectionStrategy'});
MERGE (p:Method {id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy.collect', name: 'collect'});
MERGE (p:Package {id: 'com.github.javaparser.utils', name: 'utils'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.utils.SourceRoot', name: 'SourceRoot'});
MERGE (p:Method {id: 'com.github.javaparser.utils.SourceRoot.getRoot', name: 'getRoot'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.utils.ProjectRoot', name: 'ProjectRoot'});
MERGE (p:Method {id: 'com.github.javaparser.utils.ProjectRoot.getSourceRoots', name: 'getSourceRoots'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.JavaParser', name: 'JavaParser'});
MERGE (p:Method {id: 'com.github.javaparser.JavaParser.getStaticConfiguration', name: 'getStaticConfiguration'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ParserConfiguration', name: 'ParserConfiguration'});
MERGE (p:Method {id: 'com.github.javaparser.ParserConfiguration.setSymbolResolver', name: 'setSymbolResolver'});
MERGE (p:Method {id: 'com.github.javaparser.utils.SourceRoot.tryToParse', name: 'tryToParse'});
MERGE (p:Method {id: 'com.github.javaparser.utils.SourceRoot.getCompilationUnits', name: 'getCompilationUnits'});
MERGE (p:Package {id: 'com.jwu.javaparser.dependencygraph.nodes', name: 'nodes'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode', name: 'DependencyNode'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode', name: 'BaseNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString', name: 'toString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString', name: 'toString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.equals', name: 'equals'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.equals', name: 'equals'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.castNode', name: 'castNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.castNode', name: 'castNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.prettyString', name: 'prettyString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString', name: 'prettyString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap', name: 'generateExportAttributeMap'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap', name: 'generateExportAttributeMap'});
MERGE (p:Method {id: 'java.lang.Object.equals', name: 'equals'});
MERGE (p:Method {id: 'java.lang.Object.toString', name: 'toString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.simpleName', name: 'simpleName'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode', name: 'DependencyNode'});
MERGE (p:Method {id: 'java.lang.String.split', name: 'split'});
MERGE (p:Package {id: 'java.text', name: 'text'});
MERGE (p:ClassOrInterface {id: 'java.text.Normalizer', name: 'Normalizer'});
MERGE (p:Method {id: 'java.text.Normalizer.normalize', name: 'normalize'});
MERGE (p:Method {id: 'java.lang.String.replaceAll', name: 'replaceAll'});
MERGE (p:ClassOrInterface {id: 'java.util.Map', name: 'Map'});
MERGE (p:Method {id: 'java.util.Map.containsKey', name: 'containsKey'});
MERGE (p:Method {id: 'java.util.Map.get', name: 'get'});
MERGE (p:Package {id: 'org', name: 'org'});
MERGE (p:Package {id: 'org.jgrapht', name: 'jgrapht'});
MERGE (p:Package {id: 'org.jgrapht.io', name: 'io'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.io.Attribute', name: 'Attribute'});
MERGE (p:Method {id: 'org.jgrapht.io.Attribute.getValue', name: 'getValue'});
MERGE (p:Package {id: 'com.jwu.javaparser.dependencygraph.nodes.types', name: 'types'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType', name: 'NodeType'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.valueOf', name: 'valueOf'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.toString', name: 'toString'});
MERGE (p:Method {id: 'java.lang.String.substring', name: 'substring'});
MERGE (p:Method {id: 'java.lang.String.toUpperCase', name: 'toUpperCase'});
MERGE (p:Method {id: 'java.lang.String.toLowerCase', name: 'toLowerCase'});
MERGE (p:Method {id: 'java.lang.Object.hashCode', name: 'hashCode'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.hashCode', name: 'hashCode'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.io.DefaultAttribute', name: 'DefaultAttribute'});
MERGE (p:Method {id: 'org.jgrapht.io.DefaultAttribute.createAttribute', name: 'createAttribute'});
MERGE (p:Method {id: 'java.util.Map.put', name: 'put'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode', name: 'ProjectNode'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.equals', name: 'equals'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.generateExportAttributeMap', name: 'generateExportAttributeMap'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.castNode', name: 'castNode'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.Parser', name: 'Parser'});
MERGE (p:ClassOrInterface {id: 'java.nio.file.Paths', name: 'Paths'});
MERGE (p:Method {id: 'java.nio.file.Paths.get', name: 'get'});
MERGE (p:ClassOrInterface {id: 'java.util.ArrayList', name: 'ArrayList'});
MERGE (p:Method {id: 'java.util.ArrayList.add', name: 'add'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.Parser.main', name: 'main'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter', name: 'getNeo4jExporter'});
MERGE (p:Package {id: 'com.jwu.javaparser.dependencygraph.io', name: 'io'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter', name: 'Neo4jCypherExporter'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph', name: 'exportGraph'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.BaseNode', name: 'BaseNode'});
MERGE (p:Method {id: 'java.lang.String.hashCode', name: 'hashCode'});
MERGE (p:Package {id: 'org.jgrapht.graph', name: 'graph'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.graph.DefaultDirectedGraph', name: 'DefaultDirectedGraph'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.graph.AbstractBaseGraph', name: 'AbstractBaseGraph'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.addVertex', name: 'addVertex'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex', name: 'addVertex'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.Graph', name: 'Graph'});
MERGE (p:Method {id: 'org.jgrapht.Graph.addVertex', name: 'addVertex'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildQualifiedName', name: 'buildQualifiedName'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree', name: 'generateTree'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge', name: 'addEdge'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addPackage', name: 'addPackage'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.Graphs', name: 'Graphs'});
MERGE (p:Method {id: 'org.jgrapht.Graphs.addGraph', name: 'addGraph'});
MERGE (p:Method {id: 'java.lang.Object.clone', name: 'clone'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree', name: 'buildPackageClassTree'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.graph.AbstractGraph', name: 'AbstractGraph'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractGraph.toString', name: 'toString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject', name: 'claimPackageForProject'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addOverridesOverloadsEdge', name: 'addOverridesOverloadsEdge'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.vertexSet', name: 'vertexSet'});
MERGE (p:ClassOrInterface {id: 'java.util.Iterator', name: 'Iterator'});
MERGE (p:Method {id: 'java.util.Iterator.next', name: 'next'});
MERGE (p:Method {id: 'java.util.Iterator.hasNext', name: 'hasNext'});
MERGE (p:ClassOrInterface {id: 'java.util.Set', name: 'Set'});
MERGE (p:Method {id: 'java.util.Set.iterator', name: 'iterator'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString', name: 'toString'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType', name: 'EdgeType'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType.toString', name: 'toString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter', name: 'getDOTExporter'});
MERGE (p:Method {id: 'java.lang.String.valueOf', name: 'valueOf'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTImporter', name: 'getDOTImporter'});
MERGE (p:Method {id: 'java.lang.String.equals', name: 'equals'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.io.GraphExporter', name: 'GraphExporter'});
MERGE (p:Method {id: 'org.jgrapht.io.GraphExporter.exportGraph', name: 'exportGraph'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.saveGraphToFile', name: 'saveGraphToFile'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.io.GraphImporter', name: 'GraphImporter'});
MERGE (p:Method {id: 'org.jgrapht.io.GraphImporter.importGraph', name: 'importGraph'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.readGraphFromFile', name: 'readGraphFromFile'});
MERGE (p:ClassOrInterface {id: 'java.io.ObjectOutputStream', name: 'ObjectOutputStream'});
MERGE (p:Method {id: 'java.io.ObjectOutputStream.writeObject', name: 'writeObject'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.serialize', name: 'serialize'});
MERGE (p:Method {id: 'java.io.ObjectOutputStream.close', name: 'close'});
MERGE (p:ClassOrInterface {id: 'java.io.ObjectInputStream', name: 'ObjectInputStream'});
MERGE (p:Method {id: 'java.io.ObjectInputStream.readObject', name: 'readObject'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.deserialize', name: 'deserialize'});
MERGE (p:Method {id: 'java.io.ObjectInputStream.close', name: 'close'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter', name: 'DependencyGraphExporter'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter', name: 'getExporter'});
MERGE (p:Method {id: 'java.lang.String.replace', name: 'replace'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.io.GraphMLExporter', name: 'GraphMLExporter'});
MERGE (p:Method {id: 'org.jgrapht.io.GraphMLExporter.setExportEdgeWeights', name: 'setExportEdgeWeights'});
MERGE (p:Method {id: 'org.jgrapht.io.GraphMLExporter.registerAttribute', name: 'registerAttribute'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor', name: 'PackageDeclarationVisitor'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit', name: 'visit'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.PackageDeclaration', name: 'PackageDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.PackageDeclaration.getName', name: 'getName'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.nodeTypes.NodeWithName', name: 'NodeWithName'});
MERGE (p:Method {id: 'com.github.javaparser.ast.nodeTypes.NodeWithName.getNameAsString', name: 'getNameAsString'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.hashCode', name: 'hashCode'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.equals', name: 'equals'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.ParserCLI', name: 'ParserCLI'});
MERGE (p:Package {id: 'picocli', name: 'picocli'});
MERGE (p:ClassOrInterface {id: 'picocli.CommandLine', name: 'CommandLine'});
MERGE (p:Method {id: 'picocli.CommandLine.run', name: 'run'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.ParserCLI.main', name: 'main'});
MERGE (p:Method {id: 'java.lang.Throwable.printStackTrace', name: 'printStackTrace'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.ParserCLI.run', name: 'run'});
MERGE (p:ClassOrInterface {id: 'java.util.Arrays', name: 'Arrays'});
MERGE (p:Method {id: 'java.util.Arrays.asList', name: 'asList'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher', name: 'DependencyGraphSearcher'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType', name: 'filterNodesForType'});
MERGE (p:Method {id: 'java.util.Collection.stream', name: 'stream'});
MERGE (p:Method {id: 'java.util.stream.Stream.map', name: 'map'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes', name: 'getPredecessorNodes'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode', name: 'getProjectOfNode'});
MERGE (p:ClassOrInterface {id: 'java.util.List', name: 'List'});
MERGE (p:Method {id: 'java.util.List.size', name: 'size'});
MERGE (p:Method {id: 'java.util.List.get', name: 'get'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes', name: 'getSuccessorNodes'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject', name: 'getPackagesInProject'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes', name: 'searchSubGraphForNodes'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInPackage', name: 'getClassesAndInterfacesInPackage'});
MERGE (p:Method {id: 'java.util.Set.addAll', name: 'addAll'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes', name: 'searchSuperGraphForNodes'});
MERGE (p:Package {id: 'java.util.concurrent', name: 'concurrent'});
MERGE (p:ClassOrInterface {id: 'java.util.concurrent.ConcurrentHashMap', name: 'ConcurrentHashMap'});
MERGE (p:Method {id: 'java.util.concurrent.ConcurrentHashMap.contains', name: 'contains'});
MERGE (p:Method {id: 'java.util.concurrent.ConcurrentHashMap.get', name: 'get'});
MERGE (p:ClassOrInterface {id: 'java.util.AbstractCollection', name: 'AbstractCollection'});
MERGE (p:Method {id: 'java.util.AbstractCollection.addAll', name: 'addAll'});
MERGE (p:ClassOrInterface {id: 'java.util.HashSet', name: 'HashSet'});
MERGE (p:Method {id: 'java.util.HashSet.contains', name: 'contains'});
MERGE (p:Method {id: 'java.util.concurrent.ConcurrentHashMap.put', name: 'put'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject', name: 'getClassesAndInterfacesInProject'});
MERGE (p:ClassOrInterface {id: 'java.lang.Iterable', name: 'Iterable'});
MERGE (p:Method {id: 'java.lang.Iterable.forEach', name: 'forEach'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInClassOrInterface', name: 'getMethodsInClassOrInterface'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject', name: 'getMethodsInProject'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject', name: 'getMethodCallsInProject'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getCallsOfMethod', name: 'getCallsOfMethod'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getAllCallsOfMethod', name: 'getAllCallsOfMethod'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getExternalMethodCalls', name: 'getExternalMethodCalls'});
MERGE (p:Method {id: 'java.util.Set.removeAll', name: 'removeAll'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.getEdge', name: 'getEdge'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getEdgeBetweenNodes', name: 'getEdgeBetweenNodes'});
MERGE (p:Method {id: 'org.jgrapht.Graphs.successorListOf', name: 'successorListOf'});
MERGE (p:Method {id: 'org.jgrapht.Graphs.predecessorListOf', name: 'predecessorListOf'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getOutgoingEdges', name: 'getOutgoingEdges'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getIncomingEdges', name: 'getIncomingEdges'});
MERGE (p:Method {id: 'java.util.List.add', name: 'add'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor', name: 'MethodOverloadOverrideVisitor'});
MERGE (p:Method {id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit', name: 'visit'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers', name: 'NodeWithMembers'});
MERGE (p:Method {id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethods', name: 'getMethods'});
MERGE (p:Method {id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getAllMethodsVisibleToInheritors', name: 'getAllMethodsVisibleToInheritors'});
MERGE (p:ClassOrInterface {id: 'org.jgrapht.io.ComponentNameProvider', name: 'ComponentNameProvider'});
MERGE (p:Method {id: 'org.jgrapht.io.ComponentNameProvider.getName', name: 'getName'});
MERGE (p:Method {id: 'java.lang.String.format', name: 'format'});
MERGE (p:ClassOrInterface {id: 'java.io.PrintWriter', name: 'PrintWriter'});
MERGE (p:Method {id: 'java.io.PrintWriter.println', name: 'println'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.getEdgeSource', name: 'getEdgeSource'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.getEdgeTarget', name: 'getEdgeTarget'});
MERGE (p:Method {id: 'org.jgrapht.graph.AbstractBaseGraph.edgeSet', name: 'edgeSet'});
MERGE (p:Method {id: 'java.io.PrintWriter.flush', name: 'flush'});
MERGE (p:ClassOrInterface {id: 'java.util.Objects', name: 'Objects'});
MERGE (p:Method {id: 'java.util.Objects.requireNonNull', name: 'requireNonNull'});
MERGE (p:Method {id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.setVertexIDProvider', name: 'setVertexIDProvider'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.dependencygraph.io.GraphMLImporter', name: 'GraphMLImporter'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.analyser.Analyser', name: 'Analyser'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject', name: 'analyseFromProject'});
MERGE (p:Method {id: 'com.jwu.javaparser.analyser.Analyser.main', name: 'main'});
MERGE (p:ClassOrInterface {id: 'com.jwu.javaparser.parser.ParserTest', name: 'ParserTest'});
MATCH (source:Package { id: 'com'}),(target:Package { id: 'com.jwu'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu'}),(target:Package { id: 'com.jwu.javaparser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser'}),(target:Package { id: 'com.jwu.javaparser.analyser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.analyser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.analyser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.edges'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.edges'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.util'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Optional'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Optional'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentDependencyNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentDependencyNode'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Optional'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentDependencyNode'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentProjectNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentProjectNode'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getParentProjectNode'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildDependencyNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildDependencyNode'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildDependencyNode'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildProjectNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildProjectNode'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.QualifiedDependencyEdge.getChildProjectNode'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.edges'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.edges.types'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.edges.types'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser'}),(target:Package { id: 'com.jwu.javaparser.parser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser'}),(target:Package { id: 'com.jwu.javaparser.parser.visitors'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.parser.visitors'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser.visitors'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com'}),(target:Package { id: 'com.github'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github'}),(target:Package { id: 'com.github.javaparser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:Package { id: 'com.github.javaparser.ast'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.visitor'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.visitor'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.visitor'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitor'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitor'}),(target:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.Node'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.Node'}),(target:Method { id: 'com.github.javaparser.ast.Node.getParentNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}),(target:Method { id: 'com.github.javaparser.ast.Node.getParentNode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Optional'}),(target:Method { id: 'java.util.Optional.isPresent'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}),(target:Method { id: 'java.util.Optional.isPresent'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Optional'}),(target:Method { id: 'java.util.Optional.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}),(target:Method { id: 'java.util.Optional.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.io'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.PrintStream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.PrintStream'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.lang'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Throwable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Throwable'}),(target:Method { id: 'java.lang.Throwable.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'java.lang.Throwable.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.expr'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.expr'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.expr.MethodCallExpr'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.expr.MethodCallExpr'}),(target:Method { id: 'com.github.javaparser.ast.expr.MethodCallExpr.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.expr.MethodCallExpr.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.expr.MethodCallExpr'}),(target:Method { id: 'com.github.javaparser.ast.expr.MethodCallExpr.getArguments'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.expr.MethodCallExpr.getArguments'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.nodeTypes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.nodeTypes'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange.getBegin'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange.getBegin'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Optional'}),(target:Method { id: 'java.util.Optional.ifPresent'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'java.util.Optional.ifPresent'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.expr.MethodCallExpr'}),(target:Method { id: 'com.github.javaparser.ast.expr.MethodCallExpr.resolve'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.expr.MethodCallExpr.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:Package { id: 'com.github.javaparser.resolution'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.resolution'}),(target:Package { id: 'com.github.javaparser.resolution.declarations'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.resolution.declarations'}),(target:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getQualifiedName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getQualifiedName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Object'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Object'}),(target:Method { id: 'java.lang.Object.getClass'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'java.lang.Object.getClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Class'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Class'}),(target:Method { id: 'java.lang.Class.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'java.lang.Class.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.resolution.declarations'}),(target:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getClassName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getClassName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getPackageName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getPackageName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.body'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.ConstructorDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.ConstructorDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.ConstructorDeclaration.resolve'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.ConstructorDeclaration.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addCallsEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addCallsEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.resolution.declarations'}),(target:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getPackageName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getPackageName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getClassName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getClassName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getQualifiedName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getQualifiedName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.MethodDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.MethodDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.MethodDeclaration.resolve'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.MethodDeclaration.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodCallVisitor.identifyParentNode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser.visitors'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.nodeTypes'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getPackageName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getClassName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.type'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.type'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType'}),(target:Method { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.expr'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.expr.SimpleName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.expr.SimpleName'}),(target:Method { id: 'com.github.javaparser.ast.expr.SimpleName.asString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.expr.SimpleName.asString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType'}),(target:Method { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.resolve'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.resolution'}),(target:Package { id: 'com.github.javaparser.resolution.types'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.resolution.types'}),(target:ClassOrInterface { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType'}),(target:Method { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getTypeDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getTypeDeclaration'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addExtendsEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addExtendsEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.NodeList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.NodeList'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.forEach'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.ClassOrInterfaceDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.parser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.DirectoryParser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Collections'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Collections'}),(target:Method { id: 'java.util.Collections.emptyList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.DirectoryParser'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.util.Collections.emptyList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:Package { id: 'java.util.stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util.stream'}),(target:ClassOrInterface { id: 'java.util.stream.Collectors'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Collectors'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.nio'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.nio'}),(target:Package { id: 'java.nio.file'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.nio.file'}),(target:ClassOrInterface { id: 'java.nio.file.Path'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.nio.file.Path'}),(target:Method { id: 'java.nio.file.Path.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.nio.file.Path.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.String'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.endsWith'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.lang.String.endsWith'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.nio.file'}),(target:ClassOrInterface { id: 'java.nio.file.Files'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.nio.file.Files'}),(target:Method { id: 'java.nio.file.Files.list'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.nio.file.Files.list'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util.stream'}),(target:ClassOrInterface { id: 'java.util.stream.Stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.DirectoryParser'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}),(target:Method { id: 'java.util.Collections.emptyList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}),(target:Method { id: 'java.nio.file.Files.list'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.DirectoryParser'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listFilesAtPath'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.listDirsAtPath'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Collection'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Collection'}),(target:Method { id: 'java.util.Collection.addAll'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}),(target:Method { id: 'java.util.Collection.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:Package { id: 'com.github.javaparser.symbolsolver'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.symbolsolver'}),(target:Package { id: 'com.github.javaparser.symbolsolver.resolution'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:Package { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:ClassOrInterface { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver'}),(target:Method { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver.add'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.DirectoryParser'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver.add'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'java.nio.file.Path.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseDirectoriesForFiles'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.symbolsolver'}),(target:Package { id: 'com.github.javaparser.symbolsolver.utils'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.symbolsolver.utils'}),(target:ClassOrInterface { id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy'}),(target:Method { id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy.collect'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:Package { id: 'com.github.javaparser.utils'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.utils'}),(target:ClassOrInterface { id: 'com.github.javaparser.utils.SourceRoot'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.utils.SourceRoot'}),(target:Method { id: 'com.github.javaparser.utils.SourceRoot.getRoot'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.utils.SourceRoot.getRoot'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.utils'}),(target:ClassOrInterface { id: 'com.github.javaparser.utils.ProjectRoot'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.utils.ProjectRoot'}),(target:Method { id: 'com.github.javaparser.utils.ProjectRoot.getSourceRoots'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.utils.ProjectRoot.getSourceRoots'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:ClassOrInterface { id: 'com.github.javaparser.JavaParser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.JavaParser'}),(target:Method { id: 'com.github.javaparser.JavaParser.getStaticConfiguration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.JavaParser.getStaticConfiguration'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:ClassOrInterface { id: 'com.github.javaparser.ParserConfiguration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ParserConfiguration'}),(target:Method { id: 'com.github.javaparser.ParserConfiguration.setSymbolResolver'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.ParserConfiguration.setSymbolResolver'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.utils.SourceRoot'}),(target:Method { id: 'com.github.javaparser.utils.SourceRoot.tryToParse'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.utils.SourceRoot.tryToParse'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.utils.SourceRoot'}),(target:Method { id: 'com.github.javaparser.utils.SourceRoot.getCompilationUnits'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}),(target:Method { id: 'com.github.javaparser.utils.SourceRoot.getCompilationUnits'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.nodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.nodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.nodes'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.nodes'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.equals'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.equals'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.equals'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.castNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.castNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.castNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.castNode'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.prettyString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.prettyString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Object'}),(target:Method { id: 'java.lang.Object.equals'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'java.lang.Object.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.equals'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Object'}),(target:Method { id: 'java.lang.Object.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'java.lang.Object.toString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.simpleName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.simpleName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.simpleName'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.text'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.text'}),(target:ClassOrInterface { id: 'java.text.Normalizer'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.text.Normalizer'}),(target:Method { id: 'java.text.Normalizer.normalize'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.simpleName'}),(target:Method { id: 'java.text.Normalizer.normalize'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.replaceAll'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.simpleName'}),(target:Method { id: 'java.lang.String.replaceAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Map'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.containsKey'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode'}),(target:Method { id: 'java.util.Map.containsKey'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org'}),(target:Package { id: 'org.jgrapht'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'org.jgrapht'}),(target:Package { id: 'org.jgrapht.io'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'org.jgrapht.io'}),(target:ClassOrInterface { id: 'org.jgrapht.io.Attribute'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.Attribute'}),(target:Method { id: 'org.jgrapht.io.Attribute.getValue'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode'}),(target:Method { id: 'org.jgrapht.io.Attribute.getValue'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.nodes'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.nodes.types'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.nodes.types'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.valueOf'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.DependencyNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.valueOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}),(target:Method { id: 'java.text.Normalizer.normalize'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}),(target:Method { id: 'java.lang.String.replaceAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.substring'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}),(target:Method { id: 'java.lang.String.substring'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.toUpperCase'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}),(target:Method { id: 'java.lang.String.toUpperCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Object'}),(target:Method { id: 'java.lang.Object.hashCode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.equals'}),(target:Method { id: 'java.lang.Object.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.hashCode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht.io'}),(target:ClassOrInterface { id: 'org.jgrapht.io.DefaultAttribute'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.DefaultAttribute'}),(target:Method { id: 'org.jgrapht.io.DefaultAttribute.createAttribute'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap'}),(target:Method { id: 'org.jgrapht.io.DefaultAttribute.createAttribute'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.generateExportAttributeMap'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.nodes'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.equals'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.equals'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.generateExportAttributeMap'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.generateExportAttributeMap'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.castNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.castNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.castNode'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'java.lang.Object.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.equals'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.equals'}),(target:Method { id: 'java.lang.Object.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.ProjectNode.generateExportAttributeMap'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.Parser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.nio.file'}),(target:ClassOrInterface { id: 'java.nio.file.Paths'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.nio.file.Paths'}),(target:Method { id: 'java.nio.file.Paths.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser'}),(target:Method { id: 'java.nio.file.Paths.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.ArrayList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.ArrayList'}),(target:Method { id: 'java.util.ArrayList.add'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser'}),(target:Method { id: 'java.util.ArrayList.add'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.Parser'}),(target:Method { id: 'com.jwu.javaparser.parser.Parser.main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser.main'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser.main'}),(target:Method { id: 'java.nio.file.Paths.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser.main'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser.main'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.io'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.io'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.Parser.main'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.BaseNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.BaseNode'}),(target:Method { id: 'java.util.Map.containsKey'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.BaseNode'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.BaseNode'}),(target:Method { id: 'org.jgrapht.io.Attribute.getValue'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.hashCode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.hashCode'}),(target:Method { id: 'java.lang.String.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString'}),(target:Method { id: 'java.text.Normalizer.normalize'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString'}),(target:Method { id: 'java.lang.String.replaceAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.prettyString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}),(target:Method { id: 'org.jgrapht.io.DefaultAttribute.createAttribute'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'org.jgrapht'}),(target:Package { id: 'org.jgrapht.graph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'org.jgrapht.graph'}),(target:ClassOrInterface { id: 'org.jgrapht.graph.DefaultDirectedGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.DefaultDirectedGraph'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:Package { id: 'org.jgrapht.graph'}),(target:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addVertex'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addVertex'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Package { id: 'org.jgrapht'}),(target:ClassOrInterface { id: 'org.jgrapht.Graph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.Graph'}),(target:Method { id: 'org.jgrapht.Graph.addVertex'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'org.jgrapht.Graph.addVertex'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildQualifiedName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildQualifiedName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addPackage'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addPackage'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addPackage'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht'}),(target:ClassOrInterface { id: 'org.jgrapht.Graphs'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.Graphs'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addPackage'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Object'}),(target:Method { id: 'java.lang.Object.clone'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'java.lang.Object.clone'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildQualifiedName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht.graph'}),(target:ClassOrInterface { id: 'org.jgrapht.graph.AbstractGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractGraph.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'org.jgrapht.graph.AbstractGraph.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.generateTree'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addVertex'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'java.lang.Object.clone'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildPackageClassTree'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.buildQualifiedName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addCallsEdge'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addExtendsEdge'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addOverridesOverloadsEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addOverridesOverloadsEdge'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.addVertex'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.vertexSet'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.vertexSet'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Iterator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Iterator'}),(target:Method { id: 'java.util.Iterator.next'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}),(target:Method { id: 'java.util.Iterator.next'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.equals'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Iterator'}),(target:Method { id: 'java.util.Iterator.hasNext'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}),(target:Method { id: 'java.util.Iterator.hasNext'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Set'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Set'}),(target:Method { id: 'java.util.Set.iterator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addVertex'}),(target:Method { id: 'java.util.Set.iterator'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'java.lang.Object.getClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'java.lang.Class.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'org.jgrapht.io.DefaultAttribute.createAttribute'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.edges.types'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.valueOf'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'java.lang.String.valueOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.prettyString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.BaseNode.generateExportAttributeMap'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'java.lang.Object.getClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'java.lang.Class.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'org.jgrapht.io.DefaultAttribute.createAttribute'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTImporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTImporter'}),(target:Method { id: 'java.lang.Class.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.equals'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTImporter'}),(target:Method { id: 'java.lang.String.equals'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht.io'}),(target:ClassOrInterface { id: 'org.jgrapht.io.GraphExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.GraphExporter'}),(target:Method { id: 'org.jgrapht.io.GraphExporter.exportGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.saveGraphToFile'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.saveGraphToFile'}),(target:Method { id: 'org.jgrapht.io.GraphExporter.exportGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht.io'}),(target:ClassOrInterface { id: 'org.jgrapht.io.GraphImporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.GraphImporter'}),(target:Method { id: 'org.jgrapht.io.GraphImporter.importGraph'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.readGraphFromFile'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.readGraphFromFile'}),(target:Method { id: 'org.jgrapht.io.GraphImporter.importGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.ObjectOutputStream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.ObjectOutputStream'}),(target:Method { id: 'java.io.ObjectOutputStream.writeObject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.serialize'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.serialize'}),(target:Method { id: 'java.io.ObjectOutputStream.writeObject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.ObjectOutputStream'}),(target:Method { id: 'java.io.ObjectOutputStream.close'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.serialize'}),(target:Method { id: 'java.io.ObjectOutputStream.close'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.ObjectInputStream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.ObjectInputStream'}),(target:Method { id: 'java.io.ObjectInputStream.readObject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.deserialize'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.deserialize'}),(target:Method { id: 'java.io.ObjectInputStream.readObject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.ObjectInputStream'}),(target:Method { id: 'java.io.ObjectInputStream.close'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.deserialize'}),(target:Method { id: 'java.io.ObjectInputStream.close'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.io'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.io'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.replace'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'java.lang.String.replace'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.prettyString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.types.NodeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'org.jgrapht.io.DefaultAttribute.createAttribute'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht.io'}),(target:ClassOrInterface { id: 'org.jgrapht.io.GraphMLExporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.GraphMLExporter'}),(target:Method { id: 'org.jgrapht.io.GraphMLExporter.setExportEdgeWeights'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'org.jgrapht.io.GraphMLExporter.setExportEdgeWeights'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.GraphMLExporter'}),(target:Method { id: 'org.jgrapht.io.GraphMLExporter.registerAttribute'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.DependencyGraphExporter.getExporter'}),(target:Method { id: 'org.jgrapht.io.GraphMLExporter.registerAttribute'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser.visitors'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.PackageDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.PackageDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.PackageDeclaration.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.PackageDeclaration.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.nodeTypes'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithName'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithName.getNameAsString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithName.getNameAsString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.PackageDeclarationVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.claimPackageForProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.edges'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.types.EdgeType.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.hashCode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.hashCode'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.hashCode'}),(target:Method { id: 'java.lang.String.hashCode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.equals'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.equals'}),(target:Method { id: 'java.lang.Object.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.equals'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.equals'}),(target:Method { id: 'java.lang.String.equals'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.ParserCLI'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'picocli'}),(target:ClassOrInterface { id: 'picocli.CommandLine'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'picocli.CommandLine'}),(target:Method { id: 'picocli.CommandLine.run'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.ParserCLI'}),(target:Method { id: 'com.jwu.javaparser.parser.ParserCLI.main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.main'}),(target:Method { id: 'picocli.CommandLine.run'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Throwable'}),(target:Method { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.ParserCLI'}),(target:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Arrays'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Arrays'}),(target:Method { id: 'java.util.Arrays.asList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'java.util.Arrays.asList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'com.jwu.javaparser.parser.DirectoryParser.parseMethods'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getNeo4jExporter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTExporter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.ParserCLI.run'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.saveGraphToFile'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.analyser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Collection'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.map'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}),(target:Method { id: 'java.util.stream.Stream.map'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.stream.Stream.map'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.List'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.List'}),(target:Method { id: 'java.util.List.size'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.List.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.List'}),(target:Method { id: 'java.util.List.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.List.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.Optional.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}),(target:Method { id: 'java.util.Optional.empty'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInPackage'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInPackage'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Set'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInPackage'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:Package { id: 'java.util.concurrent'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util.concurrent'}),(target:ClassOrInterface { id: 'java.util.concurrent.ConcurrentHashMap'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.concurrent.ConcurrentHashMap'}),(target:Method { id: 'java.util.concurrent.ConcurrentHashMap.contains'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'java.util.concurrent.ConcurrentHashMap.contains'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.concurrent.ConcurrentHashMap'}),(target:Method { id: 'java.util.concurrent.ConcurrentHashMap.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'java.util.concurrent.ConcurrentHashMap.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.AbstractCollection'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.AbstractCollection'}),(target:Method { id: 'java.util.AbstractCollection.addAll'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'java.util.AbstractCollection.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.HashSet'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.HashSet'}),(target:Method { id: 'java.util.HashSet.contains'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'java.util.HashSet.contains'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.concurrent.ConcurrentHashMap'}),(target:Method { id: 'java.util.concurrent.ConcurrentHashMap.put'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}),(target:Method { id: 'java.util.concurrent.ConcurrentHashMap.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInPackage'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Iterable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Iterable'}),(target:Method { id: 'java.lang.Iterable.forEach'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject'}),(target:Method { id: 'java.lang.Iterable.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInClassOrInterface'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInClassOrInterface'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSubGraphForNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInClassOrInterface'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInClassOrInterface'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}),(target:Method { id: 'java.lang.Iterable.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getCallsOfMethod'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getCallsOfMethod'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getCallsOfMethod'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.filterNodesForType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getCallsOfMethod'}),(target:Method { id: 'java.util.Set.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getAllCallsOfMethod'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getAllCallsOfMethod'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.searchSuperGraphForNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getExternalMethodCalls'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getExternalMethodCalls'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getExternalMethodCalls'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodCallsInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Set'}),(target:Method { id: 'java.util.Set.removeAll'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getExternalMethodCalls'}),(target:Method { id: 'java.util.Set.removeAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdge'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getEdgeBetweenNodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getEdgeBetweenNodes'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.Graphs'}),(target:Method { id: 'org.jgrapht.Graphs.successorListOf'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'org.jgrapht.Graphs.successorListOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.Graphs'}),(target:Method { id: 'org.jgrapht.Graphs.predecessorListOf'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'org.jgrapht.Graphs.predecessorListOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getOutgoingEdges'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getOutgoingEdges'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'java.util.stream.Stream.map'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getIncomingEdges'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getIncomingEdges'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'java.util.stream.Stream.map'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getOutgoingEdges'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getSuccessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getOutgoingEdges'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.List'}),(target:Method { id: 'java.util.List.add'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getOutgoingEdges'}),(target:Method { id: 'java.util.List.add'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getIncomingEdges'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPredecessorNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getIncomingEdges'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getIncomingEdges'}),(target:Method { id: 'java.util.List.add'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser.visitors'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor'}) MERGE (source)-[:ExtendedBy]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}) MERGE (source)-[:OverriddenOrOverloadedBy]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getPackageName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.getClassName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.nodeTypes'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethods'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethods'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.expr.SimpleName.asString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getTypeDeclaration'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.lang.String.equals'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getPackageName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.getClassName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addMethod'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.body.MethodDeclaration.resolve'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.addOverridesOverloadsEdge'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.util.stream.Collectors.toList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.util.stream.Stream.collect'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'java.lang.Iterable.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType'}),(target:Method { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getAllMethodsVisibleToInheritors'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType.getAllMethodsVisibleToInheritors'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.parser.visitors.MethodOverloadOverrideVisitor.visit'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'org.jgrapht.io'}),(target:ClassOrInterface { id: 'org.jgrapht.io.ComponentNameProvider'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.io.ComponentNameProvider'}),(target:Method { id: 'org.jgrapht.io.ComponentNameProvider.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'org.jgrapht.io.ComponentNameProvider.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.format'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'java.lang.String.format'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.PrintWriter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.PrintWriter'}),(target:Method { id: 'java.io.PrintWriter.println'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'java.io.PrintWriter.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.vertexSet'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdgeSource'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdgeSource'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdgeTarget'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.getEdgeTarget'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.edges.DependencyEdge.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'org.jgrapht.graph.AbstractBaseGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.edgeSet'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'org.jgrapht.graph.AbstractBaseGraph.edgeSet'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.PrintWriter'}),(target:Method { id: 'java.io.PrintWriter.flush'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.exportGraph'}),(target:Method { id: 'java.io.PrintWriter.flush'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Objects'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Objects'}),(target:Method { id: 'java.util.Objects.requireNonNull'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.setVertexIDProvider'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.dependencygraph.io.Neo4jCypherExporter.setVertexIDProvider'}),(target:Method { id: 'java.util.Objects.requireNonNull'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.dependencygraph.io'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.dependencygraph.io.GraphMLImporter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.analyser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.analyser.Analyser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.Analyser'}),(target:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.getDOTImporter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.DependencyGraph.readGraphFromFile'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'org.jgrapht.Graphs.addGraph'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getPackagesInProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.dependencygraph.nodes.DependencyNode.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getProjectOfNode'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'java.util.Optional.ifPresent'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getAllCallsOfMethod'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getCallsOfMethod'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getMethodsInClassOrInterface'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}),(target:Method { id: 'com.jwu.javaparser.analyser.DependencyGraphSearcher.getClassesAndInterfacesInPackage'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.jwu.javaparser.analyser.Analyser'}),(target:Method { id: 'com.jwu.javaparser.analyser.Analyser.main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'com.jwu.javaparser.analyser.Analyser.main'}),(target:Method { id: 'com.jwu.javaparser.analyser.Analyser.analyseFromProject'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Project { id: 'javaparser/javaparser'}),(target:Package { id: 'com.jwu.javaparser.dependencygraph.nodes.types'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.jwu.javaparser.parser'}),(target:ClassOrInterface { id: 'com.jwu.javaparser.parser.ParserTest'}) MERGE (source)-[:Contains]->(target);
