MERGE (p:Package {id: 'testing', name: 'testing'});
MERGE (p:Project {id: 'testing/testing'});
MERGE (p:ClassOrInterface {id: 'testing.ReversePolishNotation', name: 'ReversePolishNotation'});
MERGE (p:Package {id: 'java', name: 'java'});
MERGE (p:Package {id: 'java.lang', name: 'lang'});
MERGE (p:ClassOrInterface {id: 'java.lang.String', name: 'String'});
MERGE (p:Method {id: 'java.lang.String.split', name: 'split'});
MERGE (p:Method {id: 'testing.ReversePolishNotation.calc', name: 'calc'});
MERGE (p:Package {id: 'java.util', name: 'util'});
MERGE (p:ClassOrInterface {id: 'java.util.Stack', name: 'Stack'});
MERGE (p:Method {id: 'java.util.Stack.pop', name: 'pop'});
MERGE (p:Method {id: 'java.util.Stack.push', name: 'push'});
MERGE (p:ClassOrInterface {id: 'java.lang.Double', name: 'Double'});
MERGE (p:Method {id: 'java.lang.Double.valueOf', name: 'valueOf'});
MERGE (p:Package {id: 'java.util.stream', name: 'stream'});
MERGE (p:ClassOrInterface {id: 'java.util.stream.Stream', name: 'Stream'});
MERGE (p:Method {id: 'java.util.stream.Stream.of', name: 'of'});
MERGE (p:Method {id: 'java.util.stream.Stream.forEach', name: 'forEach'});
MERGE (p:Method {id: 'testing.ReversePolishNotation.launchCalc', name: 'launchCalc'});
MERGE (p:ClassOrInterface {id: 'testing.App', name: 'App'});
MERGE (p:Package {id: 'java.io', name: 'io'});
MERGE (p:ClassOrInterface {id: 'java.io.PrintStream', name: 'PrintStream'});
MERGE (p:Method {id: 'java.io.PrintStream.println', name: 'println'});
MERGE (p:Method {id: 'testing.App.main', name: 'main'});
MERGE (p:Method {id: 'testing.ReversePolishNotation.fetchZero', name: 'fetchZero'});
MATCH (source:Project { id: 'testing/testing'}),(target:Package { id: 'testing'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'testing'}),(target:ClassOrInterface { id: 'testing.ReversePolishNotation'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.lang'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.String'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing.ReversePolishNotation'}),(target:Method { id: 'testing.ReversePolishNotation.calc'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.calc'}),(target:Method { id: 'java.lang.String.split'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.util'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Stack'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Stack'}),(target:Method { id: 'java.util.Stack.pop'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.calc'}),(target:Method { id: 'java.util.Stack.pop'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Stack'}),(target:Method { id: 'java.util.Stack.push'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.calc'}),(target:Method { id: 'java.util.Stack.push'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Double'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Double'}),(target:Method { id: 'java.lang.Double.valueOf'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.calc'}),(target:Method { id: 'java.lang.Double.valueOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:Package { id: 'java.util.stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util.stream'}),(target:ClassOrInterface { id: 'java.util.stream.Stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.of'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.calc'}),(target:Method { id: 'java.util.stream.Stream.of'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.forEach'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.calc'}),(target:Method { id: 'java.util.stream.Stream.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing.ReversePolishNotation'}),(target:Method { id: 'testing.ReversePolishNotation.launchCalc'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.ReversePolishNotation.launchCalc'}),(target:Method { id: 'testing.ReversePolishNotation.calc'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'testing'}),(target:ClassOrInterface { id: 'testing.App'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.io'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.PrintStream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.PrintStream'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing.App'}),(target:Method { id: 'testing.App.main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.App.main'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing.App.main'}),(target:Method { id: 'testing.ReversePolishNotation.launchCalc'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing.ReversePolishNotation'}),(target:Method { id: 'testing.ReversePolishNotation.fetchZero'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing.App.main'}),(target:Method { id: 'testing.ReversePolishNotation.fetchZero'}) MERGE (source)-[:Calls]->(target);
