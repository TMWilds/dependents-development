MERGE (p:Package {id: '', name: ''});
MERGE (p:ClassOrInterface {id: '.Main', name: 'Main'});
MERGE (p:Package {id: 'java', name: 'java'});
MERGE (p:Package {id: 'java.util', name: 'util'});
MERGE (p:ClassOrInterface {id: 'java.util.Vector', name: 'Vector'});
MERGE (p:Method {id: 'java.util.Vector.add', name: 'add'});
MERGE (p:Package {id: 'testing/testing', name: 'testing/testing'});
MERGE (p:Project {id: 'testing/testing'});
MERGE (p:ClassOrInterface {id: 'testing/testing.Main', name: 'Main'});
MERGE (p:Method {id: 'testing/testing.Main.main', name: 'main'});
MERGE (p:Package {id: 'java.io', name: 'io'});
MERGE (p:ClassOrInterface {id: 'java.io.PrintStream', name: 'PrintStream'});
MERGE (p:Method {id: 'java.io.PrintStream.println', name: 'println'});
MERGE (p:ClassOrInterface {id: 'java.io.File', name: 'File'});
MERGE (p:Method {id: 'java.io.File.exists', name: 'exists'});
MERGE (p:Method {id: 'java.io.File.isDirectory', name: 'isDirectory'});
MERGE (p:Method {id: 'java.io.File.getParentFile', name: 'getParentFile'});
MERGE (p:Package {id: 'java.lang', name: 'lang'});
MERGE (p:ClassOrInterface {id: 'java.lang.Throwable', name: 'Throwable'});
MERGE (p:Method {id: 'java.lang.Throwable.printStackTrace', name: 'printStackTrace'});
MERGE (p:ClassOrInterface {id: 'java.lang.StringBuilder', name: 'StringBuilder'});
MERGE (p:Method {id: 'java.lang.StringBuilder.append', name: 'append'});
MERGE (p:Package {id: 'Main', name: 'Main'});
MERGE (p:ClassOrInterface {id: 'Main.Main', name: 'Main'});
MERGE (p:Method {id: 'Main.Main.getFiles', name: 'getFiles'});
MERGE (p:Method {id: 'Main.Main.createDependencyTable', name: 'createDependencyTable'});
MERGE (p:Method {id: 'Main.Main.createDependencyUsesTable', name: 'createDependencyUsesTable'});
MERGE (p:Method {id: 'Main.Main.createStringForPlantUML', name: 'createStringForPlantUML'});
MERGE (p:Method {id: 'java.lang.StringBuilder.toString', name: 'toString'});
MERGE (p:ClassOrInterface {id: 'java.util.Map', name: 'Map'});
MERGE (p:Method {id: 'java.util.Map.size', name: 'size'});
MERGE (p:Method {id: 'testing/testing.Main.createDependencyUsesTable', name: 'createDependencyUsesTable'});
MERGE (p:Method {id: 'testing/testing.Main.createDependencyTable', name: 'createDependencyTable'});
MERGE (p:Method {id: 'java.util.Map.keySet', name: 'keySet'});
MERGE (p:ClassOrInterface {id: 'java.util.Set', name: 'Set'});
MERGE (p:Method {id: 'java.util.Set.toArray', name: 'toArray'});
MERGE (p:ClassOrInterface {id: 'java.util.Arrays', name: 'Arrays'});
MERGE (p:Method {id: 'java.util.Arrays.asList', name: 'asList'});
MERGE (p:Method {id: 'java.util.Vector.addAll', name: 'addAll'});
MERGE (p:Method {id: 'java.util.Map.entrySet', name: 'entrySet'});
MERGE (p:Method {id: 'testing/testing.Main.createStringForPlantUML', name: 'createStringForPlantUML'});
MERGE (p:ClassOrInterface {id: 'java.util.Map.Entry', name: 'Entry'});
MERGE (p:Method {id: 'java.util.Map.Entry.getKey', name: 'getKey'});
MERGE (p:Method {id: 'Main.Main.isInterface', name: 'isInterface'});
MERGE (p:Method {id: 'java.util.Map.Entry.getValue', name: 'getValue'});
MERGE (p:Method {id: 'Main.Main.writeMembers', name: 'writeMembers'});
MERGE (p:Method {id: 'Main.Main.writeClassDependency', name: 'writeClassDependency'});
MERGE (p:Method {id: 'Main.Main.writeClassHierarchy', name: 'writeClassHierarchy'});
MERGE (p:Method {id: 'Main.Main.writeUsesDependency', name: 'writeUsesDependency'});
MERGE (p:Method {id: 'java.util.Vector.get', name: 'get'});
MERGE (p:Method {id: 'testing/testing.Main.writeUsesDependency', name: 'writeUsesDependency'});
MERGE (p:Method {id: 'java.util.Vector.size', name: 'size'});
MERGE (p:Method {id: 'java.util.Map.get', name: 'get'});
MERGE (p:Method {id: 'testing/testing.Main.isInterface', name: 'isInterface'});
MERGE (p:Package {id: 'com', name: 'com'});
MERGE (p:Package {id: 'com.github', name: 'github'});
MERGE (p:Package {id: 'com.github.javaparser', name: 'javaparser'});
MERGE (p:Package {id: 'com.github.javaparser.ast', name: 'ast'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.Node', name: 'Node'});
MERGE (p:Method {id: 'com.github.javaparser.ast.Node.getNodesByType', name: 'getNodesByType'});
MERGE (p:ClassOrInterface {id: 'java.util.List', name: 'List'});
MERGE (p:Method {id: 'java.util.List.get', name: 'get'});
MERGE (p:Package {id: 'com.github.javaparser.ast.body', name: 'body'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration', name: 'ClassOrInterfaceDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface', name: 'isInterface'});
MERGE (p:Method {id: 'Main.Main.GetDependencyNumber', name: 'GetDependencyNumber'});
MERGE (p:Method {id: 'testing/testing.Main.writeClassDependency', name: 'writeClassDependency'});
MERGE (p:ClassOrInterface {id: 'java.lang.String', name: 'String'});
MERGE (p:Method {id: 'java.lang.String.equalsIgnoreCase', name: 'equalsIgnoreCase'});
MERGE (p:ClassOrInterface {id: 'java.lang.AbstractStringBuilder', name: 'AbstractStringBuilder'});
MERGE (p:Method {id: 'java.lang.AbstractStringBuilder.append', name: 'append'});
MERGE (p:Method {id: 'testing/testing.Main.getArrow', name: 'getArrow'});
MERGE (p:Method {id: 'java.util.List.iterator', name: 'iterator'});
MERGE (p:ClassOrInterface {id: 'java.util.Iterator', name: 'Iterator'});
MERGE (p:Method {id: 'java.util.Iterator.next', name: 'next'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.CompilationUnit', name: 'CompilationUnit'});
MERGE (p:Method {id: 'com.github.javaparser.ast.CompilationUnit.getTypes', name: 'getTypes'});
MERGE (p:Method {id: 'testing/testing.Main.findMethod', name: 'findMethod'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.TypeDeclaration', name: 'TypeDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.TypeDeclaration.getMembers', name: 'getMembers'});
MERGE (p:Method {id: 'testing/testing.Main.writeMembers', name: 'writeMembers'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.CallableDeclaration', name: 'CallableDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.CallableDeclaration.getModifiers', name: 'getModifiers'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.CallableDeclaration.getName', name: 'getName'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.CallableDeclaration.getParameters', name: 'getParameters'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.NodeList', name: 'NodeList'});
MERGE (p:Method {id: 'com.github.javaparser.ast.NodeList.listIterator', name: 'listIterator'});
MERGE (p:ClassOrInterface {id: 'java.util.ListIterator', name: 'ListIterator'});
MERGE (p:Method {id: 'java.util.ListIterator.next', name: 'next'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.Parameter', name: 'Parameter'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.Parameter.getName', name: 'getName'});
MERGE (p:Method {id: 'java.util.ListIterator.hasNext', name: 'hasNext'});
MERGE (p:Method {id: 'Main.Main.buildUsesDependency', name: 'buildUsesDependency'});
MERGE (p:Method {id: 'Main.Main.isOverriden', name: 'isOverriden'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.FieldDeclaration', name: 'FieldDeclaration'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.FieldDeclaration.getModifiers', name: 'getModifiers'});
MERGE (p:ClassOrInterface {id: 'java.lang.Object', name: 'Object'});
MERGE (p:Method {id: 'java.lang.Object.getClass', name: 'getClass'});
MERGE (p:Method {id: 'com.github.javaparser.ast.Node.getChildNodes', name: 'getChildNodes'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.FieldDeclaration.getVariables', name: 'getVariables'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.body.VariableDeclarator', name: 'VariableDeclarator'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.VariableDeclarator.getType', name: 'getType'});
MERGE (p:Method {id: 'com.github.javaparser.ast.Node.toString', name: 'toString'});
MERGE (p:Method {id: 'Main.Main.parseClassNameFromString', name: 'parseClassNameFromString'});
MERGE (p:Method {id: 'java.util.Map.containsKey', name: 'containsKey'});
MERGE (p:Method {id: 'Main.Main.parseMultiplicityFromString', name: 'parseMultiplicityFromString'});
MERGE (p:Method {id: 'Main.Main.insertDependencyNumber', name: 'insertDependencyNumber'});
MERGE (p:Method {id: 'testing/testing.Main.buildUsesDependency', name: 'buildUsesDependency'});
MERGE (p:Method {id: 'com.github.javaparser.ast.NodeList.get', name: 'get'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.Parameter.getType', name: 'getType'});
MERGE (p:Method {id: 'java.util.Vector.contains', name: 'contains'});
MERGE (p:Method {id: 'java.util.Vector.indexOf', name: 'indexOf'});
MERGE (p:Method {id: 'com.github.javaparser.ast.NodeList.size', name: 'size'});
MERGE (p:Method {id: 'testing/testing.Main.isOverriden', name: 'isOverriden'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes', name: 'getExtendedTypes'});
MERGE (p:Method {id: 'java.util.List.size', name: 'size'});
MERGE (p:Method {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes', name: 'getImplementedTypes'});
MERGE (p:Package {id: 'com.github.javaparser.ast.nodeTypes', name: 'nodeTypes'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName', name: 'NodeWithSimpleName'});
MERGE (p:Method {id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString', name: 'getNameAsString'});
MERGE (p:Method {id: 'java.io.File.listFiles', name: 'listFiles'});
MERGE (p:Method {id: 'testing/testing.Main.getFiles', name: 'getFiles'});
MERGE (p:Method {id: 'java.io.File.isFile', name: 'isFile'});
MERGE (p:Method {id: 'java.io.File.getName', name: 'getName'});
MERGE (p:Method {id: 'java.lang.String.toLowerCase', name: 'toLowerCase'});
MERGE (p:Method {id: 'java.lang.String.endsWith', name: 'endsWith'});
MERGE (p:ClassOrInterface {id: 'com.github.javaparser.JavaParser', name: 'JavaParser'});
MERGE (p:Method {id: 'com.github.javaparser.JavaParser.parse', name: 'parse'});
MERGE (p:ClassOrInterface {id: 'java.util.Optional', name: 'Optional'});
MERGE (p:Method {id: 'java.util.Optional.get', name: 'get'});
MERGE (p:ClassOrInterface {id: 'java.util.Collection', name: 'Collection'});
MERGE (p:Method {id: 'java.util.Collection.stream', name: 'stream'});
MERGE (p:Package {id: 'java.util.stream', name: 'stream'});
MERGE (p:ClassOrInterface {id: 'java.util.stream.Stream', name: 'Stream'});
MERGE (p:Method {id: 'java.util.stream.Stream.filter', name: 'filter'});
MERGE (p:Method {id: 'java.util.stream.Stream.forEach', name: 'forEach'});
MERGE (p:Method {id: 'java.lang.String.length', name: 'length'});
MERGE (p:Method {id: 'java.lang.String.substring', name: 'substring'});
MERGE (p:Method {id: 'java.util.Map.put', name: 'put'});
MERGE (p:Method {id: 'testing/testing.Main.testUML', name: 'testUML'});
MERGE (p:Method {id: 'testing/testing.Main.writeClassHierarchy', name: 'writeClassHierarchy'});
MERGE (p:Method {id: 'testing/testing.Main.insertDependencyNumber', name: 'insertDependencyNumber'});
MERGE (p:Method {id: 'java.lang.String.contains', name: 'contains'});
MERGE (p:Method {id: 'testing/testing.Main.parseClassNameFromString', name: 'parseClassNameFromString'});
MERGE (p:Method {id: 'testing/testing.Main.parseMultiplicityFromString', name: 'parseMultiplicityFromString'});
MATCH (source:Package { id: ''}),(target:ClassOrInterface { id: '.Main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.util'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Vector'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Vector'}),(target:Method { id: 'java.util.Vector.add'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Project { id: 'testing/testing'}),(target:Package { id: 'testing/testing'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'testing/testing'}),(target:ClassOrInterface { id: 'testing/testing.Main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.util.Vector.add'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.io'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.PrintStream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.PrintStream'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.io'}),(target:ClassOrInterface { id: 'java.io.File'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.File'}),(target:Method { id: 'java.io.File.exists'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.io.File.exists'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.File'}),(target:Method { id: 'java.io.File.isDirectory'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.io.File.isDirectory'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.File'}),(target:Method { id: 'java.io.File.getParentFile'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.io.File.getParentFile'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java'}),(target:Package { id: 'java.lang'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Throwable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Throwable'}),(target:Method { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.StringBuilder'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.StringBuilder'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'Main'}),(target:ClassOrInterface { id: 'Main.Main'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.getFiles'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'Main.Main.getFiles'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.createDependencyTable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'Main.Main.createDependencyTable'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.createDependencyUsesTable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'Main.Main.createDependencyUsesTable'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.createStringForPlantUML'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'Main.Main.createStringForPlantUML'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.StringBuilder'}),(target:Method { id: 'java.lang.StringBuilder.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.main'}),(target:Method { id: 'java.lang.StringBuilder.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Map'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.size'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.createDependencyUsesTable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createDependencyUsesTable'}),(target:Method { id: 'java.util.Map.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.createDependencyTable'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createDependencyTable'}),(target:Method { id: 'java.util.Map.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.keySet'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createDependencyTable'}),(target:Method { id: 'java.util.Map.keySet'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Set'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Set'}),(target:Method { id: 'java.util.Set.toArray'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createDependencyTable'}),(target:Method { id: 'java.util.Set.toArray'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Arrays'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Arrays'}),(target:Method { id: 'java.util.Arrays.asList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createDependencyTable'}),(target:Method { id: 'java.util.Arrays.asList'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Vector'}),(target:Method { id: 'java.util.Vector.addAll'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createDependencyTable'}),(target:Method { id: 'java.util.Vector.addAll'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.entrySet'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.createStringForPlantUML'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'java.util.Map.entrySet'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:ClassOrInterface { id: 'java.util.Map.Entry'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map.Entry'}),(target:Method { id: 'java.util.Map.Entry.getKey'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'java.util.Map.Entry.getKey'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.isInterface'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'Main.Main.isInterface'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map.Entry'}),(target:Method { id: 'java.util.Map.Entry.getValue'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'java.util.Map.Entry.getValue'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.writeMembers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'Main.Main.writeMembers'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.writeClassDependency'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'Main.Main.writeClassDependency'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.writeClassHierarchy'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'Main.Main.writeClassHierarchy'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.writeUsesDependency'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.createStringForPlantUML'}),(target:Method { id: 'Main.Main.writeUsesDependency'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Vector'}),(target:Method { id: 'java.util.Vector.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.writeUsesDependency'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeUsesDependency'}),(target:Method { id: 'java.util.Vector.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeUsesDependency'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Vector'}),(target:Method { id: 'java.util.Vector.size'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeUsesDependency'}),(target:Method { id: 'java.util.Vector.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeUsesDependency'}),(target:Method { id: 'java.lang.StringBuilder.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.isInterface'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isInterface'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com'}),(target:Package { id: 'com.github'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github'}),(target:Package { id: 'com.github.javaparser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:Package { id: 'com.github.javaparser.ast'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.Node'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.Node'}),(target:Method { id: 'com.github.javaparser.ast.Node.getNodesByType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isInterface'}),(target:Method { id: 'com.github.javaparser.ast.Node.getNodesByType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.List'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.List'}),(target:Method { id: 'java.util.List.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isInterface'}),(target:Method { id: 'java.util.List.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.body'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isInterface'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.GetDependencyNumber'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.writeClassDependency'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassDependency'}),(target:Method { id: 'Main.Main.GetDependencyNumber'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.String'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassDependency'}),(target:Method { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassDependency'}),(target:Method { id: 'java.util.Vector.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassDependency'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassDependency'}),(target:Method { id: 'java.util.Vector.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.AbstractStringBuilder'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.AbstractStringBuilder'}),(target:Method { id: 'java.lang.AbstractStringBuilder.append'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassDependency'}),(target:Method { id: 'java.lang.AbstractStringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.getArrow'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getArrow'}),(target:Method { id: 'java.util.Vector.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getArrow'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getArrow'}),(target:Method { id: 'com.github.javaparser.ast.Node.getNodesByType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.List'}),(target:Method { id: 'java.util.List.iterator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getArrow'}),(target:Method { id: 'java.util.List.iterator'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Iterator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Iterator'}),(target:Method { id: 'java.util.Iterator.next'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getArrow'}),(target:Method { id: 'java.util.Iterator.next'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getArrow'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.CompilationUnit'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.CompilationUnit'}),(target:Method { id: 'com.github.javaparser.ast.CompilationUnit.getTypes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.findMethod'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.findMethod'}),(target:Method { id: 'com.github.javaparser.ast.CompilationUnit.getTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.TypeDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.TypeDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.TypeDeclaration.getMembers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.findMethod'}),(target:Method { id: 'com.github.javaparser.ast.body.TypeDeclaration.getMembers'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.findMethod'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.writeMembers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.CompilationUnit.getTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.TypeDeclaration.getMembers'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.CallableDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.CallableDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getModifiers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getModifiers'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.CallableDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.CallableDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getParameters'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getParameters'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.NodeList'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.NodeList'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.listIterator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.listIterator'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.ListIterator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.ListIterator'}),(target:Method { id: 'java.util.ListIterator.next'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'java.util.ListIterator.next'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.Parameter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.Parameter'}),(target:Method { id: 'com.github.javaparser.ast.body.Parameter.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.Parameter.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.ListIterator'}),(target:Method { id: 'java.util.ListIterator.hasNext'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'java.util.ListIterator.hasNext'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.buildUsesDependency'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'Main.Main.buildUsesDependency'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.isOverriden'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'Main.Main.isOverriden'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.FieldDeclaration'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.FieldDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.FieldDeclaration.getModifiers'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.FieldDeclaration.getModifiers'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.lang'}),(target:ClassOrInterface { id: 'java.lang.Object'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.Object'}),(target:Method { id: 'java.lang.Object.getClass'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'java.lang.Object.getClass'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.Node'}),(target:Method { id: 'com.github.javaparser.ast.Node.getChildNodes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.Node.getChildNodes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.FieldDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.FieldDeclaration.getVariables'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.FieldDeclaration.getVariables'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.body'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.body.VariableDeclarator'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.VariableDeclarator'}),(target:Method { id: 'com.github.javaparser.ast.body.VariableDeclarator.getType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.body.VariableDeclarator.getType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.Node'}),(target:Method { id: 'com.github.javaparser.ast.Node.toString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'com.github.javaparser.ast.Node.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.parseClassNameFromString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'Main.Main.parseClassNameFromString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.containsKey'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'java.util.Map.containsKey'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.parseMultiplicityFromString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'Main.Main.parseMultiplicityFromString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'Main.Main'}),(target:Method { id: 'Main.Main.insertDependencyNumber'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeMembers'}),(target:Method { id: 'Main.Main.insertDependencyNumber'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.buildUsesDependency'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getParameters'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.NodeList'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.Parameter'}),(target:Method { id: 'com.github.javaparser.ast.body.Parameter.getType'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'com.github.javaparser.ast.body.Parameter.getType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'com.github.javaparser.ast.Node.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Vector'}),(target:Method { id: 'java.util.Vector.contains'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'java.util.Vector.contains'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Vector'}),(target:Method { id: 'java.util.Vector.indexOf'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'java.util.Vector.indexOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.NodeList'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.size'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.buildUsesDependency'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.isOverriden'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.Node.getNodesByType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'java.util.List.iterator'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'java.util.Iterator.next'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.body.CallableDeclaration.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.Node.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'java.util.List.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.List'}),(target:Method { id: 'java.util.List.size'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'java.util.List.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast'}),(target:Package { id: 'com.github.javaparser.ast.nodeTypes'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'com.github.javaparser.ast.nodeTypes'}),(target:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.isOverriden'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.File'}),(target:Method { id: 'java.io.File.listFiles'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.getFiles'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.io.File.listFiles'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.File'}),(target:Method { id: 'java.io.File.isFile'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.io.File.isFile'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.io.File'}),(target:Method { id: 'java.io.File.getName'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.io.File.getName'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.lang.String.toLowerCase'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.endsWith'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.lang.String.endsWith'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.io.File.isDirectory'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'Main.Main.getFiles'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.io.PrintStream.println'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'com.github.javaparser'}),(target:ClassOrInterface { id: 'com.github.javaparser.JavaParser'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'com.github.javaparser.JavaParser'}),(target:Method { id: 'com.github.javaparser.JavaParser.parse'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'com.github.javaparser.JavaParser.parse'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'com.github.javaparser.ast.CompilationUnit.getTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Optional'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Optional'}),(target:Method { id: 'java.util.Optional.get'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.util.Optional.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'com.github.javaparser.ast.body.FieldDeclaration.getModifiers'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'com.github.javaparser.ast.Node.getNodesByType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:ClassOrInterface { id: 'java.util.Collection'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Collection'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.util.Collection.stream'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Package { id: 'java.util'}),(target:Package { id: 'java.util.stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Package { id: 'java.util.stream'}),(target:ClassOrInterface { id: 'java.util.stream.Stream'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.util.stream.Stream.filter'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.stream.Stream'}),(target:Method { id: 'java.util.stream.Stream.forEach'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.util.stream.Stream.forEach'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.length'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.lang.String.length'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.substring'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.lang.String.substring'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.util.Map'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.getFiles'}),(target:Method { id: 'java.util.Map.put'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.testUML'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.testUML'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.testUML'}),(target:Method { id: 'java.lang.StringBuilder.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.writeClassHierarchy'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.util.Vector.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.util.Map.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'com.github.javaparser.ast.Node.getNodesByType'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.util.List.iterator'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.util.Iterator.next'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.get'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.lang.StringBuilder.append'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'com.github.javaparser.ast.NodeList.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.util.Vector.size'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.writeClassHierarchy'}),(target:Method { id: 'java.lang.StringBuilder.toString'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.insertDependencyNumber'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.insertDependencyNumber'}),(target:Method { id: 'java.util.Vector.indexOf'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'java.lang.String'}),(target:Method { id: 'java.lang.String.contains'}) MERGE (source)-[:Contains]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.parseClassNameFromString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.parseClassNameFromString'}),(target:Method { id: 'java.lang.String.contains'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.parseClassNameFromString'}),(target:Method { id: 'java.lang.String.substring'}) MERGE (source)-[:Calls]->(target);
MATCH (source:Method { id: 'testing/testing.Main.parseClassNameFromString'}),(target:Method { id: 'java.lang.String.length'}) MERGE (source)-[:Calls]->(target);
MATCH (source:ClassOrInterface { id: 'testing/testing.Main'}),(target:Method { id: 'testing/testing.Main.parseMultiplicityFromString'}) MERGE (source)-[:Contains]->(target);
MATCH (source:Method { id: 'testing/testing.Main.parseMultiplicityFromString'}),(target:Method { id: 'java.lang.String.contains'}) MERGE (source)-[:Calls]->(target);
