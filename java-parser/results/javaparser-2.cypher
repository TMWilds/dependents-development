MERGE (p:PACKAGE {id: 'com', name: 'com'});
MERGE (p:PACKAGE {id: 'com.github', name: 'github'});
MERGE (p:PACKAGE {id: 'com.github.javaparser', name: 'javaparser'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast', name: 'ast'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.expr', name: 'expr'});
MERGE (p:Project {id: 'comjavaparser', name: 'javaparser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.EnclosedExpr', name: 'EnclosedExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.Expression', name: 'Expression'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.visitor', name: 'visitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.GenericVisitorAdapter', name: 'GenericVisitorAdapter'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.body', name: 'body'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.ConstructorDeclaration', name: 'ConstructorDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.BodyDeclaration', name: 'BodyDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.AnnotationDeclaration', name: 'AnnotationDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.TypeDeclaration', name: 'TypeDeclaration'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.stmt', name: 'stmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.BreakStmt', name: 'BreakStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.Statement', name: 'Statement'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.type', name: 'type'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.UnknownType', name: 'UnknownType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.Type', name: 'Type'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.EqualsVisitor', name: 'EqualsVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.EmptyTypeDeclaration', name: 'EmptyTypeDeclaration'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.internal', name: 'internal'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.internal.Utils', name: 'Utils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.SwitchStmt', name: 'SwitchStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Node', name: 'Node'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.NormalAnnotationExpr', name: 'NormalAnnotationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.AnnotationExpr', name: 'AnnotationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.PrimitiveType', name: 'PrimitiveType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavaParser', name: 'JavaParser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.WhileStmt', name: 'WhileStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LongLiteralExpr', name: 'LongLiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.StringLiteralExpr', name: 'StringLiteralExpr'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.comments', name: 'comments'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.CommentsParser', name: 'CommentsParser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.InitializerDeclaration', name: 'InitializerDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.QualifiedNameExpr', name: 'QualifiedNameExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.NameExpr', name: 'NameExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.TypeDeclarationStmt', name: 'TypeDeclarationStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.DocumentableNode', name: 'DocumentableNode'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration', name: 'ClassOrInterfaceDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.VariableDeclaratorId', name: 'VariableDeclaratorId'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.FieldAccessExpr', name: 'FieldAccessExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.MethodReferenceExpr', name: 'MethodReferenceExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.UnaryExpr', name: 'UnaryExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.IntegerLiteralMinValueExpr', name: 'IntegerLiteralMinValueExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.IntegerLiteralExpr', name: 'IntegerLiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.NullLiteralExpr', name: 'NullLiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LiteralExpr', name: 'LiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.VariableDeclarator', name: 'VariableDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LambdaExpr', name: 'LambdaExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.InstanceOfExpr', name: 'InstanceOfExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ArrayCreationExpr', name: 'ArrayCreationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.NamedNode', name: 'NamedNode'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ThisExpr', name: 'ThisExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.TypeParameter', name: 'TypeParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.MethodDeclaration', name: 'MethodDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.MemberValuePair', name: 'MemberValuePair'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.MarkerAnnotationExpr', name: 'MarkerAnnotationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.ModifierVisitorAdapter', name: 'ModifierVisitorAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.LabeledStmt', name: 'LabeledStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.MultiTypeParameter', name: 'MultiTypeParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.BaseParameter', name: 'BaseParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.VoidVisitor', name: 'VoidVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.TryStmt', name: 'TryStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.VariableDeclarationExpr', name: 'VariableDeclarationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.CharLiteralExpr', name: 'CharLiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ArrayInitializerExpr', name: 'ArrayInitializerExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ContinueStmt', name: 'ContinueStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.MethodCallExpr', name: 'MethodCallExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.SourcesHelper', name: 'SourcesHelper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.ClassOrInterfaceType', name: 'ClassOrInterfaceType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.AnnotationMemberDeclaration', name: 'AnnotationMemberDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.Parameter', name: 'Parameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.LineComment', name: 'LineComment'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.Comment', name: 'Comment'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.DumpVisitor', name: 'DumpVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter', name: 'SourcePrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.BlockStmt', name: 'BlockStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.AssertStmt', name: 'AssertStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.TypeExpr', name: 'TypeExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ThrowStmt', name: 'ThrowStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.ImportDeclaration', name: 'ImportDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ExpressionStmt', name: 'ExpressionStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ConditionalExpr', name: 'ConditionalExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.SwitchEntryStmt', name: 'SwitchEntryStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.ReferenceType', name: 'ReferenceType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.CloneVisitor', name: 'CloneVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.EnumConstantDeclaration', name: 'EnumConstantDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.JavadocComment', name: 'JavadocComment'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.ModifierSet', name: 'ModifierSet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.IfStmt', name: 'IfStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ReturnStmt', name: 'ReturnStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.VoidType', name: 'VoidType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.CompilationUnit', name: 'CompilationUnit'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.DoStmt', name: 'DoStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.AssignExpr', name: 'AssignExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.GenericVisitor', name: 'GenericVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.CastExpr', name: 'CastExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ClassExpr', name: 'ClassExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ForStmt', name: 'ForStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter', name: 'VoidVisitorAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.EmptyStmt', name: 'EmptyStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.PackageDeclaration', name: 'PackageDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.SynchronizedStmt', name: 'SynchronizedStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ObjectCreationExpr', name: 'ObjectCreationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.BooleanLiteralExpr', name: 'BooleanLiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.CatchClause', name: 'CatchClause'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SuperExpr', name: 'SuperExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTHelper', name: 'ASTHelper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LongLiteralMinValueExpr', name: 'LongLiteralMinValueExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ArrayAccessExpr', name: 'ArrayAccessExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.EmptyMemberDeclaration', name: 'EmptyMemberDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SingleMemberAnnotationExpr', name: 'SingleMemberAnnotationExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.WithDeclaration', name: 'WithDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.WildcardType', name: 'WildcardType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt', name: 'ExplicitConstructorInvocationStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Position', name: 'Position'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.CommentsCollection', name: 'CommentsCollection'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.AnnotableNode', name: 'AnnotableNode'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ForeachStmt', name: 'ForeachStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.DoubleLiteralExpr', name: 'DoubleLiteralExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.BinaryExpr', name: 'BinaryExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.PositionUtils', name: 'PositionUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.EnumDeclaration', name: 'EnumDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.FieldDeclaration', name: 'FieldDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.BlockComment', name: 'BlockComment'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.TreeVisitor', name: 'TreeVisitor'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver', name: 'symbolsolver'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.model', name: 'model'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.model.resolution', name: 'resolution'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.resolution.SymbolReference', name: 'SymbolReference'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.resolution.TypeSolver', name: 'TypeSolver'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.model.typesystem', name: 'typesystem'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.NullType', name: 'NullType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.resolution.Value', name: 'Value'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue300', name: 'Issue300'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution', name: 'resolution'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest', name: 'AbstractResolutionTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser', name: 'javaparser'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts', name: 'contexts'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.FieldAccessContextResolutionTest', name: 'FieldAccessContextResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue200', name: 'Issue200'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue18', name: 'Issue18'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.reflectionmodel', name: 'reflectionmodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclarationTest', name: 'ReflectionInterfaceDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest', name: 'AbstractSymbolResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue314', name: 'Issue314'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers', name: 'typesolvers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolverTest', name: 'JavaParserTypeSolverTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue228', name: 'Issue228'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference', name: 'typeinference'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds', name: 'bounds'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SameAsBoundTest', name: 'SameAsBoundTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolverTest', name: 'JarTypeSolverTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodContextResolutionTest', name: 'MethodContextResolutionTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.resolution', name: 'resolution'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.resolution.types', name: 'types'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedPrimitiveTypeTest', name: 'ResolvedPrimitiveTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue276', name: 'Issue276'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue128', name: 'Issue128'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.MethodLikeSignaturesTest', name: 'MethodLikeSignaturesTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.javassistmodel', name: 'javassistmodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistParameterDeclarationTest', name: 'JavassistParameterDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.JavaSymbolSolverTest', name: 'JavaSymbolSolverTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.utils', name: 'utils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.utils.LeanParserConfiguration', name: 'LeanParserConfiguration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParserConfiguration', name: 'ParserConfiguration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.PrimitiveTypeTest', name: 'PrimitiveTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodCallExprContextResolutionTest', name: 'MethodCallExprContextResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest', name: 'ReflectionClassDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Foo', name: 'Foo'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Bar', name: 'Bar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.FieldsResolutionTest', name: 'FieldsResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue232', name: 'Issue232'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.FindingAllFields', name: 'FindingAllFields'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.ClassOrInterfaceDeclarationContextResolutionTest', name: 'ClassOrInterfaceDeclarationContextResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue1491', name: 'Issue1491'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserTest', name: 'AnalyseNewJavaParserTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.NullTypeTest', name: 'NullTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue113', name: 'Issue113'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.ConstructorsResolutionTest', name: 'ConstructorsResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.AarTypeSolverTest', name: 'AarTypeSolverTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.ArrayExprTest', name: 'ArrayExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.LambdaExprContextResolutionTest', name: 'LambdaExprContextResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolverTest', name: 'ReflectionTypeSolverTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.logic', name: 'logic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.FunctionInterfaceLogicTest', name: 'FunctionInterfaceLogicTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.TypeVariableUsageTest', name: 'TypeVariableUsageTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.SolveMethodDeclaredInEnumTest', name: 'SolveMethodDeclaredInEnumTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.naming', name: 'naming'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicDisambiguationTest', name: 'NameLogicDisambiguationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.naming.AbstractNameLogicTest', name: 'AbstractNameLogicTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest', name: 'GenericsResolutionTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.javaparsermodel', name: 'javaparsermodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.ConvertToUsageTest', name: 'ConvertToUsageTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.Issue257', name: 'Issue257'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.VoidTypeTest', name: 'VoidTypeTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel', name: 'reflectionmodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel.SymbolResolutionResolutionTest', name: 'SymbolResolutionResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SubtypeOfBoundTest', name: 'SubtypeOfBoundTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations', name: 'declarations'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclarationTest', name: 'JavaParserInterfaceDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue1814', name: 'Issue1814'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicTestingJss060Test', name: 'NameLogicTestingJss060Test'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest', name: 'JavaParserAnonymousClassDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest', name: 'ReferenceTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Foo', name: 'Foo'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Bar', name: 'Bar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Bazzer', name: 'Bazzer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.MoreBazzing', name: 'MoreBazzing'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.ContextTest', name: 'ContextTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue84', name: 'Issue84'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue347', name: 'Issue347'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.ExprResolutionTest', name: 'ExprResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistEnumTest', name: 'SymbolSolverWithJavassistEnumTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolverTest', name: 'CombinedTypeSolverTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.EnumLiteralsInAnnotatedClassTest', name: 'EnumLiteralsInAnnotatedClassTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistClassTest', name: 'SymbolSolverWithJavassistClassTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserHelpersTest', name: 'AnalyseNewJavaParserHelpersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicTest', name: 'NameLogicTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AnnotationsResolutionTest', name: 'AnnotationsResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionParameterDeclarationTest', name: 'ReflectionParameterDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.VariadicResolutionTest', name: 'VariadicResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue1946', name: 'Issue1946'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeParameterDeclarationTest', name: 'JavassistTypeParameterDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest', name: 'LambdaResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclarationTest', name: 'ReflectionEnumDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.InferenceContextTest', name: 'InferenceContextTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue2035', name: 'Issue2035'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.DefaultPackageTest', name: 'DefaultPackageTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.DefaultPackageTest.MyClassDeclaration', name: 'MyClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration', name: 'AbstractClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ArrayTypeTest', name: 'ArrayTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.MethodsResolutionLogicTest', name: 'MethodsResolutionLogicTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue1364', name: 'Issue1364'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest', name: 'StatementContextResolutionTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts', name: 'contexts'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest', name: 'MultiCatchMethodCallExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest.Visitor', name: 'Visitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.DifferentiateDotExpressionTest', name: 'DifferentiateDotExpressionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclarationTest', name: 'JavaParserEnumDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.CompilationUnitContextResolutionTest', name: 'CompilationUnitContextResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclarationTest', name: 'JavaParserClassDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.MethodsResolutionTest', name: 'MethodsResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest', name: 'JavaParserFacadeResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclarationTest', name: 'ReflectionMethodDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclarationTest.Foo', name: 'Foo'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue185', name: 'Issue185'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas', name: 'constraintformulas'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.ConstraintFormulaTest', name: 'ConstraintFormulaTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.EnumDeclarationContextResolutionTest', name: 'EnumDeclarationContextResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue186', name: 'Issue186'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue241', name: 'Issue241'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest', name: 'WildcardUsageTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Foo', name: 'Foo'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Bar', name: 'Bar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.InternalClassInInterfaceTest', name: 'InternalClassInInterfaceTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.EnumResolutionTest', name: 'EnumResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclarationTest', name: 'JavassistEnumDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue156', name: 'Issue156'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.testingclasses', name: 'testingclasses'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.testingclasses.SomeClass', name: 'SomeClass'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverTest', name: 'SymbolSolverTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AnalyseJavaParserTest', name: 'AnalyseJavaParserTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.VarTypeTest', name: 'VarTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AnalyseJavaSymbolSolver060Test', name: 'AnalyseJavaSymbolSolver060Test'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.AnonymousClassesResolutionTest', name: 'AnonymousClassesResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue1668', name: 'Issue1668'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategyTest', name: 'SymbolSolverCollectionStrategyTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations', name: 'declarations'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest', name: 'JavaParserTypeParameterResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue251', name: 'Issue251'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclarationTest', name: 'JavassistInterfaceDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclarationTest', name: 'JavassistMethodDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue343', name: 'Issue343'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue116', name: 'Issue116'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue235', name: 'Issue235'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.QualifiedNameResolutionTest', name: 'QualifiedNameResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.TypeInClassWithAnnotationAncestorTest', name: 'TypeInClassWithAnnotationAncestorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.JavaParserAPIIntegrationTest', name: 'JavaParserAPIIntegrationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue144', name: 'Issue144'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistInterfaceTest', name: 'SymbolSolverWithJavassistInterfaceTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.testingclasses.UtilityClass', name: 'UtilityClass'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.Issue1485', name: 'Issue1485'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.UnknownMethodsResolutionTest', name: 'UnknownMethodsResolutionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclarationTest', name: 'JavassistClassDeclarationTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.generator', name: 'generator'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.generator.core', name: 'core'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.generator.core.visitor', name: 'visitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator', name: 'ModifierVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.VisitorGenerator', name: 'VisitorGenerator'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.generator.core.node', name: 'node'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.TypeCastingGenerator', name: 'TypeCastingGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.NodeGenerator', name: 'NodeGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator', name: 'GenericVisitorAdapterGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.MainConstructorGenerator', name: 'MainConstructorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator', name: 'NoCommentEqualsVisitorGenerator'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.generator.core.other', name: 'other'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.other.TokenKindGenerator', name: 'TokenKindGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.Generator', name: 'Generator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator', name: 'GenericListVisitorAdapterGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.RemoveMethodGenerator', name: 'RemoveMethodGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator', name: 'NoCommentHashCodeVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator', name: 'ObjectIdentityHashCodeVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.AcceptGenerator', name: 'AcceptGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator', name: 'EqualsVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.CloneGenerator', name: 'CloneGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.VoidVisitorGenerator', name: 'VoidVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator', name: 'GenericVisitorWithDefaultsGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator', name: 'VoidVisitorAdapterGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.ReplaceMethodGenerator', name: 'ReplaceMethodGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator', name: 'HashCodeVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.CoreGenerator', name: 'CoreGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator', name: 'VoidVisitorWithDefaultsGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.other.GrammarLetterGenerator', name: 'GrammarLetterGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.PropertyGenerator', name: 'PropertyGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.GetMetaModelGenerator', name: 'GetMetaModelGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator', name: 'ObjectIdentityEqualsVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.CloneVisitorGenerator', name: 'CloneVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.visitor.GenericVisitorGenerator', name: 'GenericVisitorGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.core.node.NodeModifierGenerator', name: 'NodeModifierGenerator'});
MERGE (p:PACKAGE {id: '', name: ''});
MERGE (p:CLASS_OR_INTERFACE {id: '.X', name: 'X'});
MERGE (p:PACKAGE {id: 'foo', name: 'foo'});
MERGE (p:PACKAGE {id: 'foo.bar', name: 'bar'});
MERGE (p:PACKAGE {id: 'foo.bar.differentpackage', name: 'differentpackage'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.bar.differentpackage.AClass', name: 'AClass'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.bar.BinaryExpr', name: 'BinaryExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.bar.AClass', name: 'AClass'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.modules', name: 'modules'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleProvidesDirective', name: 'ModuleProvidesDirective'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleDirective', name: 'ModuleDirective'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.nodeTypes', name: 'nodeTypes'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithConstructors', name: 'NodeWithConstructors'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName', name: 'NodeWithSimpleName'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers', name: 'NodeWithMembers'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.validator', name: 'validator'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.validator.chunks', name: 'chunks'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.chunks.CommonValidators', name: 'CommonValidators'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Validators', name: 'Validators'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.nodeTypes.modifiers', name: 'modifiers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers', name: 'NodeWithAccessModifiers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier', name: 'NodeWithPublicModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier', name: 'NodeWithPrivateModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier', name: 'NodeWithProtectedModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalScope', name: 'NodeWithOptionalScope'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithTraversableScope', name: 'NodeWithTraversableScope'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.metamodel', name: 'metamodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ArrayAccessExprMetaModel', name: 'ArrayAccessExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ExpressionMetaModel', name: 'ExpressionMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.MemberValuePairMetaModel', name: 'MemberValuePairMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.NodeMetaModel', name: 'NodeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleExportsDirectiveMetaModel', name: 'ModuleExportsDirectiveMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel', name: 'ModuleDirectiveMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleDeclaration', name: 'ModuleDeclaration'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer', name: 'printer'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer.concretesyntaxmodel', name: 'concretesyntaxmodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmNone', name: 'CsmNone'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.CastExprMetaModel', name: 'CastExprMetaModel'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javadoc', name: 'javadoc'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.JavadocBlockTag', name: 'JavadocBlockTag'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithParameters', name: 'NodeWithParameters'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.resolution.declarations', name: 'declarations'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration', name: 'ResolvedFieldDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration', name: 'ResolvedValueDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier', name: 'HasAccessSpecifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator', name: 'NoBinaryIntegerLiteralsValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.VisitorValidator', name: 'VisitorValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmElement', name: 'CsmElement'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration', name: 'ResolvedMethodLikeDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration', name: 'ResolvedDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable', name: 'ResolvedTypeParametrizable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ParameterMetaModel', name: 'ParameterMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmList', name: 'CsmList'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BlockStmtMetaModel', name: 'BlockStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.StatementMetaModel', name: 'StatementMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier', name: 'NodeWithFinalModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers', name: 'NodeWithModifiers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedWildcard', name: 'ResolvedWildcard'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.SwitchNode', name: 'SwitchNode'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithArguments', name: 'NodeWithArguments'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel', name: 'ClassOrInterfaceDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.TypeDeclarationMetaModel', name: 'TypeDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.AnnotationMemberDeclarationMetaModel', name: 'AnnotationMemberDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel', name: 'BodyDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BooleanLiteralExprMetaModel', name: 'BooleanLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LiteralExprMetaModel', name: 'LiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java10Validator', name: 'Java10Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java9Validator', name: 'Java9Validator'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.observer', name: 'observer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleExportsDirective', name: 'ModuleExportsDirective'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.SingleNodeTypeValidator', name: 'SingleNodeTypeValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BaseNodeMetaModel', name: 'BaseNodeMetaModel'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer.lexicalpreservation', name: 'lexicalpreservation'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer.lexicalpreservation.changes', name: 'changes'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange', name: 'ListRemovalChange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementMatchers', name: 'TextElementMatchers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavadocParser', name: 'JavadocParser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.chunks.ModifierValidator', name: 'ModifierValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.IntersectionTypeMetaModel', name: 'IntersectionTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.TypeMetaModel', name: 'TypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementMatcher', name: 'TextElementMatcher'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.SymbolResolver', name: 'SymbolResolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.StringLiteralExprMetaModel', name: 'StringLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel', name: 'LiteralStringValueExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java6Validator', name: 'Java6Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java5Validator', name: 'Java5Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.Printable', name: 'Printable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.DataKey', name: 'DataKey'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments', name: 'NodeWithTypeArguments'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.ProblemReporter', name: 'ProblemReporter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier', name: 'NodeWithStaticModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SimpleName', name: 'SimpleName'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.AssociableToAST', name: 'AssociableToAST'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration', name: 'ResolvedReferenceTypeDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration', name: 'ResolvedTypeDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModifierMetaModel', name: 'ModifierMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter', name: 'LexicalPreservingPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer', name: 'Observer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.observer.PropagatingAstObserver', name: 'PropagatingAstObserver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.VarTypeMetaModel', name: 'VarTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedClassDeclaration', name: 'ResolvedClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ArrayTypeMetaModel', name: 'ArrayTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ReferenceTypeMetaModel', name: 'ReferenceTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SuperExprMetaModel', name: 'SuperExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.AssertStmtMetaModel', name: 'AssertStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ClassOrInterfaceTypeMetaModel', name: 'ClassOrInterfaceTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.ChildTextElement', name: 'ChildTextElement'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElement', name: 'TextElement'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithJavadoc', name: 'NodeWithJavadoc'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariables', name: 'NodeWithVariables'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariables.Helper', name: 'Helper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.EnumDeclarationMetaModel', name: 'EnumDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_4Validator', name: 'Java1_4Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.NameMetaModel', name: 'NameMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.YamlPrinter', name: 'YamlPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange', name: 'ListAdditionChange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.NodeList', name: 'NodeList'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ArrayInitializerExprMetaModel', name: 'ArrayInitializerExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TokenTextElement', name: 'TokenTextElement'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedTypeVariable', name: 'ResolvedTypeVariable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.EnclosedExprMetaModel', name: 'EnclosedExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParseProblemException', name: 'ParseProblemException'});
MERGE (p:PACKAGE {id: 'java', name: 'java'});
MERGE (p:PACKAGE {id: 'java.lang', name: 'lang'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.RuntimeException', name: 'RuntimeException'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElement', name: 'DifferenceElement'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.utils', name: 'utils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.ProjectRoot', name: 'ProjectRoot'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ForStmtMetaModel', name: 'ForStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.PositionUtils', name: 'PositionUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.changes.Change', name: 'Change'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LambdaExprMetaModel', name: 'LambdaExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java7Validator', name: 'Java7Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute', name: 'CsmAttribute'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel', name: 'ExplicitConstructorInvocationStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SwitchExpr', name: 'SwitchExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.TypeParameterMetaModel', name: 'TypeParameterMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.UnionType', name: 'UnionType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator', name: 'UnderscoreKeywordValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.HashCodeVisitor', name: 'HashCodeVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.AnnotationDeclarationMetaModel', name: 'AnnotationDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParseStart', name: 'ParseStart'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Providers', name: 'Providers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Providers.PreProcessor', name: 'PreProcessor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithBody', name: 'NodeWithBody'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java8Validator', name: 'Java8Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.observer.AstObserverAdapter', name: 'AstObserverAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmConditional', name: 'CsmConditional'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.Resolvable', name: 'Resolvable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding', name: 'CsmOrphanCommentsEnding'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.FieldAccessExprMetaModel', name: 'FieldAccessExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleRequiresDirective', name: 'ModuleRequiresDirective'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.TokenTypes', name: 'TokenTypes'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SwitchStmtMetaModel', name: 'SwitchStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedType', name: 'ResolvedType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ExpressionStmtMetaModel', name: 'ExpressionStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.DoStmtMetaModel', name: 'DoStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceRoot', name: 'SourceRoot'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceRoot.Callback', name: 'Callback'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceRoot.ParallelParse', name: 'ParallelParse'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceRoot.ParallelParse.VisitFileCallback', name: 'VisitFileCallback'});
MERGE (p:PACKAGE {id: 'java.util', name: 'util'});
MERGE (p:PACKAGE {id: 'java.util.concurrent', name: 'concurrent'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.RecursiveAction', name: 'RecursiveAction'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration', name: 'ResolvedEnumDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.ConcreteSyntaxModel', name: 'ConcreteSyntaxModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Problem', name: 'Problem'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BinaryExprMetaModel', name: 'BinaryExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Range', name: 'Range'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Modifier', name: 'Modifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.PackageDeclarationMetaModel', name: 'PackageDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ThisExprMetaModel', name: 'ThisExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.SimpleValidator', name: 'SimpleValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LabeledStmtMetaModel', name: 'LabeledStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.Kept', name: 'Kept'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmToken', name: 'CsmToken'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmToken.TokenContentCalculator', name: 'TokenContentCalculator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ImportDeclarationMetaModel', name: 'ImportDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleProvidesDirectiveMetaModel', name: 'ModuleProvidesDirectiveMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.MethodAmbiguityException', name: 'MethodAmbiguityException'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.VarType', name: 'VarType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.TryStmtMetaModel', name: 'TryStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.UnaryExprMetaModel', name: 'UnaryExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.ClassUtils', name: 'ClassUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LongLiteralExprMetaModel', name: 'LongLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmChar', name: 'CsmChar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElementCalculator', name: 'DifferenceElementCalculator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalLabel', name: 'NodeWithOptionalLabel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithName', name: 'NodeWithName'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.JavaParserMetaModel', name: 'JavaParserMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ReturnStmtMetaModel', name: 'ReturnStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SeparatedItemStringBuilder', name: 'SeparatedItemStringBuilder'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedLambdaConstraintType', name: 'ResolvedLambdaConstraintType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ConstructorDeclarationMetaModel', name: 'ConstructorDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.CallableDeclarationMetaModel', name: 'CallableDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel', name: 'SingleMemberAnnotationExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.AnnotationExprMetaModel', name: 'AnnotationExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.MethodUsage', name: 'MethodUsage'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.XmlPrinter', name: 'XmlPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.TypeParameter', name: 'TypeParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ConditionalExprMetaModel', name: 'ConditionalExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.PrettyPrinterConfiguration', name: 'PrettyPrinterConfiguration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_2Validator', name: 'Java1_2Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_1Validator', name: 'Java1_1Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ArrayCreationLevelMetaModel', name: 'ArrayCreationLevelMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.TypeExprMetaModel', name: 'TypeExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.CatchClauseMetaModel', name: 'CatchClauseMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.CallableDeclaration', name: 'CallableDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.Javadoc', name: 'Javadoc'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.observer.AstObserver', name: 'AstObserver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.HasParentNode', name: 'HasParentNode'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.observer.Observable', name: 'Observable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters', name: 'NodeWithTypeParameters'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SwitchEntryMetaModel', name: 'SwitchEntryMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithDeclaration', name: 'NodeWithDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BreakStmtMetaModel', name: 'BreakStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.TreeVisitorValidator', name: 'TreeVisitorValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration', name: 'ResolvedTypeParameterDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.Bound', name: 'Bound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.UnsolvedSymbolException', name: 'UnsolvedSymbolException'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.ReservedKeywordValidator', name: 'ReservedKeywordValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.EnumConstantDeclarationMetaModel', name: 'EnumConstantDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.MethodReferenceExprMetaModel', name: 'MethodReferenceExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier', name: 'NodeWithStrictfpModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithAnnotations', name: 'NodeWithAnnotations'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr', name: 'LiteralStringValueExpr'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange', name: 'PropertyChange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange', name: 'ListReplacementChange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.VariableDeclarationExprMetaModel', name: 'VariableDeclarationExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.TypedValidator', name: 'TypedValidator'});
MERGE (p:PACKAGE {id: 'java.util.function', name: 'function'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.function.BiConsumer', name: 'BiConsumer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.EmptyStmtMetaModel', name: 'EmptyStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration', name: 'ResolvedConstructorDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator', name: 'LexicalDifferenceCalculator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator.CalculatedSyntaxModel', name: 'CalculatedSyntaxModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator.CsmChild', name: 'CsmChild'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorMap', name: 'VisitorMap'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorMap.EqualsHashcodeOverridingFacade', name: 'EqualsHashcodeOverridingFacade'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SimpleNameMetaModel', name: 'SimpleNameMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration', name: 'ResolvedEnumConstantDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithCondition', name: 'NodeWithCondition'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmMix', name: 'CsmMix'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ArrayCreationExprMetaModel', name: 'ArrayCreationExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.GenericListVisitorAdapter', name: 'GenericListVisitorAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor', name: 'NoCommentHashCodeVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmString', name: 'CsmString'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor', name: 'ObjectIdentityEqualsVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.ArrayType', name: 'ArrayType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.ArrayType.ArrayBracketPair', name: 'ArrayBracketPair'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_0Validator', name: 'Java1_0Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.NormalAnnotationExprMetaModel', name: 'NormalAnnotationExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.Removed', name: 'Removed'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ObjectCreationExprMetaModel', name: 'ObjectCreationExprMetaModel'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.version', name: 'version'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.version.PostProcessors', name: 'PostProcessors'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.CollectionStrategy', name: 'CollectionStrategy'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.CallableDeclaration.Signature', name: 'Signature'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.chunks.VarValidator', name: 'VarValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SynchronizedStmtMetaModel', name: 'SynchronizedStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.VoidVisitorWithDefaults', name: 'VoidVisitorWithDefaults'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.InitializerDeclarationMetaModel', name: 'InitializerDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Validator', name: 'Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.IfStmtMetaModel', name: 'IfStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.VariableDeclaratorMetaModel', name: 'VariableDeclaratorMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.IntegerLiteralExprMetaModel', name: 'IntegerLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.NullLiteralExprMetaModel', name: 'NullLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavaToken', name: 'JavaToken'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithScope', name: 'NodeWithScope'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.StringEscapeUtils', name: 'StringEscapeUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.StringEscapeUtils.CharSequenceTranslator', name: 'CharSequenceTranslator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.StringEscapeUtils.LookupTranslator', name: 'LookupTranslator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.StringEscapeUtils.AggregateTranslator', name: 'AggregateTranslator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.StringEscapeUtils.OctalUnescaper', name: 'OctalUnescaper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.StringEscapeUtils.UnicodeUnescaper', name: 'UnicodeUnescaper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.ModifierVisitor', name: 'ModifierVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.version.Java12PostProcessor', name: 'Java12PostProcessor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.version.Java11PostProcessor', name: 'Java11PostProcessor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleRequiresDirectiveMetaModel', name: 'ModuleRequiresDirectiveMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ClassExprMetaModel', name: 'ClassExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationMemberDeclaration', name: 'ResolvedAnnotationMemberDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.NodeText', name: 'NodeText'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.MethodCallExprMetaModel', name: 'MethodCallExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.SwitchEntry', name: 'SwitchEntry'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.RemovedGroup', name: 'RemovedGroup'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.InstanceOfExprMetaModel', name: 'InstanceOfExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.UnionTypeMetaModel', name: 'UnionTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Node.BreadthFirstIterator', name: 'BreadthFirstIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Node.DirectChildrenIterator', name: 'DirectChildrenIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Node.ParentsVisitor', name: 'ParentsVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Node.PreOrderIterator', name: 'PreOrderIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.Node.PostOrderIterator', name: 'PostOrderIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.PhantomNodeLogic', name: 'PhantomNodeLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.DotPrinter', name: 'DotPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedUnionType', name: 'ResolvedUnionType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.UnparsableStmtMetaModel', name: 'UnparsableStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.SwitchExprMetaModel', name: 'SwitchExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.CommentMetaModel', name: 'CommentMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalBlockStmt', name: 'NodeWithOptionalBlockStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.VoidTypeMetaModel', name: 'VoidTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator', name: 'WrappingRangeIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.ParserCollectionStrategy', name: 'ParserCollectionStrategy'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleUsesDirectiveMetaModel', name: 'ModuleUsesDirectiveMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithExtends', name: 'NodeWithExtends'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.NoCommentEqualsVisitor', name: 'NoCommentEqualsVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithImplements', name: 'NodeWithImplements'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.TreeVisitor', name: 'TreeVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationDeclaration', name: 'ResolvedAnnotationDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParseResult', name: 'ParseResult'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParseResult.PostProcessor', name: 'PostProcessor'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.resolution.types.parametrization', name: 'parametrization'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParameterValueProvider', name: 'ResolvedTypeParameterValueProvider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.PropertyMetaModel', name: 'PropertyMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorList', name: 'VisitorList'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorList.EqualsHashcodeOverridingFacade', name: 'EqualsHashcodeOverridingFacade'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions', name: 'NodeWithThrownExceptions'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.AssignExprMetaModel', name: 'AssignExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleOpensDirective', name: 'ModuleOpensDirective'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.TokenRange', name: 'TokenRange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference', name: 'CsmSingleReference'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithExpression', name: 'NodeWithExpression'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java12Validator', name: 'Java12Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java11Validator', name: 'Java11Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.UnicodeEscapeProcessingProvider', name: 'UnicodeEscapeProcessingProvider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.SourcePrinter', name: 'SourcePrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LocalClassDeclarationStmtMetaModel', name: 'LocalClassDeclarationStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange', name: 'NodeWithRange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.ReceiverParameter', name: 'ReceiverParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_3Validator', name: 'Java1_3Validator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleDeclarationMetaModel', name: 'ModuleDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.Name', name: 'Name'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithTokenRange', name: 'NodeWithTokenRange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithStatements', name: 'NodeWithStatements'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator', name: 'NoUnderscoresInIntegerLiteralsValidator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedTypeTransformer', name: 'ResolvedTypeTransformer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.version.Java10PostProcessor', name: 'Java10PostProcessor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ModuleOpensDirectiveMetaModel', name: 'ModuleOpensDirectiveMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.UnknownTypeMetaModel', name: 'UnknownTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedArrayType', name: 'ResolvedArrayType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent', name: 'CsmUnindent'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmComment', name: 'CsmComment'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.ArrayCreationLevel', name: 'ArrayCreationLevel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametrized', name: 'ResolvedTypeParametrized'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmSequence', name: 'CsmSequence'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ThrowStmtMetaModel', name: 'ThrowStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.CompilationUnitMetaModel', name: 'CompilationUnitMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.Utils', name: 'Utils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ForEachStmt', name: 'ForEachStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.JavadocCommentMetaModel', name: 'JavadocCommentMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.PrimitiveTypeMetaModel', name: 'PrimitiveTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory', name: 'TextElementIteratorsFactory'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.CascadingIterator', name: 'CascadingIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.CascadingIterator.Provider', name: 'Provider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.EmptyIterator', name: 'EmptyIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.SingleElementIterator', name: 'SingleElementIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.ComposedIterator', name: 'ComposedIterator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.StaticJavaParser', name: 'StaticJavaParser'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javadoc.description', name: 'description'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.description.JavadocDescription', name: 'JavadocDescription'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.DoubleLiteralExprMetaModel', name: 'DoubleLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.WhileStmtMetaModel', name: 'WhileStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithIdentifier', name: 'NodeWithIdentifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap', name: 'ResolvedTypeParametersMap'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.Builder', name: 'Builder'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration', name: 'ResolvedParameterDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.Log', name: 'Log'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.Log.StandardOutStandardErrorAdapter', name: 'StandardOutStandardErrorAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.Log.SilentAdapter', name: 'SilentAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.Log.Adapter', name: 'Adapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.changes.NoChange', name: 'NoChange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BlockCommentMetaModel', name: 'BlockCommentMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedReferenceType', name: 'ResolvedReferenceType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.PrintingHelper', name: 'PrintingHelper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.description.JavadocSnippet', name: 'JavadocSnippet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.NameExprMetaModel', name: 'NameExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceZip', name: 'SourceZip'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceZip.Callback', name: 'Callback'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor', name: 'ObjectIdentityHashCodeVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.CompilationUnit.Storage', name: 'Storage'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.Difference', name: 'Difference'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedIntersectionType', name: 'ResolvedIntersectionType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration', name: 'ResolvedInterfaceDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.IntersectionType', name: 'IntersectionType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.MethodDeclarationMetaModel', name: 'MethodDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ContinueStmtMetaModel', name: 'ContinueStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel', name: 'MarkerAnnotationExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier', name: 'NodeWithAbstractModifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.WildcardTypeMetaModel', name: 'WildcardTypeMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.CommentsInserter', name: 'CommentsInserter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.UnparsableStmt', name: 'UnparsableStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.modules.ModuleUsesDirective', name: 'ModuleUsesDirective'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.types.ResolvedVoidType', name: 'ResolvedVoidType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.description.JavadocDescriptionElement', name: 'JavadocDescriptionElement'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorSet', name: 'VisitorSet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorSet.EqualsHashcodeOverridingFacade', name: 'EqualsHashcodeOverridingFacade'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.LineCommentMetaModel', name: 'LineCommentMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.GenericVisitorWithDefaults', name: 'GenericVisitorWithDefaults'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.Added', name: 'Added'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.PrettyPrintVisitor', name: 'PrettyPrintVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.PrettyPrinter', name: 'PrettyPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt', name: 'NodeWithBlockStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithType', name: 'NodeWithType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration', name: 'ResolvedMethodDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.description.JavadocInlineTag', name: 'JavadocInlineTag'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmIndent', name: 'CsmIndent'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.Visitable', name: 'Visitable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.CodeGenerationUtils', name: 'CodeGenerationUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.Pair', name: 'Pair'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.LocalClassDeclarationStmt', name: 'LocalClassDeclarationStmt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ReceiverParameterMetaModel', name: 'ReceiverParameterMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.ForEachStmtMetaModel', name: 'ForEachStmtMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.CharLiteralExprMetaModel', name: 'CharLiteralExprMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.FieldDeclarationMetaModel', name: 'FieldDeclarationMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.Reshuffled', name: 'Reshuffled'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.serialization', name: 'serialization'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.serialization.JavaParserJsonDeserializerTest', name: 'JavaParserJsonDeserializerTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.serialization.JavaParserJsonSerializerTest', name: 'JavaParserJsonSerializerTest'});
MERGE (p:PACKAGE {id: 'japa', name: 'japa'});
MERGE (p:PACKAGE {id: 'japa.bdd', name: 'bdd'});
MERGE (p:PACKAGE {id: 'japa.bdd.samples', name: 'samples'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.JavaConcepts', name: 'JavaConcepts'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.JavaConcepts.Ugly', name: 'Ugly'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.JavaConcepts.X', name: 'X'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.JavaConcepts.Y', name: 'Y'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.JavaConcepts.QWE', name: 'QWE'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.JavaConcepts.A', name: 'A'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.Base', name: 'Base'});
MERGE (p:CLASS_OR_INTERFACE {id: 'japa.bdd.samples.XXX', name: 'XXX'});
MERGE (p:PACKAGE {id: 'java.io', name: 'io'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.Serializable', name: 'Serializable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Cloneable', name: 'Cloneable'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators', name: 'declarators'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.NoSymbolDeclarator', name: 'NoSymbolDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.AbstractSymbolDeclarator', name: 'AbstractSymbolDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.FieldSymbolDeclarator', name: 'FieldSymbolDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeSameAsType', name: 'TypeSameAsType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula', name: 'ConstraintFormula'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumConstantDeclaration', name: 'JavassistEnumConstantDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.TypeInference', name: 'TypeInference'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.LazyType', name: 'LazyType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionTypeParameter', name: 'ReflectionTypeParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ForStatementContext', name: 'ForStatementContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext', name: 'AbstractJavaParserContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.MethodReferenceThrowsCompatibleWithType', name: 'MethodReferenceThrowsCompatibleWithType'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators', name: 'comparators'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator', name: 'MethodComparator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodContext', name: 'MethodContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractMethodLikeDeclarationContext', name: 'AbstractMethodLikeDeclarationContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.FalseBound', name: 'FalseBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound', name: 'Bound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SameAsBound', name: 'SameAsBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionAnnotationMemberDeclaration', name: 'ReflectionAnnotationMemberDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnnotationMemberDeclaration', name: 'JavaParserAnnotationMemberDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver', name: 'CombinedTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver.ExceptionHandlers', name: 'ExceptionHandlers'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.SwitchEntryContext', name: 'SwitchEntryContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeParameter', name: 'JavaParserTypeParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration', name: 'AbstractTypeDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter', name: 'DefaultVisitorAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.VariableDeclaratorContext', name: 'VariableDeclaratorContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration', name: 'JavassistEnumDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic', name: 'ReflectionMethodResolutionLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ClassLoaderTypeSolver', name: 'ClassLoaderTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistAnnotationMemberDeclaration', name: 'JavassistAnnotationMemberDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator', name: 'ClassComparator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration', name: 'JavaParserSymbolDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ProperLowerBound', name: 'ProperLowerBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver', name: 'JarTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.ClasspathElement', name: 'ClasspathElement'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.javaparser', name: 'javaparser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory', name: 'JavassistFactory'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolver', name: 'SymbolSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparser.Navigator', name: 'Navigator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.LambdaExprContext', name: 'LambdaExprContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.LambdaThrowsCompatibleWithType', name: 'LambdaThrowsCompatibleWithType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.InferenceVariable', name: 'InferenceVariable'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.SourceFileInfoExtractor', name: 'SourceFileInfoExtractor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclaration', name: 'ReflectionEnumDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.JavaParserTypeDeclarationAdapter', name: 'JavaParserTypeDeclarationAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic', name: 'MethodResolutionLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter', name: 'JavassistTypeDeclarationAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.AstResolutionUtils', name: 'AstResolutionUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.SymbolDeclarator', name: 'SymbolDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory', name: 'ReflectionFactory'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumConstantDeclaration', name: 'JavaParserEnumConstantDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder', name: 'LambdaArgumentTypePlaceholder'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.CapturesBound', name: 'CapturesBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext', name: 'ClassOrInterfaceDeclarationContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration', name: 'ReflectionInterfaceDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionParameterDeclaration', name: 'ReflectionParameterDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistConstructorDeclaration', name: 'JavassistConstructorDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnnotationDeclaration', name: 'JavaParserAnnotationDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration', name: 'JavaParserEnumDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration.ValuesMethod', name: 'ValuesMethod'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.VariableSymbolDeclarator', name: 'VariableSymbolDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.CompilationUnitContext', name: 'CompilationUnitContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeCompatibleWithType', name: 'TypeCompatibleWithType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration', name: 'JavaParserVariableDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver', name: 'ReflectionTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclaration', name: 'JavassistMethodDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Instantiation', name: 'Instantiation'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionConstructorDeclaration', name: 'ReflectionConstructorDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeSubtypeOfType', name: 'TypeSubtypeOfType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula.ReductionResult', name: 'ReductionResult'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.MemoryTypeSolver', name: 'MemoryTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration', name: 'JavassistClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade', name: 'JavaParserFacade'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeContainedByType', name: 'TypeContainedByType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.JavaSymbolSolver', name: 'JavaSymbolSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.JavaSymbolSolver.ArrayLengthValueDeclaration', name: 'ArrayLengthValueDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.ParameterSymbolDeclarator', name: 'ParameterSymbolDeclarator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration', name: 'ReflectionFieldDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver', name: 'JavaParserTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AnonymousClassDeclarationContext', name: 'AnonymousClassDeclarationContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ControlFlowLogic', name: 'ControlFlowLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserMethodDeclaration', name: 'JavaParserMethodDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration', name: 'ReflectionClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.FieldAccessContext', name: 'FieldAccessContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeParameter', name: 'JavassistTypeParameter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.BlockStmtContext', name: 'BlockStmtContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ProperUpperBound', name: 'ProperUpperBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.ExpressionCompatibleWithType', name: 'ExpressionCompatibleWithType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.InstantiationSet', name: 'InstantiationSet'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.core', name: 'core'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.core.resolution', name: 'resolution'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.core.resolution.TypeVariableResolutionCapability', name: 'TypeVariableResolutionCapability'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistAnnotationDeclaration', name: 'JavassistAnnotationDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserFieldDeclaration', name: 'JavaParserFieldDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeVariableDeclaration', name: 'JavaParserTypeVariableDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet', name: 'BoundSet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet.Processor', name: 'Processor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet.VariableDependency', name: 'VariableDependency'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic', name: 'ConstructorResolutionLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionAnnotationDeclaration', name: 'ReflectionAnnotationDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.DefaultConstructorDeclaration', name: 'DefaultConstructorDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeAdapter', name: 'JavaParserTypeAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration', name: 'JavaParserClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext', name: 'MethodCallExprContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators.ParameterComparator', name: 'ParameterComparator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclaration', name: 'JavaParserAnonymousClassDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl', name: 'ReferenceTypeImpl'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider', name: 'MyObjectProvider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.AarTypeSolver', name: 'AarTypeSolver'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Substitution', name: 'Substitution'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormulaSet', name: 'ConstraintFormulaSet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ObjectCreationContext', name: 'ObjectCreationContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistParameterDeclaration', name: 'JavassistParameterDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.TypeHelper', name: 'TypeHelper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter', name: 'ReflectionClassAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SubtypeOfBound', name: 'SubtypeOfBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.EnumDeclarationContext', name: 'EnumDeclarationContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.CatchClauseContext', name: 'CatchClauseContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.StatementContext', name: 'StatementContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistUtils', name: 'JavassistUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.TryWithResourceContext', name: 'TryWithResourceContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ConstructorContext', name: 'ConstructorContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.InferenceVariableSubstitution', name: 'InferenceVariableSubstitution'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumConstantDeclaration', name: 'ReflectionEnumConstantDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.MethodType', name: 'MethodType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistFieldDeclaration', name: 'JavassistFieldDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.core.resolution.Context', name: 'Context'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogic', name: 'NameLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogic.PredicateOnParentAndChild', name: 'PredicateOnParentAndChild'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy', name: 'SymbolSolverCollectionStrategy'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.TypeInferenceCache', name: 'TypeInferenceCache'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration', name: 'JavassistInterfaceDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration', name: 'ReflectionMethodDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserConstructorDeclaration', name: 'JavaParserConstructorDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper', name: 'ContextHelper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor', name: 'TypeExtractor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ExpressionHelper', name: 'ExpressionHelper'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.VariableDeclarationExprContext', name: 'VariableDeclarationExprContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ForEachStatementContext', name: 'ForEachStatementContext'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.declarations', name: 'declarations'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.symbolsolver.declarations.common', name: 'common'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.declarations.common.MethodDeclarationCommonLogic', name: 'MethodDeclarationCommonLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclaration', name: 'JavaParserInterfaceDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration', name: 'JavaParserParameterDeclaration'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.core.resolution.MethodUsageResolutionCapability', name: 'MethodUsageResolutionCapability'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.ThrowsBound', name: 'ThrowsBound'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory', name: 'JavaParserFactory'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParser', name: 'ASTParser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParser.Modifier', name: 'Modifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParser.GTToken', name: 'GTToken'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Token', name: 'Token'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParser.LookaheadSuccess', name: 'LookaheadSuccess'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Error', name: 'Error'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParser.JJCalls', name: 'JJCalls'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavaCharStream', name: 'JavaCharStream'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParserConstants', name: 'ASTParserConstants'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.TokenMgrError', name: 'TokenMgrError'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ASTParserTokenManager', name: 'ASTParserTokenManager'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParseException', name: 'ParseException'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Exception', name: 'Exception'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.C', name: 'C'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.A', name: 'A'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.B', name: 'B'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations', name: 'transformations'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast', name: 'ast'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body', name: 'body'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.OperatorTransformationsTest', name: 'OperatorTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest', name: 'AbstractLexicalPreservingTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.UnicodeEscapeProcessingProviderTest', name: 'UnicodeEscapeProcessingProviderTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.ArrayCreationLevelTransformationsTest', name: 'ArrayCreationLevelTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.HashCodeVisitorTest', name: 'HashCodeVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.AssignExprTest', name: 'AssignExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.CompilationUnitTest', name: 'CompilationUnitTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.BreakStmtTest', name: 'BreakStmtTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.JavadocTest', name: 'JavadocTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.builders', name: 'builders'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.NodeWithParametersBuildersTest', name: 'NodeWithParametersBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculatorTest', name: 'LexicalDifferenceCalculatorTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.bdd', name: 'bdd'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.VisitorTest', name: 'VisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.BasicJBehaveTest', name: 'BasicJBehaveTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceZipTest', name: 'SourceZipTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.TransformationsTest', name: 'TransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.ConcreteSyntaxModelAcceptanceTest', name: 'ConcreteSyntaxModelAcceptanceTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.modules', name: 'modules'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.modules.ModuleDeclarationTest', name: 'ModuleDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.RangeTest', name: 'RangeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LambdaExprTest', name: 'LambdaExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorSetTest', name: 'VisitorSetTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.StatementTransformationsTest', name: 'StatementTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavaTokenTest', name: 'JavaTokenTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.bdd.steps', name: 'steps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.CommentParsingSteps', name: 'CommentParsingSteps'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.remove', name: 'remove'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.remove.NodeRemovalTest', name: 'NodeRemovalTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java5ValidatorTest', name: 'Java5ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.BinaryExprTest', name: 'BinaryExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ProblemTest', name: 'ProblemTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.PropertyMetaModelTest', name: 'PropertyMetaModelTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.PositionRangeTest', name: 'PositionRangeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.FieldDeclarationTransformationsTest', name: 'FieldDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.AnnotationMemberDeclarationTransformationsTest', name: 'AnnotationMemberDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.TestParser', name: 'TestParser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.NodeWithThrownExceptionsBuildersTest', name: 'NodeWithThrownExceptionsBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElementCalculatorTest', name: 'DifferenceElementCalculatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.ConstructorDeclarationTransformationsTest', name: 'ConstructorDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorMapTest', name: 'VisitorMapTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.DataKeyTest', name: 'DataKeyTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ExistenceOfParentNodeVerifier', name: 'ExistenceOfParentNodeVerifier'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ExistenceOfParentNodeVerifier.Verifier', name: 'Verifier'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.wiki_samples', name: 'wiki_samples'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.TestFileToken', name: 'TestFileToken'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.ChangingMethodsFromAClassWithoutAVisitorTest', name: 'ChangingMethodsFromAClassWithoutAVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.CompilationUnitBuildersTest', name: 'CompilationUnitBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.CompilationUnitBuildersTest.testInnerClass', name: 'testInnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.ChangingMethodsFromAClassWithAVisitorTest', name: 'ChangingMethodsFromAClassWithAVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java12ValidatorTest', name: 'Java12ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.SwitchStmtTest', name: 'SwitchStmtTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.BlockStmtTest', name: 'BlockStmtTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.CommentParsingTest', name: 'CommentParsingTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.YamlPrinterTest', name: 'YamlPrinterTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java6ValidatorTest', name: 'Java6ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithJavadocTest', name: 'NodeWithJavadocTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclarationTest', name: 'ClassOrInterfaceDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.observer.PropagatingAstObserverTest', name: 'PropagatingAstObserverTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.LiteralStringValueExprTest', name: 'LiteralStringValueExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.ClassOrInterfaceDeclarationBuildersTest', name: 'ClassOrInterfaceDeclarationBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.MethodCallExprTest', name: 'MethodCallExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.XmlPrinterTest', name: 'XmlPrinterTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.version.Java10PostProcessorTest', name: 'Java10PostProcessorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.PrettyPrintVisitorTest', name: 'PrettyPrintVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.TestMetaModel', name: 'TestMetaModel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.metamodel.BaseNodeMetaModelTest', name: 'BaseNodeMetaModelTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.ClassCreator', name: 'ClassCreator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.CuPrinter', name: 'CuPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ParsingSteps', name: 'ParsingSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariablesTest', name: 'NodeWithVariablesTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.ClassOrInterfaceDeclarationTransformationsTest', name: 'ClassOrInterfaceDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.FieldDeclarationBuildersTest', name: 'FieldDeclarationBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.EnumConstantDeclarationTransformationsTest', name: 'EnumConstantDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.MethodReferenceExprTest', name: 'MethodReferenceExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SwitchExprTest', name: 'SwitchExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.ParsingTest', name: 'ParsingTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java8ValidatorTest', name: 'Java8ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.ParserCollectionStrategyTest', name: 'ParserCollectionStrategyTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.wiki_samples.removenode', name: 'removenode'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.removenode.ModifierVisitorTest', name: 'ModifierVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.removenode.MyVisitor', name: 'MyVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java10ValidatorTest', name: 'Java10ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.SourceRootTest', name: 'SourceRootTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.ThisExprTest', name: 'ThisExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.PositionRangeSteps', name: 'PositionRangeSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.IfElseStmtTest', name: 'IfElseStmtTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_0ValidatorTest', name: 'Java1_0ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.StringLiteralExprTest', name: 'StringLiteralExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.MethodPrinter', name: 'MethodPrinter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.MethodPrinter.MethodVisitor', name: 'MethodVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.AnnotationMemberDeclarationTest', name: 'AnnotationMemberDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.MethodChanger_1', name: 'MethodChanger_1'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.MethodChanger_1.MethodChangerVisitor', name: 'MethodChangerVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.PrettyPrintingSteps', name: 'PrettyPrintingSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_4ValidatorTest', name: 'Java1_4ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.NoCommentEqualsVisitorTest', name: 'NoCommentEqualsVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParseErrorRecoveryTest', name: 'ParseErrorRecoveryTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ManipulationSteps', name: 'ManipulationSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ManipulationSteps.ChangeMethodNameToUpperCaseVisitor', name: 'ChangeMethodNameToUpperCaseVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ManipulationSteps.AddNewIntParameterCalledValueVisitor', name: 'AddNewIntParameterCalledValueVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.VisitorListTest', name: 'VisitorListTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.TestUtils', name: 'TestUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ProvidersTest', name: 'ProvidersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.MethodDeclarationTransformationsTest', name: 'MethodDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.VisitingClassMethodsTest', name: 'VisitingClassMethodsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.NodePositionTest', name: 'NodePositionTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.MethodChanger_2', name: 'MethodChanger_2'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest', name: 'LexicalPreservingPrinterTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest.AddFooCallModifierVisitor', name: 'AddFooCallModifierVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest.CallModifierVisitor', name: 'CallModifierVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.AnnotationDeclarationTransformationsTest', name: 'AnnotationDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.CharLiteralExprTest', name: 'CharLiteralExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.ComparingSteps', name: 'ComparingSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavaParserTest', name: 'JavaParserTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java9ValidatorTest', name: 'Java9ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.ParseResultTest', name: 'ParseResultTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.VisitorSteps', name: 'VisitorSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalScopeTest', name: 'NodeWithOptionalScopeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiersTest', name: 'NodeWithModifiersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.removenode.RemoveDeleteNodeFromAst', name: 'RemoveDeleteNodeFromAst'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_2ValidatorTest', name: 'Java1_2ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.EnumDeclarationBuildersTest', name: 'EnumDeclarationBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.steps.SharedSteps', name: 'SharedSteps'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.ComparingTest', name: 'ComparingTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.PrintingTheCompilationUnitToSystemOutputTest', name: 'PrintingTheCompilationUnitToSystemOutputTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.NodeListTest', name: 'NodeListTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.CloneVisitorTest', name: 'CloneVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_3ValidatorTest', name: 'Java1_3ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.TreeVisitorTest', name: 'TreeVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParserTokenManagerTest', name: 'GeneratedJavaParserTokenManagerTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.nodeTypes.NodeWithTraversableScopeTest', name: 'NodeWithTraversableScopeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.ArrayTypeTest', name: 'ArrayTypeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.JavadocParserTest', name: 'JavadocParserTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.comments.CommentTest', name: 'CommentTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.NodeWithMembersBuildersTest', name: 'NodeWithMembersBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.UtilsTest', name: 'UtilsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.removenode.D', name: 'D'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SimpleNameTest', name: 'SimpleNameTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.EnumDeclarationTransformationsTest', name: 'EnumDeclarationTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.TokenRangeTest', name: 'TokenRangeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.CreatingACompilationUnitFromScratch', name: 'CreatingACompilationUnitFromScratch'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java1_1ValidatorTest', name: 'Java1_1ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.description.JavadocInlineTagTest', name: 'JavadocInlineTagTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ParserConfigurationTest', name: 'ParserConfigurationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java7ValidatorTest', name: 'Java7ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.ForEachStmtTest', name: 'ForEachStmtTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.PrettyPrintingTest', name: 'PrettyPrintingTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.FieldDeclarationTest', name: 'FieldDeclarationTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.bdd.visitors', name: 'visitors'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.visitors.PositionTestVisitor', name: 'PositionTestVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.PairTest', name: 'PairTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.stmt.TryStmtTest', name: 'TryStmtTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.bdd.ManipulationTest', name: 'ManipulationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.NodeTest', name: 'NodeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.ReplaceNodeTest', name: 'ReplaceNodeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.LogTest', name: 'LogTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.LogTest.TestAdapter', name: 'TestAdapter'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.NameTest', name: 'NameTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.TestUtils', name: 'TestUtils'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.CompilationUnitTransformationsTest', name: 'CompilationUnitTransformationsTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.InstanceOfExprTest', name: 'InstanceOfExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.validator.Java11ValidatorTest', name: 'Java11ValidatorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.TestVisitor', name: 'TestVisitor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.ModifierVisitorTest', name: 'ModifierVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.FindNodeTest', name: 'FindNodeTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.MethodDeclarationTest', name: 'MethodDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.utils.CodeGenerationUtilsTest', name: 'CodeGenerationUtilsTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.ast.imports', name: 'imports'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.imports.ImportDeclarationTest', name: 'ImportDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.DotPrinterTest', name: 'DotPrinterTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.CommentsInserterTest', name: 'CommentsInserterTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.ConcreteSyntaxModelTest', name: 'ConcreteSyntaxModelTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.SuperExprTest', name: 'SuperExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.type.TypeTest', name: 'TypeTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.manual', name: 'manual'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.manual.BulkParseTest', name: 'BulkParseTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.PrettyPrinterTest', name: 'PrettyPrinterTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.builders.NodeWithAnnotationsBuildersTest', name: 'NodeWithAnnotationsBuildersTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.expr.DoubleLiteralExprTest', name: 'DoubleLiteralExprTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.visitor.NoCommentHashCodeVisitorTest', name: 'NoCommentHashCodeVisitorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javadoc.JavadocExtractorTest', name: 'JavadocExtractorTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.ast.body.ConstructorDeclarationTest', name: 'ConstructorDeclarationTest'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.InitializerDeclarationTransformationsTest', name: 'InitializerDeclarationTransformationsTest'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.generator.metamodel', name: 'metamodel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.metamodel.InitializeConstructorParametersStatementsGenerator', name: 'InitializeConstructorParametersStatementsGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.metamodel.NodeMetaModelGenerator', name: 'NodeMetaModelGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.metamodel.MetaModelGenerator', name: 'MetaModelGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.metamodel.InitializePropertyMetaModelsStatementsGenerator', name: 'InitializePropertyMetaModelsStatementsGenerator'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.generator.metamodel.AstTypeAnalysis', name: 'AstTypeAnalysis'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic', name: 'FunctionalInterfaceLogic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.MethodResolutionCapability', name: 'MethodResolutionCapability'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.ObjectProvider', name: 'ObjectProvider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException', name: 'ConfilictingGenericTypesException'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.InferenceVariableType', name: 'InferenceVariableType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.symbolsolver.logic.InferenceContext', name: 'InferenceContext'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParser', name: 'GeneratedJavaParser'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParser.LookaheadSuccess', name: 'LookaheadSuccess'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParser.JJCalls', name: 'JJCalls'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParserBase', name: 'GeneratedJavaParserBase'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.StringProvider', name: 'StringProvider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.Provider', name: 'Provider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParserConstants', name: 'GeneratedJavaParserConstants'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.SimpleCharStream', name: 'SimpleCharStream'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.TokenBase', name: 'TokenBase'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.GeneratedJavaParserTokenManager', name: 'GeneratedJavaParserTokenManager'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.StreamProvider', name: 'StreamProvider'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.TokenMgrException', name: 'TokenMgrException'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.serialization.JavaParserJsonDeserializer', name: 'JavaParserJsonDeserializer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.serialization.JavaParserJsonSerializer', name: 'JavaParserJsonSerializer'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.storage', name: 'storage'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.wiki_samples.TestFile', name: 'TestFile'});
MERGE (p:PACKAGE {id: 'com.company', name: 'company'});
MERGE (p:PACKAGE {id: 'com.company.stuff', name: 'stuff'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.storage.PrimaryType', name: 'PrimaryType'});
MERGE (p:CLASS_OR_INTERFACE {id: '.A', name: 'A'});
MERGE (p:PACKAGE {id: 'com.blablabla', name: 'blablabla'});
MERGE (p:PACKAGE {id: 'com.blablabla.root', name: 'root'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javasymbolsolver', name: 'javasymbolsolver'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols', name: 'javassist_symbols'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar', name: 'main_jar'});
MERGE (p:PACKAGE {id: 'package_c', name: 'package_c'});
MERGE (p:CLASS_OR_INTERFACE {id: 'package_c.c', name: 'c'});
MERGE (p:CLASS_OR_INTERFACE {id: '.c', name: 'c'});
MERGE (p:CLASS_OR_INTERFACE {id: '.PackageDotExpressions', name: 'PackageDotExpressions'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.bar.AnInterface', name: 'AnInterface'});
MERGE (p:CLASS_OR_INTERFACE {id: '.b', name: 'b'});
MERGE (p:PACKAGE {id: 'com.foo', name: 'foo'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.foo.Widget', name: 'Widget'});
MERGE (p:CLASS_OR_INTERFACE {id: 'foo.JavaTest', name: 'JavaTest'});
MERGE (p:PACKAGE {id: 'com.foo.base', name: 'base'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.foo.base.Widget', name: 'Widget'});
MERGE (p:CLASS_OR_INTERFACE {id: '.FieldDotExpressions', name: 'FieldDotExpressions'});
MERGE (p:CLASS_OR_INTERFACE {id: '.FieldContainer', name: 'FieldContainer'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassFieldContainer', name: 'InnerClassFieldContainer'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassFieldContainer.InnerClass', name: 'InnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassFieldContainer.InnerClass.InnerInnerClass', name: 'InnerInnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassFieldContainer.InnerClass.InnerInnerClass.InnerInnerInnerClass', name: 'InnerInnerInnerClass'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar', name: 'excluded_jar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar.SuperClassExcludedJar', name: 'SuperClassExcludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: '.B', name: 'B'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceUserIncludedJar', name: 'InterfaceUserIncludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassIncludedJar', name: 'SubClassIncludedJar'});
MERGE (p:PACKAGE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar', name: 'included_jar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar.SuperClassIncludedJar', name: 'SuperClassIncludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceIncludedJar', name: 'SubInterfaceIncludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar.InterfaceIncludedJar', name: 'InterfaceIncludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: '.Complex', name: 'Complex'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceUserExcludedJar', name: 'InterfaceUserExcludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.StandaloneInterface', name: 'StandaloneInterface'});
MERGE (p:PACKAGE {id: 'issue241', name: 'issue241'});
MERGE (p:CLASS_OR_INTERFACE {id: 'issue241.TypeWithMemberType', name: 'TypeWithMemberType'});
MERGE (p:CLASS_OR_INTERFACE {id: 'issue241.TypeWithMemberType.MemberInterface', name: 'MemberInterface'});
MERGE (p:PACKAGE {id: 'com.packageName', name: 'packageName'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.packageName.ClassInPackage', name: 'ClassInPackage'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceUserOwnJar', name: 'InterfaceUserOwnJar'});
MERGE (p:PACKAGE {id: 'package_b', name: 'package_b'});
MERGE (p:CLASS_OR_INTERFACE {id: 'package_b.b', name: 'b'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassOwnJar', name: 'SubClassOwnJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SuperClassOwnJar', name: 'SuperClassOwnJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar.InterfaceExcludedJar', name: 'InterfaceExcludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: '.Main', name: 'Main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceOwnJar', name: 'InterfaceOwnJar'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassContainer', name: 'InnerClassContainer'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassContainer.InnerClass', name: 'InnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassContainer.InnerClass.InnerInnerClass', name: 'InnerInnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassContainer.InnerClass.InnerInnerClass.InnerInnerInnerClass', name: 'InnerInnerInnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerClassDotExpressions', name: 'InnerClassDotExpressions'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.packageName.InnerStaticClassFieldContainer', name: 'InnerStaticClassFieldContainer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.packageName.InnerStaticClassFieldContainer.InnerClass', name: 'InnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.packageName.InnerStaticClassFieldContainer.InnerClass.InnerInnerClass', name: 'InnerInnerClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.C', name: 'C'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceOwnJar', name: 'SubInterfaceOwnJar'});
MERGE (p:CLASS_OR_INTERFACE {id: '.a', name: 'a'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.ConcreteClass', name: 'ConcreteClass'});
MERGE (p:CLASS_OR_INTERFACE {id: '.Issue300', name: 'Issue300'});
MERGE (p:CLASS_OR_INTERFACE {id: '.Issue300.A', name: 'A'});
MERGE (p:CLASS_OR_INTERFACE {id: '.Issue300.B', name: 'B'});
MERGE (p:PACKAGE {id: 'package_a', name: 'package_a'});
MERGE (p:CLASS_OR_INTERFACE {id: 'package_a.a', name: 'a'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceExcludedJar', name: 'SubInterfaceExcludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassExcludedJar', name: 'SubClassExcludedJar'});
MERGE (p:CLASS_OR_INTERFACE {id: '.HelloWorld', name: 'HelloWorld'});
MERGE (p:CLASS_OR_INTERFACE {id: '.InnerStaticClassFieldDotExpressions', name: 'InnerStaticClassFieldDotExpressions'});
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.github'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github'}),(target:PACKAGE { id: 'com.github.javaparser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.expr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.expr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.EnclosedExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.EnclosedExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.visitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.visitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.GenericVisitorAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.body'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.body'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ConstructorDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ConstructorDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.AnnotationDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.TypeDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.TypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.AnnotationDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.stmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.stmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.BreakStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.BreakStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.type'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.type'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.UnknownType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.UnknownType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.EqualsVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EmptyTypeDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.TypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EmptyTypeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.internal'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.internal'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.internal'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.internal.Utils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NormalAnnotationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AnnotationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AnnotationExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NormalAnnotationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.PrimitiveType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.PrimitiveType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavaParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.WhileStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.WhileStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LongLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LongLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.comments'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.comments'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.CommentsParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.InitializerDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.InitializerDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.QualifiedNameExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NameExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NameExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.QualifiedNameExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.TypeDeclarationStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.TypeDeclarationStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.DocumentableNode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.TypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.VariableDeclaratorId'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.VariableDeclaratorId'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.FieldAccessExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.FieldAccessExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MethodReferenceExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MethodReferenceExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.UnaryExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.UnaryExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.IntegerLiteralMinValueExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.IntegerLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.IntegerLiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.IntegerLiteralMinValueExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NullLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NullLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.VariableDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.VariableDeclarator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LambdaExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LambdaExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.InstanceOfExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.InstanceOfExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ArrayCreationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ArrayCreationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.NamedNode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ThisExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ThisExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.TypeParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.TypeParameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.MethodDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.MethodDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MemberValuePair'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MemberValuePair'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MarkerAnnotationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AnnotationExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MarkerAnnotationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ModifierVisitorAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.LabeledStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.LabeledStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.MultiTypeParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BaseParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BaseParameter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.MultiTypeParameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.TryStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.TryStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.VariableDeclarationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.VariableDeclarationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.CharLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.CharLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ArrayInitializerExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ArrayInitializerExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ContinueStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ContinueStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MethodCallExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MethodCallExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.SourcesHelper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.AnnotationMemberDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.AnnotationMemberDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.Parameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BaseParameter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.Parameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.LineComment'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.Comment'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.Comment'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.LineComment'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.DumpVisitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.DumpVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.BlockStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.BlockStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.AssertStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.AssertStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.TypeExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.TypeExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ThrowStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ThrowStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.ImportDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.ImportDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ExpressionStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ExpressionStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ConditionalExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ConditionalExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchEntryStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchEntryStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ReferenceType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ReferenceType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.CloneVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EnumConstantDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EnumConstantDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.JavadocComment'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.Comment'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.JavadocComment'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ModifierSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.IfStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.IfStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ReturnStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ReturnStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.VoidType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.VoidType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.CompilationUnit'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.CompilationUnit'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.DoStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.DoStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BaseParameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AssignExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AssignExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.GenericVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.CastExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.CastExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ClassExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ClassExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.EmptyStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.EmptyStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NameExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.PackageDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.PackageDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SynchronizedStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SynchronizedStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ObjectCreationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ObjectCreationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.BooleanLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.BooleanLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.CatchClause'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.CatchClause'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SuperExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SuperExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTHelper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LongLiteralMinValueExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LongLiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LongLiteralMinValueExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ArrayAccessExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ArrayAccessExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EmptyMemberDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EmptyMemberDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SingleMemberAnnotationExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AnnotationExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SingleMemberAnnotationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.Comment'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.WithDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.TypeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.WildcardType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.WildcardType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AnnotationExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Position'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.IntegerLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.CommentsCollection'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.AnnotableNode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForeachStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForeachStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.DoubleLiteralExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.DoubleLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.BinaryExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.BinaryExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.PositionUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EnumDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.TypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.EnumDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.FieldDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.FieldDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.BlockComment'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.Comment'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.BlockComment'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.TreeVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.model'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.resolution.SymbolReference'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.resolution.TypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.NullType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.resolution.Value'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue300'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue300'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.FieldAccessContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.FieldAccessContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue200'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue200'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue18'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue18'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue314'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue314'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue228'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue228'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SameAsBoundTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolverTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.resolution.types'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.resolution.types'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedPrimitiveTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedPrimitiveTypeTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue276'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue276'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue128'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue128'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodLikeSignaturesTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodLikeSignaturesTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistParameterDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistParameterDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaSymbolSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaSymbolSolverTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.utils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.utils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.utils.LeanParserConfiguration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParserConfiguration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParserConfiguration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.utils.LeanParserConfiguration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.PrimitiveTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodCallExprContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodCallExprContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Bar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Foo'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Bar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Bar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest.Foo'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.FieldsResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.FieldsResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue232'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue232'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.FindingAllFields'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.FindingAllFields'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.ClassOrInterfaceDeclarationContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.ClassOrInterfaceDeclarationContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1491'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.NullTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue113'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue113'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ConstructorsResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ConstructorsResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.AarTypeSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.AarTypeSolverTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ArrayExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.LambdaExprContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.LambdaExprContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolverTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.FunctionInterfaceLogicTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.TypeVariableUsageTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.SolveMethodDeclaredInEnumTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.SolveMethodDeclaredInEnumTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicDisambiguationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.AbstractNameLogicTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.AbstractNameLogicTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicDisambiguationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.ConvertToUsageTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.ConvertToUsageTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.Issue257'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.Issue257'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.VoidTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel.SymbolResolutionResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.reflectionmodel.SymbolResolutionResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SubtypeOfBoundTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1814'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1814'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicTestingJss060Test'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicTestingJss060Test'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Bar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Foo'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Bar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Bazzer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.MoreBazzing'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.Bazzer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest.MoreBazzing'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ContextTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ContextTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue84'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue84'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue347'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue347'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ExprResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ExprResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistEnumTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistEnumTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.EnumLiteralsInAnnotatedClassTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistClassTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistClassTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserHelpersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserHelpersTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.AbstractNameLogicTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogicTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnnotationsResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnnotationsResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionParameterDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.VariadicResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.VariadicResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1946'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeParameterDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeParameterDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.InferenceContextTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue2035'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.DefaultPackageTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.DefaultPackageTest.MyClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.DefaultPackageTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.DefaultPackageTest.MyClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ArrayTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodsResolutionLogicTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodsResolutionLogicTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1364'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1364'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest.Visitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest.Visitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.DifferentiateDotExpressionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.DifferentiateDotExpressionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.AbstractNameLogicTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.CompilationUnitContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.CompilationUnitContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodsResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodsResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclarationTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclarationTest.Foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue185'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue185'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.ConstraintFormulaTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.EnumDeclarationContextResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.contexts.EnumDeclarationContextResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue186'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue186'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue241'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue241'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Bar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Foo'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.WildcardUsageTest.Bar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.InternalClassInInterfaceTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.EnumResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.EnumResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue156'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue156'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.testingclasses'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.testingclasses'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.testingclasses'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.testingclasses.SomeClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseJavaParserTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseJavaParserTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.VarTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseJavaSymbolSolver060Test'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnalyseJavaSymbolSolver060Test'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnonymousClassesResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AnonymousClassesResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1668'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategyTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue251'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue251'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue343'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue343'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue116'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue116'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue235'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue235'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.QualifiedNameResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.QualifiedNameResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.TypeInClassWithAnnotationAncestorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.TypeInClassWithAnnotationAncestorTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaParserAPIIntegrationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaParserAPIIntegrationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue144'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue144'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistInterfaceTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolverWithJavassistInterfaceTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.testingclasses'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.testingclasses.UtilityClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1485'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.Issue1485'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.UnknownMethodsResolutionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.UnknownMethodsResolutionTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclarationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.ModifierVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core.node'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core.node'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.TypeCastingGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.TypeCastingGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericVisitorAdapterGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.MainConstructorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.MainConstructorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.NoCommentEqualsVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core.other'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core.other'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.other'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.other.TokenKindGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.Generator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.Generator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.other.TokenKindGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericListVisitorAdapterGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.RemoveMethodGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.RemoveMethodGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.NoCommentHashCodeVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.ObjectIdentityHashCodeVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.AcceptGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.AcceptGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.CloneGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.CloneGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.VoidVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.VoidVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericVisitorWithDefaultsGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.ReplaceMethodGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.ReplaceMethodGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.HashCodeVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator.core'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.CoreGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.VoidVisitorWithDefaultsGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.other'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.other.GrammarLetterGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.PropertyGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.PropertyGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.GetMetaModelGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.GetMetaModelGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.Generator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.Generator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.ObjectIdentityEqualsVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.CloneVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.CloneVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericVisitorGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.VisitorGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.visitor.GenericVisitorGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.core.node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.NodeModifierGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.NodeGenerator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.core.node.NodeModifierGenerator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.X'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo'}),(target:PACKAGE { id: 'foo.bar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo.bar'}),(target:PACKAGE { id: 'foo.bar.differentpackage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'foo.bar.differentpackage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo.bar.differentpackage'}),(target:CLASS_OR_INTERFACE { id: 'foo.bar.differentpackage.AClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'foo.bar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo.bar'}),(target:CLASS_OR_INTERFACE { id: 'foo.bar.BinaryExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo.bar'}),(target:CLASS_OR_INTERFACE { id: 'foo.bar.AClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.modules'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.modules'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleProvidesDirective'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleProvidesDirective'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithConstructors'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithSimpleName'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithConstructors'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithMembers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithConstructors'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.CommonValidators'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Validators'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Validators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.CommonValidators'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalScope'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTraversableScope'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTraversableScope'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalScope'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.metamodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.metamodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayAccessExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayAccessExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MemberValuePairMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MemberValuePairMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleExportsDirectiveMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleExportsDirectiveMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmNone'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CastExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CastExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javadoc'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javadoc'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.JavadocBlockTag'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithParameters'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ParameterMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ParameterMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BlockStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BlockStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedWildcard'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.SwitchNode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithArguments'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationMemberDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationMemberDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BooleanLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BooleanLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java10Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java9Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java9Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java10Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.observer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.observer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleExportsDirective'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleExportsDirective'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.SingleNodeTypeValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BaseNodeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BaseNodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementMatchers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavadocParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.ModifierValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.ModifierValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.IntersectionTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.IntersectionTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementMatcher'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.SymbolResolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StringLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StringLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java6Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java5Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java5Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java6Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.Printable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.DataKey'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.ProblemReporter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SimpleName'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SimpleName'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.AssociableToAST'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModifierMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModifierMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.observer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.PropagatingAstObserver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.PropagatingAstObserver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VarTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VarTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.AssociableToAST'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReferenceTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReferenceTypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SuperExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SuperExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AssertStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AssertStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ClassOrInterfaceTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReferenceTypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ClassOrInterfaceTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.ChildTextElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.ChildTextElement'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithJavadoc'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariables'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariables.Helper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariables'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EnumDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EnumDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_4Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_4Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java5Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NameMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NameMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.YamlPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.NodeList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayInitializerExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayInitializerExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TokenTextElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TokenTextElement'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedTypeVariable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EnclosedExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EnclosedExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseProblemException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.lang'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseProblemException'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.utils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.utils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.ProjectRoot'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ForStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ForStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.PositionUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.changes.Change'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LambdaExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LambdaExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java7Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java6Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java7Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SwitchExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Expression'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SwitchExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeParameterMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReferenceTypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeParameterMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.UnionType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.UnionType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.HashCodeVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseStart'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Providers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Providers.PreProcessor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Providers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithBody'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java8Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java7Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java8Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.observer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.AstObserverAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmConditional'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.Resolvable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.FieldAccessExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.FieldAccessExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleRequiresDirective'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleRequiresDirective'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenTypes'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SwitchStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SwitchStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.DoStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.DoStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot.Callback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot.ParallelParse'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot.ParallelParse'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot.ParallelParse.VisitFileCallback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:PACKAGE { id: 'java.util.concurrent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.RecursiveAction'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.RecursiveAction'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRoot.ParallelParse'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.ConcreteSyntaxModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Problem'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BinaryExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BinaryExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Range'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Modifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Modifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.PackageDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.PackageDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ThisExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ThisExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.SimpleValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.SingleNodeTypeValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.SimpleValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LabeledStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LabeledStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.Kept'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmToken'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmToken.TokenContentCalculator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmToken'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ImportDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ImportDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleProvidesDirectiveMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleProvidesDirectiveMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.MethodAmbiguityException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.MethodAmbiguityException'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.VarType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.VarType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TryStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TryStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnaryExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnaryExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.ClassUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LongLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LongLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmChar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElementCalculator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalLabel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithName'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.JavaParserMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReturnStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReturnStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SeparatedItemStringBuilder'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedLambdaConstraintType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ConstructorDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CallableDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CallableDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ConstructorDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.MethodUsage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.XmlPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.TypeParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ReferenceType'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.TypeParameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ConditionalExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ConditionalExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.PrettyPrinterConfiguration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_2Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_1Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_1Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_2Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayCreationLevelMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayCreationLevelMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CatchClauseMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CatchClauseMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.CallableDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.CallableDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ConstructorDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.Javadoc'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.observer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.AstObserver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.HasParentNode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.observer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.Observable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.Observable'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.HasParentNode'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SwitchEntryMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SwitchEntryMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BreakStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BreakStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.TreeVisitorValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.Bound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.UnsolvedSymbolException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.UnsolvedSymbolException'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.ReservedKeywordValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.ReservedKeywordValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EnumConstantDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EnumConstantDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MethodReferenceExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MethodReferenceExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithAnnotations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LongLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VariableDeclarationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VariableDeclarationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.TypedValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:PACKAGE { id: 'java.util.function'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.function'}),(target:CLASS_OR_INTERFACE { id: 'java.util.function.BiConsumer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.function.BiConsumer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.TypedValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EmptyStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.EmptyStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.AssociableToAST'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator.CalculatedSyntaxModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator.CsmChild'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorMap'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorMap.EqualsHashcodeOverridingFacade'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SimpleNameMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SimpleNameMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.CallableDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.MethodDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithCondition'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmMix'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayCreationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ArrayCreationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.GenericListVisitorAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmString'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ArrayType'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ArrayType.ArrayBracketPair'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ArrayType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ReferenceType'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ArrayType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_0Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_0Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_1Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NormalAnnotationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NormalAnnotationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.Removed'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ReferenceType'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ClassOrInterfaceType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java8Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java9Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ObjectCreationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ObjectCreationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.version'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.version'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.version'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.PostProcessors'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.CollectionStrategy'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.CallableDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.CallableDeclaration.Signature'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.BodyDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.CallableDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.VarValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SynchronizedStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SynchronizedStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorWithDefaults'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.InitializerDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.InitializerDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.TypedValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.IfStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.IfStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VariableDeclaratorMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VariableDeclaratorMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.IntegerLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.IntegerLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NullLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NullLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavaToken'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithScope'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTraversableScope'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithScope'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.CharSequenceTranslator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.LookupTranslator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.CharSequenceTranslator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.LookupTranslator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.AggregateTranslator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.CharSequenceTranslator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.AggregateTranslator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.OctalUnescaper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.CharSequenceTranslator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.OctalUnescaper'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.UnicodeUnescaper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.CharSequenceTranslator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.StringEscapeUtils.UnicodeUnescaper'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ModifierVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.version'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java12PostProcessor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.version'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java11PostProcessor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java11PostProcessor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java12PostProcessor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleRequiresDirectiveMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleRequiresDirectiveMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ClassExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ClassExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationMemberDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationMemberDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.NodeText'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MethodCallExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MethodCallExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchEntry'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchEntry'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.RemovedGroup'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.InstanceOfExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.InstanceOfExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnionTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnionTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node.BreadthFirstIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node.DirectChildrenIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node.ParentsVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node.PreOrderIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node.PostOrderIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CallableDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.PhantomNodeLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.DotPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedUnionType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnparsableStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnparsableStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SwitchExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.SwitchExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CommentMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CommentMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalBlockStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VoidTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.VoidTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.ParserCollectionStrategy'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleUsesDirectiveMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleUsesDirectiveMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithExtends'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.IntegerLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.NoCommentEqualsVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithImplements'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.TreeVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.AssociableToAST'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedAnnotationDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseResult'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseResult.PostProcessor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseResult'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:PACKAGE { id: 'com.github.javaparser.resolution.types.parametrization'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.resolution.types.parametrization'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types.parametrization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParameterValueProvider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.PropertyMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorList'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorList.EqualsHashcodeOverridingFacade'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AssignExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AssignExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleOpensDirective'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleOpensDirective'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenRange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithExpression'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java12Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java11Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java11Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java12Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.UnicodeEscapeProcessingProvider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.SourcePrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LocalClassDeclarationStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LocalClassDeclarationStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithRange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ReceiverParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ReceiverParameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_3Validator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_3Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_4Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Name'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.Name'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTokenRange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithStatements'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator.chunks'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.VisitorValidator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedTypeTransformer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.version'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java10PostProcessor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java10PostProcessor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java11PostProcessor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleOpensDirectiveMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleDirectiveMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ModuleOpensDirectiveMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Validators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_0Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnknownTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.UnknownTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedArrayType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmComment'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.ArrayCreationLevel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.ArrayCreationLevel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types.parametrization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametrized'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmSequence'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ThrowStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ThrowStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CompilationUnitMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CompilationUnitMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Utils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.CharLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForEachStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForEachStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.JavadocCommentMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CommentMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.JavadocCommentMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.PrimitiveTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.PrimitiveTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.CascadingIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.CascadingIterator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.CascadingIterator.Provider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.EmptyIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.SingleElementIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.ComposedIterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.StaticJavaParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc'}),(target:PACKAGE { id: 'com.github.javaparser.javadoc.description'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javadoc.description'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc.description'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.description.JavadocDescription'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.DoubleLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.DoubleLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.WhileStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.WhileStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithIdentifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.Parameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.Node'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.Builder'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types.parametrization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedValueDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log.StandardOutStandardErrorAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log.SilentAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Log.Adapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.changes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.changes.NoChange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BlockCommentMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CommentMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BlockCommentMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.PrintingHelper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc.description'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.description.JavadocSnippet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NameExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NameExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceZip'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceZip.Callback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceZip'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.CompilationUnit'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.CompilationUnit.Storage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.Difference'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_2Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_3Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedIntersectionType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.HasAccessSpecifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.AssociableToAST'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.IntersectionType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.Type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.IntersectionType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReferenceTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MethodDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CallableDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MethodDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ContinueStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ContinueStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes.modifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java10Validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java11Validator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.WildcardTypeMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TypeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.WildcardTypeMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.CommentsInserter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.UnparsableStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.UnparsableStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleUsesDirective'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleDirective'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.modules.ModuleUsesDirective'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.types'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedVoidType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc.description'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.description.JavadocDescriptionElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorSet'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorSet.EqualsHashcodeOverridingFacade'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.PostProcessors'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java10PostProcessor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LineCommentMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CommentMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LineCommentMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ExpressionMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.AnnotationExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.GenericVisitorWithDefaults'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.Added'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.PrettyPrintVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.PrettyPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.resolution.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.AssociableToAST'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc.description'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.description.JavadocInlineTag'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.concretesyntaxmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.concretesyntaxmodel.CsmIndent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.Visitable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.CodeGenerationUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExpr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.DoubleLiteralExpr'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.Pair'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.LocalClassDeclarationStmt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.Statement'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.LocalClassDeclarationStmt'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReceiverParameterMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.NodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ReceiverParameterMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ForEachStmtMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.StatementMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.ForEachStmtMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CharLiteralExprMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.LiteralStringValueExprMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.CharLiteralExprMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.FieldDeclarationMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BodyDeclarationMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.FieldDeclarationMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.Reshuffled'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.serialization'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.serialization'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.serialization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.serialization.JavaParserJsonDeserializerTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.serialization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.serialization.JavaParserJsonSerializerTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'japa'}),(target:PACKAGE { id: 'japa.bdd'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'japa.bdd'}),(target:PACKAGE { id: 'japa.bdd.samples'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'japa.bdd.samples'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.Ugly'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'japa.bdd.samples'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.X'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.Y'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.X'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.Y'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.QWE'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts.A'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'japa.bdd.samples'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.Base'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.Base'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.JavaConcepts'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'japa.bdd.samples'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.XXX'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.io'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.Serializable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.Serializable'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.XXX'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Cloneable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Cloneable'}),(target:CLASS_OR_INTERFACE { id: 'japa.bdd.samples.XXX'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.NoSymbolDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.AbstractSymbolDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.AbstractSymbolDeclarator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.NoSymbolDeclarator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.FieldSymbolDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.AbstractSymbolDeclarator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.FieldSymbolDeclarator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeSameAsType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeSameAsType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumConstantDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.TypeInference'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.LazyType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionTypeParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ForStatementContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ForStatementContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.MethodReferenceThrowsCompatibleWithType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.MethodReferenceThrowsCompatibleWithType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractMethodLikeDeclarationContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractMethodLikeDeclarationContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.FalseBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.FalseBound'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SameAsBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SameAsBound'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionAnnotationMemberDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnnotationMemberDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver.ExceptionHandlers'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.SwitchEntryContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.SwitchEntryContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeParameter'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.VariableDeclaratorContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.VariableDeclaratorContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractMethodLikeDeclarationContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ClassLoaderTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistAnnotationMemberDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ProperLowerBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.ClasspathElement'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparser.Navigator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.LambdaExprContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.LambdaExprContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.LambdaThrowsCompatibleWithType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.LambdaThrowsCompatibleWithType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.InferenceVariable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.SourceFileInfoExtractor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.JavaParserTypeDeclarationAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.AstResolutionUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.SymbolDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumConstantDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.CapturesBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.CapturesBound'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionParameterDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistConstructorDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnnotationDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnnotationDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration.ValuesMethod'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.VariableSymbolDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.AbstractSymbolDeclarator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.VariableSymbolDeclarator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.CompilationUnitContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.CompilationUnitContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeCompatibleWithType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeCompatibleWithType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserVariableDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ClassLoaderTypeSolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Instantiation'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionConstructorDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeSubtypeOfType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeSubtypeOfType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula.ReductionResult'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.MemoryTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeContainedByType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.TypeContainedByType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaSymbolSolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaSymbolSolver.ArrayLengthValueDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.JavaSymbolSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.ParameterSymbolDeclarator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.AbstractSymbolDeclarator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarators.ParameterSymbolDeclarator'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AnonymousClassDeclarationContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AnonymousClassDeclarationContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ControlFlowLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserMethodDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.FieldAccessContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.FieldAccessContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeParameter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.BlockStmtContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.BlockStmtContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ProperUpperBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.ExpressionCompatibleWithType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormula'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas.ExpressionCompatibleWithType'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.InstantiationSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.core'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.core'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.core.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.core.resolution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.core.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.core.resolution.TypeVariableResolutionCapability'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistAnnotationDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistAnnotationDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserFieldDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeVariableDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeVariableDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet.Processor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet.VariableDependency'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionAnnotationDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionAnnotationDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.DefaultConstructorDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.MethodCallExprContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.comparators.ParameterComparator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.model.typesystem'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.resolution.types.ResolvedReferenceType'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typesolvers.AarTypeSolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Substitution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ConstraintFormulaSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ObjectCreationContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ObjectCreationContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistParameterDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.TypeHelper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SubtypeOfBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.SubtypeOfBound'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.EnumDeclarationContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.EnumDeclarationContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.CatchClauseContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.CatchClauseContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.StatementContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.StatementContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.TryWithResourceContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.TryWithResourceContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ConstructorContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractMethodLikeDeclarationContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ConstructorContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.InferenceVariableSubstitution'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumConstantDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.MethodType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistFieldDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.core.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.core.resolution.Context'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogic.PredicateOnParentAndChild'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.naming'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.naming.NameLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.utils.SymbolSolverCollectionStrategy'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.TypeInferenceCache'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javassistmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.reflectionmodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserConstructorDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.ExpressionHelper'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.VariableDeclarationExprContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.VariableDeclarationExprContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ForEachStatementContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.contexts.ForEachStatementContext'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.declarations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.declarations'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.declarations.common'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.symbolsolver.declarations.common'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.declarations.common'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.declarations.common.MethodDeclarationCommonLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.core.resolution'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.core.resolution.MethodUsageResolutionCapability'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.ThrowsBound'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.Bound'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.resolution.typeinference.bounds.ThrowsBound'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.javaparsermodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser.Modifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser.GTToken'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Token'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Token'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser.GTToken'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser.LookaheadSuccess'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Error'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Error'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser.LookaheadSuccess'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParser.JJCalls'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavaCharStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParserConstants'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenMgrError'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Error'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenMgrError'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ASTParserTokenManager'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Exception'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Exception'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseException'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo'}),(target:CLASS_OR_INTERFACE { id: 'foo.C'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo'}),(target:CLASS_OR_INTERFACE { id: 'foo.A'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo'}),(target:CLASS_OR_INTERFACE { id: 'foo.B'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.OperatorTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.OperatorTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.UnicodeEscapeProcessingProviderTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.ArrayCreationLevelTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.ArrayCreationLevelTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.HashCodeVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.AssignExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.CompilationUnitTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.BreakStmtTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.JavadocTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.builders'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.builders'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.NodeWithParametersBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculatorTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.bdd'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.bdd'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.VisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.VisitorTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceZipTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.TransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.ConcreteSyntaxModelAcceptanceTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.modules'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.modules'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.modules'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.modules.ModuleDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.RangeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LambdaExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorSetTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.StatementTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.StatementTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavaTokenTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:PACKAGE { id: 'com.github.javaparser.bdd.steps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.bdd.steps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.CommentParsingSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.remove'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.remove'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.remove'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.remove.NodeRemovalTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java5ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.BinaryExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ProblemTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.PropertyMetaModelTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.PositionRangeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.PositionRangeTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.FieldDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.FieldDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.AnnotationMemberDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.AnnotationMemberDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.TestParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.NodeWithThrownExceptionsBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElementCalculatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.DifferenceElementCalculatorTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.ConstructorDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.ConstructorDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorMapTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.DataKeyTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ExistenceOfParentNodeVerifier'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ExistenceOfParentNodeVerifier.Verifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ExistenceOfParentNodeVerifier'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ExistenceOfParentNodeVerifier.Verifier'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.wiki_samples'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.wiki_samples'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.TestFileToken'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.ChangingMethodsFromAClassWithoutAVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.CompilationUnitBuildersTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.CompilationUnitBuildersTest.testInnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.CompilationUnitBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.ChangingMethodsFromAClassWithAVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java12ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.SwitchStmtTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.BlockStmtTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.CommentParsingTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.CommentParsingTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.YamlPrinterTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java6ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithJavadocTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ClassOrInterfaceDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.observer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.observer.PropagatingAstObserverTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.LiteralStringValueExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.ClassOrInterfaceDeclarationBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MethodCallExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.XmlPrinterTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.version'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.version.Java10PostProcessorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.PrettyPrintVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TestMetaModel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BaseNodeMetaModel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.TestMetaModel'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.metamodel.BaseNodeMetaModelTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.ClassCreator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.CuPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ParsingSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithVariablesTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.ClassOrInterfaceDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.ClassOrInterfaceDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.FieldDeclarationBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.EnumConstantDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.EnumConstantDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.MethodReferenceExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SwitchExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.ParsingTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.ParsingTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java8ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.ParserCollectionStrategyTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:PACKAGE { id: 'com.github.javaparser.wiki_samples.removenode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.wiki_samples.removenode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples.removenode'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.removenode.ModifierVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples.removenode'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.removenode.MyVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ModifierVisitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.removenode.MyVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java10ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.SourceRootTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.ThisExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.PositionRangeSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.IfElseStmtTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_0ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.StringLiteralExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodPrinter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodPrinter.MethodVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodPrinter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodPrinter.MethodVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.AnnotationMemberDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodChanger_1'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodChanger_1.MethodChangerVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodChanger_1'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodChanger_1.MethodChangerVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.PrettyPrintingSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_4ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.NoCommentEqualsVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParseErrorRecoveryTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps.ChangeMethodNameToUpperCaseVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps.ChangeMethodNameToUpperCaseVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps.AddNewIntParameterCalledValueVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ManipulationSteps.AddNewIntParameterCalledValueVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.VisitorListTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.TestUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ProvidersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.MethodDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.MethodDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.VisitingClassMethodsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.NodePositionTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.MethodChanger_2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest.AddFooCallModifierVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ModifierVisitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest.AddFooCallModifierVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest.CallModifierVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ModifierVisitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest.CallModifierVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.AnnotationDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.AnnotationDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.CharLiteralExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.ComparingSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavaParserTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java9ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.ParseResultTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.VisitorSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithOptionalScopeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithModifiersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples.removenode'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.removenode.RemoveDeleteNodeFromAst'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_2ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.EnumDeclarationBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.steps'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.steps.SharedSteps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.ComparingTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.ComparingTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.PrintingTheCompilationUnitToSystemOutputTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.NodeListTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.CloneVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_3ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.TreeVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParserTokenManagerTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.nodeTypes'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.nodeTypes.NodeWithTraversableScopeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.ArrayTypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.JavadocParserTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.comments'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.comments.CommentTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.NodeWithMembersBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.UtilsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples.removenode'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.removenode.D'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SimpleNameTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.EnumDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.EnumDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenRangeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.CreatingACompilationUnitFromScratch'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java1_1ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc.description'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.description.JavadocInlineTagTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ParserConfigurationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java7ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.ForEachStmtTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.PrettyPrintingTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.PrettyPrintingTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.FieldDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:PACKAGE { id: 'com.github.javaparser.bdd.visitors'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.bdd.visitors'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd.visitors'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.visitors.PositionTestVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.VoidVisitorAdapter'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.visitors.PositionTestVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.PairTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.stmt'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.stmt.TryStmtTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.bdd'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.ManipulationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.BasicJBehaveTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.bdd.ManipulationTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.NodeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.ReplaceNodeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.LogTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.LogTest.TestAdapter'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.LogTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.NameTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.TestUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.CompilationUnitTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.CompilationUnitTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.InstanceOfExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.validator'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.validator.Java11ValidatorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.TestVisitor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.PrettyPrintVisitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.TestVisitor'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.ModifierVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.FindNodeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.MethodDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.utils'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.utils.CodeGenerationUtilsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast'}),(target:PACKAGE { id: 'com.github.javaparser.ast.imports'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.ast.imports'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.imports'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.imports.ImportDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.DotPrinterTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.CommentsInserterTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.ConcreteSyntaxModelTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.SuperExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.type'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.type.TypeTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.manual'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.manual'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.manual'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.manual.BulkParseTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.PrettyPrinterTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.builders'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.builders.NodeWithAnnotationsBuildersTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.expr'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.expr.DoubleLiteralExprTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.visitor'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.visitor.NoCommentHashCodeVisitorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javadoc'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javadoc.JavadocExtractorTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.ast.body.ConstructorDeclarationTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.InitializerDeclarationTransformationsTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.AbstractLexicalPreservingTest'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.printer.lexicalpreservation.transformations.ast.body.InitializerDeclarationTransformationsTest'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator'}),(target:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.metamodel.InitializeConstructorParametersStatementsGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.metamodel.NodeMetaModelGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.metamodel.MetaModelGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.metamodel.InitializePropertyMetaModelsStatementsGenerator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.generator.metamodel'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.generator.metamodel.AstTypeAnalysis'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.MethodResolutionCapability'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.ObjectProvider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.InferenceVariableType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.symbolsolver.logic'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.symbolsolver.logic.InferenceContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser.LookaheadSuccess'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser.LookaheadSuccess'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser.JJCalls'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParserBase'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParserBase'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParser'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.StringProvider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Provider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParserConstants'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.SimpleCharStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenBase'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenBase'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.Token'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.GeneratedJavaParserTokenManager'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.StreamProvider'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenMgrException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.RuntimeException'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.TokenMgrException'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.serialization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.serialization.JavaParserJsonDeserializer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.serialization'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.serialization.JavaParserJsonSerializer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.storage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.storage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.wiki_samples'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.wiki_samples.TestFile'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.company'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.company'}),(target:PACKAGE { id: 'com.company.stuff'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.company.stuff'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.storage'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.storage.PrimaryType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.A'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.blablabla'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.blablabla'}),(target:PACKAGE { id: 'com.blablabla.root'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.blablabla.root'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'package_c'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'package_c'}),(target:CLASS_OR_INTERFACE { id: 'package_c.c'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.c'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.PackageDotExpressions'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo.bar'}),(target:CLASS_OR_INTERFACE { id: 'foo.bar.AnInterface'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.b'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.foo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.foo'}),(target:CLASS_OR_INTERFACE { id: 'com.foo.Widget'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'foo'}),(target:CLASS_OR_INTERFACE { id: 'foo.JavaTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.foo'}),(target:PACKAGE { id: 'com.foo.base'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.foo.base'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.foo.base'}),(target:CLASS_OR_INTERFACE { id: 'com.foo.base.Widget'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.FieldDotExpressions'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.FieldContainer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer'}),(target:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer.InnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer.InnerClass'}),(target:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer.InnerClass.InnerInnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer.InnerClass.InnerInnerClass'}),(target:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer.InnerClass.InnerInnerClass.InnerInnerInnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.InnerClassFieldContainer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar.SuperClassExcludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.B'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceUserIncludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassIncludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar.SuperClassIncludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar.SuperClassIncludedJar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassIncludedJar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceIncludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar.InterfaceIncludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.included_jar.InterfaceIncludedJar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceIncludedJar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.Complex'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceUserExcludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.StandaloneInterface'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'issue241'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'issue241.TypeWithMemberType'}),(target:CLASS_OR_INTERFACE { id: 'issue241.TypeWithMemberType.MemberInterface'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'issue241'}),(target:CLASS_OR_INTERFACE { id: 'issue241.TypeWithMemberType'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.packageName'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'com.packageName'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.packageName'}),(target:CLASS_OR_INTERFACE { id: 'com.packageName.ClassInPackage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceUserOwnJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'package_b'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'package_b'}),(target:CLASS_OR_INTERFACE { id: 'package_b.b'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassOwnJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SuperClassOwnJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SuperClassOwnJar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassOwnJar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar.InterfaceExcludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.Main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceOwnJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.InnerClassContainer'}),(target:CLASS_OR_INTERFACE { id: '.InnerClassContainer.InnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.InnerClassContainer.InnerClass'}),(target:CLASS_OR_INTERFACE { id: '.InnerClassContainer.InnerClass.InnerInnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.InnerClassContainer.InnerClass.InnerInnerClass'}),(target:CLASS_OR_INTERFACE { id: '.InnerClassContainer.InnerClass.InnerInnerClass.InnerInnerInnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.InnerClassContainer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.InnerClassDotExpressions'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.packageName.InnerStaticClassFieldContainer'}),(target:CLASS_OR_INTERFACE { id: 'com.packageName.InnerStaticClassFieldContainer.InnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.packageName.InnerStaticClassFieldContainer.InnerClass'}),(target:CLASS_OR_INTERFACE { id: 'com.packageName.InnerStaticClassFieldContainer.InnerClass.InnerInnerClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.packageName'}),(target:CLASS_OR_INTERFACE { id: 'com.packageName.InnerStaticClassFieldContainer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.C'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceOwnJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.InterfaceOwnJar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceOwnJar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.a'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.ConcreteClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.Issue300'}),(target:CLASS_OR_INTERFACE { id: '.Issue300.A'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.Issue300'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: '.Issue300'}),(target:CLASS_OR_INTERFACE { id: '.Issue300.B'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'comjavaparser'}),(target:PACKAGE { id: 'package_a'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'package_a'}),(target:CLASS_OR_INTERFACE { id: 'package_a.a'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceExcludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar.InterfaceExcludedJar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubInterfaceExcludedJar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassExcludedJar'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.excluded_jar.SuperClassExcludedJar'}),(target:CLASS_OR_INTERFACE { id: 'com.github.javaparser.javasymbolsolver.javassist_symbols.main_jar.SubClassExcludedJar'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.HelloWorld'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: ''}),(target:CLASS_OR_INTERFACE { id: '.InnerStaticClassFieldDotExpressions'}) MERGE (source)-[:CONTAINS]->(target);
