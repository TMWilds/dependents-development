MERGE (p:PACKAGE {id: 'com', name: 'com'});
MERGE (p:PACKAGE {id: 'com.bankcomm', name: 'bankcomm'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc', name: 'pccc'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight', name: 'onesight'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight.demo', name: 'demo'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming', name: 'sparkstreaming'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2', name: 'phase2'});
MERGE (p:Project {id: 'sparkdemobeginner', name: 'sparkdemobeginner'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.FunctionS', name: 'FunctionS'});
MERGE (p:PACKAGE {id: 'java', name: 'java'});
MERGE (p:PACKAGE {id: 'java.io', name: 'io'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.Serializable', name: 'Serializable'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight.demo.spark', name: 'spark'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight.demo.spark.framework', name: 'framework'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory', name: 'KafkaProducerFactory'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.assembleProperties', name: 'assembleProperties'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.createKafkaProducer', name: 'createKafkaProducer'});
MERGE (p:PACKAGE {id: 'java.util', name: 'util'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Properties', name: 'Properties'});
MERGE (p:METHOD {id: 'java.util.Properties.put', name: 'put'});
MERGE (p:PACKAGE {id: 'java.util.regex', name: 'regex'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.regex.Pattern', name: 'Pattern'});
MERGE (p:METHOD {id: 'java.util.regex.Pattern.compile', name: 'compile'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8', name: 'WordCountJava8'});
MERGE (p:PACKAGE {id: 'org', name: 'org'});
MERGE (p:PACKAGE {id: 'org.apache', name: 'apache'});
MERGE (p:PACKAGE {id: 'org.apache.spark', name: 'spark'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.SparkConf', name: 'SparkConf'});
MERGE (p:METHOD {id: 'org.apache.spark.SparkConf.setAppName', name: 'setAppName'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo', name: 'runSparkDemo'});
MERGE (p:METHOD {id: 'org.apache.spark.SparkConf.setMaster', name: 'setMaster'});
MERGE (p:PACKAGE {id: 'org.apache.spark.api', name: 'api'});
MERGE (p:PACKAGE {id: 'org.apache.spark.api.java', name: 'java'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.api.java.JavaSparkContext', name: 'JavaSparkContext'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.JavaSparkContext.textFile', name: 'textFile'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.api.java.AbstractJavaRDDLike', name: 'AbstractJavaRDDLike'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.AbstractJavaRDDLike.flatMap', name: 'flatMap'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.JavaSparkContext.stop', name: 'stop'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount', name: 'KafkaDirectWordCount'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:PACKAGE {id: 'org.apache.spark.streaming', name: 'streaming'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.Durations', name: 'Durations'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.Durations.seconds', name: 'seconds'});
MERGE (p:PACKAGE {id: 'com.google', name: 'google'});
MERGE (p:PACKAGE {id: 'com.google.common', name: 'common'});
MERGE (p:PACKAGE {id: 'com.google.common.collect', name: 'collect'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.collect.Sets', name: 'Sets'});
MERGE (p:METHOD {id: 'com.google.common.collect.Sets.newHashSet', name: 'newHashSet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.collect.Maps', name: 'Maps'});
MERGE (p:METHOD {id: 'com.google.common.collect.Maps.newHashMap', name: 'newHashMap'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Map', name: 'Map'});
MERGE (p:METHOD {id: 'java.util.Map.put', name: 'put'});
MERGE (p:PACKAGE {id: 'org.apache.spark.streaming.kafka010', name: 'kafka010'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.kafka010.LocationStrategies', name: 'LocationStrategies'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent', name: 'PreferConsistent'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies', name: 'ConsumerStrategies'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe', name: 'Subscribe'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.kafka010.KafkaUtils', name: 'KafkaUtils'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream', name: 'createDirectStream'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges', name: 'HasOffsetRanges'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges', name: 'offsetRanges'});
MERGE (p:PACKAGE {id: 'org.apache.spark.streaming.api', name: 'api'});
MERGE (p:PACKAGE {id: 'org.apache.spark.streaming.api.java', name: 'java'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.api.java.JavaInputDStream', name: 'JavaInputDStream'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream', name: 'inputDStream'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets', name: 'CanCommitOffsets'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync', name: 'commitAsync'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike', name: 'AbstractJavaDStreamLike'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap', name: 'flatMap'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.print', name: 'print'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext', name: 'JavaStreamingContext'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start', name: 'start'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination', name: 'awaitTermination'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion', name: 'KafkaToKafkaDirectAccWordCount_oldVersion'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initSparkStreamingContext', name: 'initSparkStreamingContext'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.checkpoint', name: 'checkpoint'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.sparkContext', name: 'sparkContext'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.JavaSparkContext.broadcast', name: 'broadcast'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka', name: 'readStreamFromKafka'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.manageOffsets', name: 'manageOffsets'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.api.java.Optional', name: 'Optional'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.Optional.empty', name: 'empty'});
MERGE (p:PACKAGE {id: 'org.apache.spark.broadcast', name: 'broadcast'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.broadcast.Broadcast', name: 'Broadcast'});
MERGE (p:METHOD {id: 'org.apache.spark.broadcast.Broadcast.getValue', name: 'getValue'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.startAndWait', name: 'startAndWait'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initTopics', name: 'initTopics'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initKafkaParams', name: 'initKafkaParams'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion', name: 'KafkaProducer_oldVersion'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.getInstance', name: 'getInstance'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.sendToKafka_oldVersion', name: 'sendToKafka_oldVersion'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.send', name: 'send'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.collect.Lists', name: 'Lists'});
MERGE (p:METHOD {id: 'com.google.common.collect.Lists.newArrayList', name: 'newArrayList'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList', name: 'assmebleMessageList'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Iterator', name: 'Iterator'});
MERGE (p:METHOD {id: 'java.util.Iterator.next', name: 'next'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.PrintStream', name: 'PrintStream'});
MERGE (p:METHOD {id: 'java.io.PrintStream.println', name: 'println'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Date', name: 'Date'});
MERGE (p:METHOD {id: 'java.util.Date.getTime', name: 'getTime'});
MERGE (p:PACKAGE {id: 'java.lang', name: 'lang'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.String', name: 'String'});
MERGE (p:METHOD {id: 'java.lang.String.replace', name: 'replace'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.List', name: 'List'});
MERGE (p:METHOD {id: 'java.util.List.add', name: 'add'});
MERGE (p:METHOD {id: 'java.util.Iterator.hasNext', name: 'hasNext'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.PredicationS', name: 'PredicationS'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount', name: 'KafkaDirectAccWordCount'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initSparkStreamingContext', name: 'initSparkStreamingContext'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka', name: 'readStreamFromKafka'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.manageOffsets', name: 'manageOffsets'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.startAndWait', name: 'startAndWait'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initTopics', name: 'initTopics'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initKafkaParams', name: 'initKafkaParams'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount', name: 'SocketWordCount'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.socketTextStream', name: 'socketTextStream'});
MERGE (p:METHOD {id: 'java.lang.String.split', name: 'split'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.call', name: 'call'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Arrays', name: 'Arrays'});
MERGE (p:METHOD {id: 'java.util.Arrays.asList', name: 'asList'});
MERGE (p:METHOD {id: 'java.util.List.iterator', name: 'iterator'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.mapToPair', name: 'mapToPair'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.streaming.api.java.JavaPairDStream', name: 'JavaPairDStream'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaPairDStream.reduceByKey', name: 'reduceByKey'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.close', name: 'close'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8', name: 'SocketWordCountJava8'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion', name: 'KafkaToKafkaDirectAccWordCount_newVersion'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initSparkStreamingContext', name: 'initSparkStreamingContext'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka', name: 'readStreamFromKafka'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.manageOffsets', name: 'manageOffsets'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.startAndWait', name: 'startAndWait'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList', name: 'assembleMessageList'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initTopics', name: 'initTopics'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initKafkaParams', name: 'initKafkaParams'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.sendToKafka', name: 'sendToKafka'});
MERGE (p:PACKAGE {id: 'org.apache.kafka', name: 'kafka'});
MERGE (p:PACKAGE {id: 'org.apache.kafka.clients', name: 'clients'});
MERGE (p:PACKAGE {id: 'org.apache.kafka.clients.producer', name: 'producer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.kafka.clients.producer.Producer', name: 'Producer'});
MERGE (p:METHOD {id: 'org.apache.kafka.clients.producer.Producer.send', name: 'send'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo', name: 'ReduceDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initSparkStreamingContext', name: 'initSparkStreamingContext'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka', name: 'readStreamFromKafka'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.manageOffsets', name: 'manageOffsets'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax5', name: 'findMax5'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.startAndWait', name: 'startAndWait'});
MERGE (p:METHOD {id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map', name: 'map'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4', name: 'findMax4'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3', name: 'findMax3'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2', name: 'findMax2'});
MERGE (p:PACKAGE {id: 'com.alibaba', name: 'alibaba'});
MERGE (p:PACKAGE {id: 'com.alibaba.fastjson', name: 'fastjson'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.alibaba.fastjson.JSONObject', name: 'JSONObject'});
MERGE (p:METHOD {id: 'com.alibaba.fastjson.JSONObject.getInteger', name: 'getInteger'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey', name: 'findMax2ByKey'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.collect.Iterables', name: 'Iterables'});
MERGE (p:METHOD {id: 'com.google.common.collect.Iterables.toArray', name: 'toArray'});
MERGE (p:PACKAGE {id: 'java.util.stream', name: 'stream'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.stream.Stream', name: 'Stream'});
MERGE (p:METHOD {id: 'java.util.stream.Stream.of', name: 'of'});
MERGE (p:METHOD {id: 'java.util.stream.Stream.sorted', name: 'sorted'});
MERGE (p:METHOD {id: 'java.util.stream.Stream.findFirst', name: 'findFirst'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Optional', name: 'Optional'});
MERGE (p:METHOD {id: 'java.util.Optional.get', name: 'get'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compare', name: 'compare'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey', name: 'findMax3ByKey'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compareWithJson', name: 'compareWithJson'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey', name: 'findMax4ByKey'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.collect.ComparisonChain', name: 'ComparisonChain'});
MERGE (p:METHOD {id: 'com.google.common.collect.ComparisonChain.start', name: 'start'});
MERGE (p:METHOD {id: 'com.google.common.collect.ComparisonChain.result', name: 'result'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax', name: 'findMax'});
MERGE (p:METHOD {id: 'java.util.Optional.empty', name: 'empty'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.parseObject', name: 'parseObject'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.alibaba.fastjson.JSON', name: 'JSON'});
MERGE (p:METHOD {id: 'com.alibaba.fastjson.JSON.parseObject', name: 'parseObject'});
MERGE (p:METHOD {id: 'java.util.Optional.of', name: 'of'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initTopics', name: 'initTopics'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initKafkaParams', name: 'initKafkaParams'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sendToKafka', name: 'sendToKafka'});
MERGE (p:METHOD {id: 'com.alibaba.fastjson.JSONObject.getJSONArray', name: 'getJSONArray'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sumFrmJsonData', name: 'sumFrmJsonData'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.alibaba.fastjson.JSONArray', name: 'JSONArray'});
MERGE (p:METHOD {id: 'com.alibaba.fastjson.JSONArray.getJSONObject', name: 'getJSONObject'});
MERGE (p:METHOD {id: 'com.alibaba.fastjson.JSONArray.size', name: 'size'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.main', name: 'main'});
MERGE (p:PACKAGE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3', name: 'phase3'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo', name: 'SinkToEsDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es', name: 'initSparkStreamingContext4Es'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo', name: 'runSparkStreamingDemo'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka', name: 'readStreamFromKafka'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.manageOffsets', name: 'manageOffsets'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.sendToEs', name: 'sendToEs'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.startAndWait', name: 'startAndWait'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initTopics', name: 'initTopics'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initKafkaParams', name: 'initKafkaParams'});
MERGE (p:METHOD {id: 'org.apache.spark.SparkConf.set', name: 'set'});
MERGE (p:PACKAGE {id: 'org.elasticsearch', name: 'elasticsearch'});
MERGE (p:PACKAGE {id: 'org.elasticsearch.spark', name: 'spark'});
MERGE (p:PACKAGE {id: 'org.elasticsearch.spark.streaming', name: 'streaming'});
MERGE (p:PACKAGE {id: 'org.elasticsearch.spark.streaming.api', name: 'api'});
MERGE (p:PACKAGE {id: 'org.elasticsearch.spark.streaming.api.java', name: 'java'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.elasticsearch.spark.streaming.api.java.JavaEsSparkStreaming', name: 'JavaEsSparkStreaming'});
MERGE (p:METHOD {id: 'org.elasticsearch.spark.streaming.api.java.JavaEsSparkStreaming.saveJsonToEs', name: 'saveJsonToEs'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.main', name: 'main'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount', name: 'WordCount'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo', name: 'runSparkDemo'});
MERGE (p:METHOD {id: 'java.util.regex.Pattern.split', name: 'split'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.call', name: 'call'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.AbstractJavaRDDLike.mapToPair', name: 'mapToPair'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.spark.api.java.JavaPairRDD', name: 'JavaPairRDD'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.JavaPairRDD.reduceByKey', name: 'reduceByKey'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.AbstractJavaRDDLike.foreach', name: 'foreach'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.JavaSparkContext.close', name: 'close'});
MERGE (p:METHOD {id: 'org.apache.spark.api.java.AbstractJavaRDDLike.collect', name: 'collect'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.anotherAction', name: 'anotherAction'});
MERGE (p:PACKAGE {id: 'scala', name: 'scala'});
MERGE (p:CLASS_OR_INTERFACE {id: 'scala.Tuple2', name: 'Tuple2'});
MERGE (p:METHOD {id: 'scala.Tuple2._1', name: '_1'});
MERGE (p:METHOD {id: 'scala.Tuple2._2', name: '_2'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.main', name: 'main'});
MERGE (p:PACKAGE {id: 'org.apache.commons', name: 'commons'});
MERGE (p:PACKAGE {id: 'org.apache.commons.lang3', name: 'lang3'});
MERGE (p:CLASS_OR_INTERFACE {id: 'org.apache.commons.lang3.StringUtils', name: 'StringUtils'});
MERGE (p:METHOD {id: 'org.apache.commons.lang3.StringUtils.isNotBlank', name: 'isNotBlank'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.KafkaProducer_oldVersion', name: 'KafkaProducer_oldVersion'});
MERGE (p:PACKAGE {id: 'com.google.common.base', name: 'base'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.base.Preconditions', name: 'Preconditions'});
MERGE (p:METHOD {id: 'com.google.common.base.Preconditions.checkArgument', name: 'checkArgument'});
MERGE (p:PACKAGE {id: 'kafka', name: 'kafka'});
MERGE (p:PACKAGE {id: 'kafka.javaapi', name: 'javaapi'});
MERGE (p:PACKAGE {id: 'kafka.javaapi.producer', name: 'producer'});
MERGE (p:CLASS_OR_INTERFACE {id: 'kafka.javaapi.producer.Producer', name: 'Producer'});
MERGE (p:METHOD {id: 'kafka.javaapi.producer.Producer.send', name: 'send'});
MERGE (p:METHOD {id: 'kafka.javaapi.producer.Producer.close', name: 'close'});
MERGE (p:METHOD {id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.shutdown', name: 'shutdown'});
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.bankcomm'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm'}),(target:PACKAGE { id: 'com.bankcomm.pccc'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'sparkdemobeginner'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.FunctionS'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.io'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.Serializable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.Serializable'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.FunctionS'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'sparkdemobeginner'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.assembleProperties'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.createKafkaProducer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.createKafkaProducer'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.assembleProperties'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Properties'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Properties'}),(target:METHOD { id: 'java.util.Properties.put'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.assembleProperties'}),(target:METHOD { id: 'java.util.Properties.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:Project { id: 'sparkdemobeginner'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:PACKAGE { id: 'java.util.regex'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.regex'}),(target:CLASS_OR_INTERFACE { id: 'java.util.regex.Pattern'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.regex.Pattern'}),(target:METHOD { id: 'java.util.regex.Pattern.compile'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8'}),(target:METHOD { id: 'java.util.regex.Pattern.compile'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org'}),(target:PACKAGE { id: 'org.apache'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache'}),(target:PACKAGE { id: 'org.apache.spark'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.SparkConf'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.SparkConf'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.SparkConf'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark'}),(target:PACKAGE { id: 'org.apache.spark.api'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.api'}),(target:PACKAGE { id: 'org.apache.spark.api.java'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaSparkContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaSparkContext'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.textFile'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.textFile'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.AbstractJavaRDDLike'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.AbstractJavaRDDLike'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.flatMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaSparkContext'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.stop'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.stop'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCountJava8.runSparkDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:Project { id: 'sparkdemobeginner'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark'}),(target:PACKAGE { id: 'org.apache.spark.streaming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.Durations'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.Durations'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.google'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google'}),(target:PACKAGE { id: 'com.google.common'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common'}),(target:PACKAGE { id: 'com.google.common.collect'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.collect'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Sets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Sets'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.collect'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Maps'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Maps'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Map'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Map'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming'}),(target:PACKAGE { id: 'org.apache.spark.streaming.kafka010'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.kafka010'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.LocationStrategies'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.LocationStrategies'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.kafka010'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.kafka010'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.KafkaUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.KafkaUtils'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.kafka010'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming'}),(target:PACKAGE { id: 'org.apache.spark.streaming.api'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.api'}),(target:PACKAGE { id: 'org.apache.spark.streaming.api.java'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaInputDStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaInputDStream'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.kafka010'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.print'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectWordCount.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initSparkStreamingContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initSparkStreamingContext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.checkpoint'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.checkpoint'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.sparkContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.sparkContext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaSparkContext'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.broadcast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.broadcast'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.manageOffsets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.manageOffsets'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.Optional'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.Optional'}),(target:METHOD { id: 'org.apache.spark.api.java.Optional.empty'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.Optional.empty'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark'}),(target:PACKAGE { id: 'org.apache.spark.broadcast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.broadcast'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.broadcast.Broadcast'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.broadcast.Broadcast'}),(target:METHOD { id: 'org.apache.spark.broadcast.Broadcast.getValue'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.broadcast.Broadcast.getValue'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.startAndWait'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.startAndWait'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initTopics'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initTopics'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initKafkaParams'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initKafkaParams'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initTopics'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initKafkaParams'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initKafkaParams'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.getInstance'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.sendToKafka_oldVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.sendToKafka_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.getInstance'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.send'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.sendToKafka_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.send'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.collect'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Lists'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Lists'}),(target:METHOD { id: 'com.google.common.collect.Lists.newArrayList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'com.google.common.collect.Lists.newArrayList'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Iterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Iterator'}),(target:METHOD { id: 'java.util.Iterator.next'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'java.util.Iterator.next'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Date'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Date'}),(target:METHOD { id: 'java.util.Date.getTime'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'java.util.Date.getTime'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.lang'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.String'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.replace'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'java.lang.String.replace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.List'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.List'}),(target:METHOD { id: 'java.util.List.add'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'java.util.List.add'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Iterator'}),(target:METHOD { id: 'java.util.Iterator.hasNext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.assmebleMessageList'}),(target:METHOD { id: 'java.util.Iterator.hasNext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_oldVersion.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.PredicationS'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.Serializable'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.PredicationS'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initSparkStreamingContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initSparkStreamingContext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.checkpoint'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.manageOffsets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.manageOffsets'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.print'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.startAndWait'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.startAndWait'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initTopics'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initTopics'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initKafkaParams'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initKafkaParams'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initTopics'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initKafkaParams'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initKafkaParams'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaDirectAccWordCount.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.socketTextStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.socketTextStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.split'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.call'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.call'}),(target:METHOD { id: 'java.lang.String.split'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Arrays'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Arrays'}),(target:METHOD { id: 'java.util.Arrays.asList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.call'}),(target:METHOD { id: 'java.util.Arrays.asList'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.List'}),(target:METHOD { id: 'java.util.List.iterator'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.call'}),(target:METHOD { id: 'java.util.List.iterator'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.mapToPair'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.mapToPair'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.streaming.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaPairDStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaPairDStream'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaPairDStream.reduceByKey'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaPairDStream.reduceByKey'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.print'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.close'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.close'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCount.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.socketTextStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.SocketWordCountJava8.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initSparkStreamingContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initSparkStreamingContext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.checkpoint'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.sparkContext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.broadcast'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.manageOffsets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.manageOffsets'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.Optional.empty'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.broadcast.Broadcast.getValue'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.startAndWait'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.startAndWait'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'com.google.common.collect.Lists.newArrayList'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'java.util.Iterator.next'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'java.util.Date.getTime'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'java.lang.String.replace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'java.util.List.add'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.assembleMessageList'}),(target:METHOD { id: 'java.util.Iterator.hasNext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initTopics'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initTopics'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initKafkaParams'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initKafkaParams'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initTopics'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initKafkaParams'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initKafkaParams'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.sendToKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.sendToKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.createKafkaProducer'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache'}),(target:PACKAGE { id: 'org.apache.kafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.kafka'}),(target:PACKAGE { id: 'org.apache.kafka.clients'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.kafka.clients'}),(target:PACKAGE { id: 'org.apache.kafka.clients.producer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.kafka.clients.producer'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.kafka.clients.producer.Producer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.kafka.clients.producer.Producer'}),(target:METHOD { id: 'org.apache.kafka.clients.producer.Producer.send'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.sendToKafka'}),(target:METHOD { id: 'org.apache.kafka.clients.producer.Producer.send'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.sendToKafka'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.KafkaToKafkaDirectAccWordCount_newVersion.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initSparkStreamingContext'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initSparkStreamingContext'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.manageOffsets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.manageOffsets'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax5'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax5'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.startAndWait'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.startAndWait'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax5'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.alibaba'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.alibaba'}),(target:PACKAGE { id: 'com.alibaba.fastjson'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.alibaba.fastjson'}),(target:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSONObject'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSONObject'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONObject.getInteger'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONObject.getInteger'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.collect'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Iterables'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.collect.Iterables'}),(target:METHOD { id: 'com.google.common.collect.Iterables.toArray'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}),(target:METHOD { id: 'com.google.common.collect.Iterables.toArray'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:PACKAGE { id: 'java.util.stream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.stream'}),(target:CLASS_OR_INTERFACE { id: 'java.util.stream.Stream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.stream.Stream'}),(target:METHOD { id: 'java.util.stream.Stream.of'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.of'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.stream.Stream'}),(target:METHOD { id: 'java.util.stream.Stream.sorted'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.sorted'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.stream.Stream'}),(target:METHOD { id: 'java.util.stream.Stream.findFirst'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.findFirst'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Optional'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Optional'}),(target:METHOD { id: 'java.util.Optional.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax2ByKey'}),(target:METHOD { id: 'java.util.Optional.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compare'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compare'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}),(target:METHOD { id: 'com.google.common.collect.Iterables.toArray'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.of'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.sorted'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.findFirst'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax3ByKey'}),(target:METHOD { id: 'java.util.Optional.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compareWithJson'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compareWithJson'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}),(target:METHOD { id: 'com.google.common.collect.Iterables.toArray'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.of'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.sorted'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}),(target:METHOD { id: 'java.util.stream.Stream.findFirst'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax4ByKey'}),(target:METHOD { id: 'java.util.Optional.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.collect'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.collect.ComparisonChain'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.collect.ComparisonChain'}),(target:METHOD { id: 'com.google.common.collect.ComparisonChain.start'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compareWithJson'}),(target:METHOD { id: 'com.google.common.collect.ComparisonChain.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compare'}),(target:METHOD { id: 'com.google.common.collect.ComparisonChain.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.collect.ComparisonChain'}),(target:METHOD { id: 'com.google.common.collect.ComparisonChain.result'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.compare'}),(target:METHOD { id: 'com.google.common.collect.ComparisonChain.result'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.findMax'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Optional'}),(target:METHOD { id: 'java.util.Optional.empty'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.parseObject'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.parseObject'}),(target:METHOD { id: 'java.util.Optional.empty'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.alibaba.fastjson'}),(target:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSON'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSON'}),(target:METHOD { id: 'com.alibaba.fastjson.JSON.parseObject'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.parseObject'}),(target:METHOD { id: 'com.alibaba.fastjson.JSON.parseObject'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Optional'}),(target:METHOD { id: 'java.util.Optional.of'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.parseObject'}),(target:METHOD { id: 'java.util.Optional.of'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initTopics'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initTopics'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initKafkaParams'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initKafkaParams'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initTopics'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initKafkaParams'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initKafkaParams'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.initSparkStreamingContext'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sendToKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sendToKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducerFactory.createKafkaProducer'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sendToKafka'}),(target:METHOD { id: 'org.apache.kafka.clients.producer.Producer.send'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sendToKafka'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSONObject'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONObject.getJSONArray'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sumFrmJsonData'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sumFrmJsonData'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONObject.getJSONArray'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.alibaba.fastjson'}),(target:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSONArray'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSONArray'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONArray.getJSONObject'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sumFrmJsonData'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONArray.getJSONObject'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sumFrmJsonData'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONObject.getInteger'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.alibaba.fastjson.JSONArray'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONArray.size'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.sumFrmJsonData'}),(target:METHOD { id: 'com.alibaba.fastjson.JSONArray.size'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase2.ReduceDemo.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'sparkdemobeginner'}),(target:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.manageOffsets'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.manageOffsets'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.AbstractJavaDStreamLike.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.sendToEs'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.sendToEs'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.startAndWait'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.startAndWait'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.startAndWait'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaStreamingContext.awaitTermination'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.api.java.JavaInputDStream.inputDStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.manageOffsets'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initTopics'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initTopics'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initKafkaParams'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initKafkaParams'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.readStreamFromKafka'}),(target:METHOD { id: 'org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initTopics'}),(target:METHOD { id: 'com.google.common.collect.Sets.newHashSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initKafkaParams'}),(target:METHOD { id: 'com.google.common.collect.Maps.newHashMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initKafkaParams'}),(target:METHOD { id: 'java.util.Map.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.SparkConf'}),(target:METHOD { id: 'org.apache.spark.SparkConf.set'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es'}),(target:METHOD { id: 'org.apache.spark.SparkConf.set'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.initSparkStreamingContext4Es'}),(target:METHOD { id: 'org.apache.spark.streaming.Durations.seconds'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org'}),(target:PACKAGE { id: 'org.elasticsearch'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.elasticsearch'}),(target:PACKAGE { id: 'org.elasticsearch.spark'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.elasticsearch.spark'}),(target:PACKAGE { id: 'org.elasticsearch.spark.streaming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.elasticsearch.spark.streaming'}),(target:PACKAGE { id: 'org.elasticsearch.spark.streaming.api'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.elasticsearch.spark.streaming.api'}),(target:PACKAGE { id: 'org.elasticsearch.spark.streaming.api.java'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.elasticsearch.spark.streaming.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.elasticsearch.spark.streaming.api.java.JavaEsSparkStreaming'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.elasticsearch.spark.streaming.api.java.JavaEsSparkStreaming'}),(target:METHOD { id: 'org.elasticsearch.spark.streaming.api.java.JavaEsSparkStreaming.saveJsonToEs'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.sendToEs'}),(target:METHOD { id: 'org.elasticsearch.spark.streaming.api.java.JavaEsSparkStreaming.saveJsonToEs'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.sparkstreaming.phase3.SinkToEsDemo.runSparkStreamingDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.bankcomm.pccc.onesight.demo.spark'}),(target:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount'}),(target:METHOD { id: 'java.util.regex.Pattern.compile'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setAppName'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.SparkConf.setMaster'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.textFile'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.regex.Pattern'}),(target:METHOD { id: 'java.util.regex.Pattern.split'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.call'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.call'}),(target:METHOD { id: 'java.util.regex.Pattern.split'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.call'}),(target:METHOD { id: 'java.util.Arrays.asList'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.call'}),(target:METHOD { id: 'java.util.List.iterator'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.flatMap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.AbstractJavaRDDLike'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.mapToPair'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.mapToPair'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.spark.api.java'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaPairRDD'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaPairRDD'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaPairRDD.reduceByKey'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaPairRDD.reduceByKey'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.call'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.AbstractJavaRDDLike'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.foreach'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.foreach'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.stop'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.JavaSparkContext'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.close'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}),(target:METHOD { id: 'org.apache.spark.api.java.JavaSparkContext.close'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.spark.api.java.AbstractJavaRDDLike'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.collect'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.anotherAction'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.anotherAction'}),(target:METHOD { id: 'org.apache.spark.api.java.AbstractJavaRDDLike.collect'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'scala'}),(target:CLASS_OR_INTERFACE { id: 'scala.Tuple2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'scala.Tuple2'}),(target:METHOD { id: 'scala.Tuple2._1'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.anotherAction'}),(target:METHOD { id: 'scala.Tuple2._1'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'scala.Tuple2'}),(target:METHOD { id: 'scala.Tuple2._2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.anotherAction'}),(target:METHOD { id: 'scala.Tuple2._2'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.anotherAction'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.main'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.WordCount.runSparkDemo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'org.apache'}),(target:PACKAGE { id: 'org.apache.commons'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.commons'}),(target:PACKAGE { id: 'org.apache.commons.lang3'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'org.apache.commons.lang3'}),(target:CLASS_OR_INTERFACE { id: 'org.apache.commons.lang3.StringUtils'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'org.apache.commons.lang3.StringUtils'}),(target:METHOD { id: 'org.apache.commons.lang3.StringUtils.isNotBlank'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.KafkaProducer_oldVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.KafkaProducer_oldVersion'}),(target:METHOD { id: 'org.apache.commons.lang3.StringUtils.isNotBlank'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common'}),(target:PACKAGE { id: 'com.google.common.base'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.base'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.base.Preconditions'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.base.Preconditions'}),(target:METHOD { id: 'com.google.common.base.Preconditions.checkArgument'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.KafkaProducer_oldVersion'}),(target:METHOD { id: 'com.google.common.base.Preconditions.checkArgument'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.KafkaProducer_oldVersion'}),(target:METHOD { id: 'java.util.Properties.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'kafka'}),(target:PACKAGE { id: 'kafka.javaapi'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'kafka.javaapi'}),(target:PACKAGE { id: 'kafka.javaapi.producer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'kafka.javaapi.producer'}),(target:CLASS_OR_INTERFACE { id: 'kafka.javaapi.producer.Producer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'kafka.javaapi.producer.Producer'}),(target:METHOD { id: 'kafka.javaapi.producer.Producer.send'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.send'}),(target:METHOD { id: 'kafka.javaapi.producer.Producer.send'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'kafka.javaapi.producer.Producer'}),(target:METHOD { id: 'kafka.javaapi.producer.Producer.close'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion'}),(target:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.shutdown'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.bankcomm.pccc.onesight.demo.spark.framework.KafkaProducer_oldVersion.shutdown'}),(target:METHOD { id: 'kafka.javaapi.producer.Producer.close'}) MERGE (source)-[:CALLS]->(target);
