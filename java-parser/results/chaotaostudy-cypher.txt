MERGE (p:PACKAGE {id: 'tao', name: 'tao'});
MERGE (p:PACKAGE {id: 'tao.study', name: 'study'});
MERGE (p:PACKAGE {id: 'tao.study.protocol', name: 'protocol'});
MERGE (p:Project {id: 'chaotaostudy', name: 'study'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.protocol.SimpleCommond', name: 'SimpleCommond'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommond.getData', name: 'getData'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.protocol.SimpleCommondEncoder', name: 'SimpleCommondEncoder'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommondEncoder.encode', name: 'encode'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommond.getCmd', name: 'getCmd'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommond.getVersion', name: 'getVersion'});
MERGE (p:PACKAGE {id: 'java', name: 'java'});
MERGE (p:PACKAGE {id: 'java.lang', name: 'lang'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Object', name: 'Object'});
MERGE (p:METHOD {id: 'java.lang.Object.getClass', name: 'getClass'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.App', name: 'App'});
MERGE (p:METHOD {id: 'tao.study.App.main', name: 'main'});
MERGE (p:PACKAGE {id: 'java.io', name: 'io'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.PrintStream', name: 'PrintStream'});
MERGE (p:METHOD {id: 'java.io.PrintStream.println', name: 'println'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.App.Logger', name: 'Logger'});
MERGE (p:METHOD {id: 'tao.study.App.Logger.info', name: 'info'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Throwable', name: 'Throwable'});
MERGE (p:METHOD {id: 'java.lang.Throwable.printStackTrace', name: 'printStackTrace'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.protocol.SimpleCommondDecoder', name: 'SimpleCommondDecoder'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommondDecoder.decode', name: 'decode'});
MERGE (p:PACKAGE {id: 'java.nio', name: 'nio'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.nio.ByteBuffer', name: 'ByteBuffer'});
MERGE (p:METHOD {id: 'java.nio.ByteBuffer.getInt', name: 'getInt'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommond.setCmd', name: 'setCmd'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommond.setVersion', name: 'setVersion'});
MERGE (p:METHOD {id: 'java.nio.ByteBuffer.get', name: 'get'});
MERGE (p:METHOD {id: 'tao.study.protocol.SimpleCommond.setData', name: 'setData'});
MERGE (p:PACKAGE {id: 'tao.study.disk', name: 'disk'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.PushResult', name: 'PushResult'});
MERGE (p:METHOD {id: 'java.lang.Throwable.getMessage', name: 'getMessage'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.FileQueue', name: 'FileQueue'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.init', name: 'init'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.File', name: 'File'});
MERGE (p:METHOD {id: 'java.io.File.exists', name: 'exists'});
MERGE (p:METHOD {id: 'java.io.File.createNewFile', name: 'createNewFile'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.RandomAccessFile', name: 'RandomAccessFile'});
MERGE (p:METHOD {id: 'java.io.RandomAccessFile.getChannel', name: 'getChannel'});
MERGE (p:PACKAGE {id: 'java.nio.channels', name: 'channels'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.nio.channels.FileChannel', name: 'FileChannel'});
MERGE (p:METHOD {id: 'java.nio.channels.FileChannel.map', name: 'map'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.nio.Buffer', name: 'Buffer'});
MERGE (p:METHOD {id: 'java.nio.Buffer.position', name: 'position'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.flushAtOnce', name: 'flushAtOnce'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.nio.MappedByteBuffer', name: 'MappedByteBuffer'});
MERGE (p:METHOD {id: 'java.nio.MappedByteBuffer.force', name: 'force'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.notifyFlushCallback', name: 'notifyFlushCallback'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.call', name: 'call'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.doInHashThreadPool', name: 'doInHashThreadPool'});
MERGE (p:PACKAGE {id: 'java.util', name: 'util'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Collection', name: 'Collection'});
MERGE (p:METHOD {id: 'java.util.Collection.size', name: 'size'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Queue', name: 'Queue'});
MERGE (p:METHOD {id: 'java.util.Queue.poll', name: 'poll'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.FlushCallback', name: 'FlushCallback'});
MERGE (p:METHOD {id: 'tao.study.disk.FlushCallback.callback', name: 'callback'});
MERGE (p:METHOD {id: 'java.nio.ByteBuffer.put', name: 'put'});
MERGE (p:METHOD {id: 'java.util.Queue.add', name: 'add'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.doInHashThreadPoolBlock', name: 'doInHashThreadPoolBlock'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.push', name: 'push'});
MERGE (p:METHOD {id: 'tao.study.disk.PushResult.setFlushResult', name: 'setFlushResult'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.pushAndFlush', name: 'pushAndFlush'});
MERGE (p:METHOD {id: 'tao.study.disk.PushResult.setPosition', name: 'setPosition'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.FileQueue.PushCallback', name: 'PushCallback'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.PushCallback.callback', name: 'callback'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.get', name: 'get'});
MERGE (p:METHOD {id: 'java.nio.ByteBuffer.slice', name: 'slice'});
MERGE (p:METHOD {id: 'java.nio.ByteBuffer.position', name: 'position'});
MERGE (p:METHOD {id: 'java.nio.ByteBuffer.limit', name: 'limit'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.HashThreadPool', name: 'HashThreadPool'});
MERGE (p:METHOD {id: 'tao.study.disk.HashThreadPool.submit', name: 'submit'});
MERGE (p:METHOD {id: 'java.lang.Throwable.getCause', name: 'getCause'});
MERGE (p:PACKAGE {id: 'java.util.concurrent', name: 'concurrent'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.Future', name: 'Future'});
MERGE (p:METHOD {id: 'java.util.concurrent.Future.get', name: 'get'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.CommonFuture', name: 'CommonFuture'});
MERGE (p:METHOD {id: 'tao.study.disk.CommonFuture.value', name: 'value'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.FileQueue.FutureFlushCallback', name: 'FutureFlushCallback'});
MERGE (p:METHOD {id: 'tao.study.disk.FileQueue.FutureFlushCallback.callback', name: 'callback'});
MERGE (p:PACKAGE {id: 'com', name: 'com'});
MERGE (p:PACKAGE {id: 'com.google', name: 'google'});
MERGE (p:PACKAGE {id: 'com.google.common', name: 'common'});
MERGE (p:PACKAGE {id: 'com.google.common.util', name: 'util'});
MERGE (p:PACKAGE {id: 'com.google.common.util.concurrent', name: 'concurrent'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.google.common.util.concurrent.AbstractFuture', name: 'AbstractFuture'});
MERGE (p:METHOD {id: 'com.google.common.util.concurrent.AbstractFuture.set', name: 'set'});
MERGE (p:METHOD {id: 'com.google.common.util.concurrent.AbstractFuture.setException', name: 'setException'});
MERGE (p:METHOD {id: 'tao.study.disk.CommonFuture.exception', name: 'exception'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.List', name: 'List'});
MERGE (p:METHOD {id: 'java.util.List.add', name: 'add'});
MERGE (p:METHOD {id: 'tao.study.disk.HashThreadPool.HashThreadPool', name: 'HashThreadPool'});
MERGE (p:METHOD {id: 'tao.study.disk.HashThreadPool.inHashTread', name: 'inHashTread'});
MERGE (p:METHOD {id: 'tao.study.disk.HashThreadPool.getThread', name: 'getThread'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.BlockingQueue', name: 'BlockingQueue'});
MERGE (p:METHOD {id: 'java.util.concurrent.BlockingQueue.add', name: 'add'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.HashThreadPool.FutureCallable', name: 'FutureCallable'});
MERGE (p:METHOD {id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask', name: 'doTask'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.String', name: 'String'});
MERGE (p:METHOD {id: 'java.lang.String.hashCode', name: 'hashCode'});
MERGE (p:METHOD {id: 'java.util.List.get', name: 'get'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Thread', name: 'Thread'});
MERGE (p:METHOD {id: 'java.lang.Thread.getId', name: 'getId'});
MERGE (p:METHOD {id: 'java.lang.Thread.currentThread', name: 'currentThread'});
MERGE (p:METHOD {id: 'tao.study.disk.HashThreadPool.FutureCallable.call', name: 'call'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.Callable', name: 'Callable'});
MERGE (p:METHOD {id: 'java.util.concurrent.Callable.call', name: 'call'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.HashThreadPool.HashThread', name: 'HashThread'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.System', name: 'System'});
MERGE (p:METHOD {id: 'java.lang.System.currentTimeMillis', name: 'currentTimeMillis'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.App', name: 'App'});
MERGE (p:METHOD {id: 'tao.study.disk.App.main', name: 'main'});
MERGE (p:PACKAGE {id: 'java.nio.channels.spi', name: 'spi'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.nio.channels.spi.AbstractInterruptibleChannel', name: 'AbstractInterruptibleChannel'});
MERGE (p:METHOD {id: 'java.nio.channels.spi.AbstractInterruptibleChannel.close', name: 'close'});
MERGE (p:METHOD {id: 'tao.study.disk.App.write', name: 'write'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.Executors', name: 'Executors'});
MERGE (p:METHOD {id: 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor', name: 'newSingleThreadScheduledExecutor'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.FlushManager', name: 'FlushManager'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.ScheduledExecutorService', name: 'ScheduledExecutorService'});
MERGE (p:METHOD {id: 'java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate', name: 'scheduleAtFixedRate'});
MERGE (p:METHOD {id: 'tao.study.disk.FlushManager.init', name: 'init'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.disk.FlushManager.FlushRunner', name: 'FlushRunner'});
MERGE (p:METHOD {id: 'tao.study.disk.FlushManager.FlushRunner.run', name: 'run'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.AppTest', name: 'AppTest'});
MERGE (p:PACKAGE {id: 'tao.study.netty', name: 'netty'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.SimpleCommondServerChannelHandler', name: 'SimpleCommondServerChannelHandler'});
MERGE (p:METHOD {id: 'tao.study.netty.SimpleCommondServerChannelHandler.print', name: 'print'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.LineTextServerChannelHandler', name: 'LineTextServerChannelHandler'});
MERGE (p:METHOD {id: 'tao.study.netty.LineTextServerChannelHandler.print', name: 'print'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.NettyServer', name: 'NettyServer'});
MERGE (p:METHOD {id: 'tao.study.netty.NettyServer.listen', name: 'listen'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.LengthFieldServerChannelHandler', name: 'LengthFieldServerChannelHandler'});
MERGE (p:METHOD {id: 'tao.study.netty.LengthFieldServerChannelHandler.print', name: 'print'});
MERGE (p:PACKAGE {id: 'tao.study.algorithm', name: 'algorithm'});
MERGE (p:PACKAGE {id: 'tao.study.algorithm.concurrent', name: 'concurrent'});
MERGE (p:PACKAGE {id: 'tao.study.algorithm.concurrent.sync', name: 'sync'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.algorithm.concurrent.sync.CycleTimer', name: 'CycleTimer'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start', name: 'start'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.randomTimeOut', name: 'randomTimeOut'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.sleep', name: 'sleep'});
MERGE (p:PACKAGE {id: 'java.util.concurrent.locks', name: 'locks'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer', name: 'AbstractQueuedSynchronizer'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos', name: 'tryAcquireSharedNanos'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.release', name: 'release'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.interrupt', name: 'interrupt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Random', name: 'Random'});
MERGE (p:METHOD {id: 'java.util.Random.nextInt', name: 'nextInt'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.setState', name: 'setState'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync', name: 'Sync'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.Sync', name: 'Sync'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.getState', name: 'getState'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryReleaseShared', name: 'tryReleaseShared'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState', name: 'compareAndSetState'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryAcquireShared', name: 'tryAcquireShared'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.run', name: 'run'});
MERGE (p:METHOD {id: 'java.lang.Thread.start', name: 'start'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.sync.CycleTimer.main', name: 'main'});
MERGE (p:METHOD {id: 'java.lang.Thread.sleep', name: 'sleep'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared', name: 'tryReleaseShared'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared', name: 'tryAcquireShared'});
MERGE (p:PACKAGE {id: 'tao.study.algorithm.sort', name: 'sort'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.Arrays', name: 'Arrays'});
MERGE (p:METHOD {id: 'java.util.Arrays.copyOfRange', name: 'copyOfRange'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.algorithm.sort.MergeSort', name: 'MergeSort'});
MERGE (p:METHOD {id: 'tao.study.algorithm.sort.MergeSort.sort', name: 'sort'});
MERGE (p:METHOD {id: 'tao.study.algorithm.sort.MergeSort.mergeSort', name: 'mergeSort'});
MERGE (p:METHOD {id: 'tao.study.algorithm.sort.MergeSort.print', name: 'print'});
MERGE (p:METHOD {id: 'tao.study.algorithm.sort.MergeSort.swap', name: 'swap'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Comparable', name: 'Comparable'});
MERGE (p:METHOD {id: 'java.lang.Comparable.compareTo', name: 'compareTo'});
MERGE (p:METHOD {id: 'tao.study.algorithm.sort.MergeSort.printArray', name: 'printArray'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.locks.ReentrantLock', name: 'ReentrantLock'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.ReentrantLock.newCondition', name: 'newCondition'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue', name: 'RingSingleConsumeBlcokingQueue'});
MERGE (p:PACKAGE {id: 'java.util.concurrent.atomic', name: 'atomic'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.atomic.AtomicLong', name: 'AtomicLong'});
MERGE (p:METHOD {id: 'java.util.concurrent.atomic.AtomicLong.get', name: 'get'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put', name: 'put'});
MERGE (p:METHOD {id: 'java.util.concurrent.atomic.AtomicLong.compareAndSet', name: 'compareAndSet'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.atomic.AtomicBoolean', name: 'AtomicBoolean'});
MERGE (p:METHOD {id: 'java.util.concurrent.atomic.AtomicBoolean.get', name: 'get'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.ReentrantLock.tryLock', name: 'tryLock'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.ReentrantLock.unlock', name: 'unlock'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.concurrent.locks.Condition', name: 'Condition'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.Condition.signal', name: 'signal'});
MERGE (p:METHOD {id: 'java.util.concurrent.atomic.AtomicBoolean.set', name: 'set'});
MERGE (p:METHOD {id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take', name: 'take'});
MERGE (p:METHOD {id: 'java.util.concurrent.locks.Condition.await', name: 'await'});
MERGE (p:PACKAGE {id: 'java.lang.management', name: 'management'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.management.ManagementFactory', name: 'ManagementFactory'});
MERGE (p:METHOD {id: 'java.lang.management.ManagementFactory.getGarbageCollectorMXBeans', name: 'getGarbageCollectorMXBeans'});
MERGE (p:PACKAGE {id: 'com.sun', name: 'sun'});
MERGE (p:PACKAGE {id: 'com.sun.management', name: 'management'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.sun.management.GarbageCollectorMXBean', name: 'GarbageCollectorMXBean'});
MERGE (p:METHOD {id: 'com.sun.management.GarbageCollectorMXBean.getLastGcInfo', name: 'getLastGcInfo'});
MERGE (p:METHOD {id: 'java.lang.System.gc', name: 'gc'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.NettyClient', name: 'NettyClient'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.LengthFieldClientChannelHandler', name: 'LengthFieldClientChannelHandler'});
MERGE (p:METHOD {id: 'tao.study.netty.LengthFieldClientChannelHandler.print', name: 'print'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.App2', name: 'App2'});
MERGE (p:METHOD {id: 'tao.study.App2.main', name: 'main'});
MERGE (p:METHOD {id: 'tao.study.netty.NettyClient.connect', name: 'connect'});
MERGE (p:METHOD {id: 'tao.study.netty.NettyClient.getChannel', name: 'getChannel'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.LineTextClientChannelHandler', name: 'LineTextClientChannelHandler'});
MERGE (p:METHOD {id: 'tao.study.netty.LineTextClientChannelHandler.print', name: 'print'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.App3', name: 'App3'});
MERGE (p:METHOD {id: 'tao.study.App3.main', name: 'main'});
MERGE (p:METHOD {id: 'java.lang.String.getBytes', name: 'getBytes'});
MERGE (p:CLASS_OR_INTERFACE {id: 'tao.study.netty.SimpleCommondClientChannelHandler', name: 'SimpleCommondClientChannelHandler'});
MERGE (p:METHOD {id: 'tao.study.netty.SimpleCommondClientChannelHandler.print', name: 'print'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.BufferedReader', name: 'BufferedReader'});
MERGE (p:METHOD {id: 'java.io.BufferedReader.readLine', name: 'readLine'});
MERGE (p:METHOD {id: 'java.lang.String.equalsIgnoreCase', name: 'equalsIgnoreCase'});
MERGE (p:METHOD {id: 'tao.study.netty.NettyClient.flush', name: 'flush'});
MERGE (p:METHOD {id: 'tao.study.netty.NettyClient.send', name: 'send'});
MERGE (p:METHOD {id: 'tao.study.netty.NettyClient.close', name: 'close'});
MATCH (source:PACKAGE { id: 'tao'}),(target:PACKAGE { id: 'tao.study'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:PACKAGE { id: 'tao.study.protocol'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study.protocol'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.protocol'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.getData'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.protocol'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommondEncoder'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommondEncoder'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommondEncoder.encode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondEncoder.encode'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.getData'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.getCmd'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondEncoder.encode'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.getCmd'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.getVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondEncoder.encode'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.getVersion'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.lang'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Object'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Object'}),(target:METHOD { id: 'java.lang.Object.getClass'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.App'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.App'}),(target:METHOD { id: 'tao.study.App.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.lang.Object.getClass'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.io'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.App'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.App.Logger'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.App.Logger'}),(target:METHOD { id: 'tao.study.App.Logger.info'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.Logger.info'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Throwable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Throwable'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.protocol'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommondDecoder'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommondDecoder'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.nio'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.nio'}),(target:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}),(target:METHOD { id: 'java.nio.ByteBuffer.getInt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}),(target:METHOD { id: 'java.nio.ByteBuffer.getInt'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.setCmd'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.setCmd'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.setVersion'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.setVersion'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}),(target:METHOD { id: 'java.nio.ByteBuffer.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}),(target:METHOD { id: 'java.nio.ByteBuffer.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.protocol.SimpleCommond'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.setData'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.protocol.SimpleCommondDecoder.decode'}),(target:METHOD { id: 'tao.study.protocol.SimpleCommond.setData'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:PACKAGE { id: 'tao.study.disk'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study.disk'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.PushResult'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Throwable'}),(target:METHOD { id: 'java.lang.Throwable.getMessage'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.init'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.init'}),(target:METHOD { id: 'java.lang.Throwable.getMessage'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.File'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.File'}),(target:METHOD { id: 'java.io.File.exists'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.init'}),(target:METHOD { id: 'java.io.File.exists'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.File'}),(target:METHOD { id: 'java.io.File.createNewFile'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.init'}),(target:METHOD { id: 'java.io.File.createNewFile'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.RandomAccessFile'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.RandomAccessFile'}),(target:METHOD { id: 'java.io.RandomAccessFile.getChannel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.init'}),(target:METHOD { id: 'java.io.RandomAccessFile.getChannel'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.nio'}),(target:PACKAGE { id: 'java.nio.channels'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.nio.channels'}),(target:CLASS_OR_INTERFACE { id: 'java.nio.channels.FileChannel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.channels.FileChannel'}),(target:METHOD { id: 'java.nio.channels.FileChannel.map'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.init'}),(target:METHOD { id: 'java.nio.channels.FileChannel.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.nio'}),(target:CLASS_OR_INTERFACE { id: 'java.nio.Buffer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.Buffer'}),(target:METHOD { id: 'java.nio.Buffer.position'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.flushAtOnce'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.flushAtOnce'}),(target:METHOD { id: 'java.nio.Buffer.position'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.nio'}),(target:CLASS_OR_INTERFACE { id: 'java.nio.MappedByteBuffer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.MappedByteBuffer'}),(target:METHOD { id: 'java.nio.MappedByteBuffer.force'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.flushAtOnce'}),(target:METHOD { id: 'java.nio.MappedByteBuffer.force'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.notifyFlushCallback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.call'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.call'}),(target:METHOD { id: 'tao.study.disk.FileQueue.notifyFlushCallback'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPool'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.flushAtOnce'}),(target:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPool'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Collection'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Collection'}),(target:METHOD { id: 'java.util.Collection.size'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.notifyFlushCallback'}),(target:METHOD { id: 'java.util.Collection.size'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Queue'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Queue'}),(target:METHOD { id: 'java.util.Queue.poll'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.notifyFlushCallback'}),(target:METHOD { id: 'java.util.Queue.poll'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushCallback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushCallback'}),(target:METHOD { id: 'tao.study.disk.FlushCallback.callback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.notifyFlushCallback'}),(target:METHOD { id: 'tao.study.disk.FlushCallback.callback'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.call'}),(target:METHOD { id: 'java.nio.Buffer.position'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}),(target:METHOD { id: 'java.nio.ByteBuffer.put'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.call'}),(target:METHOD { id: 'java.nio.ByteBuffer.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Queue'}),(target:METHOD { id: 'java.util.Queue.add'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.call'}),(target:METHOD { id: 'java.util.Queue.add'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPoolBlock'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.push'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.push'}),(target:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPoolBlock'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.PushResult'}),(target:METHOD { id: 'tao.study.disk.PushResult.setFlushResult'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.pushAndFlush'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.pushAndFlush'}),(target:METHOD { id: 'tao.study.disk.PushResult.setFlushResult'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.pushAndFlush'}),(target:METHOD { id: 'tao.study.disk.FileQueue.push'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.PushResult'}),(target:METHOD { id: 'tao.study.disk.PushResult.setPosition'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.pushAndFlush'}),(target:METHOD { id: 'tao.study.disk.PushResult.setPosition'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.push'}),(target:METHOD { id: 'tao.study.disk.FileQueue.push'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue.PushCallback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue.PushCallback'}),(target:METHOD { id: 'tao.study.disk.FileQueue.PushCallback.callback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.call'}),(target:METHOD { id: 'tao.study.disk.FileQueue.PushCallback.callback'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.push'}),(target:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPool'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:METHOD { id: 'tao.study.disk.FileQueue.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.get'}),(target:METHOD { id: 'java.nio.Buffer.position'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}),(target:METHOD { id: 'java.nio.ByteBuffer.slice'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.get'}),(target:METHOD { id: 'java.nio.ByteBuffer.slice'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}),(target:METHOD { id: 'java.nio.ByteBuffer.position'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.get'}),(target:METHOD { id: 'java.nio.ByteBuffer.position'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.ByteBuffer'}),(target:METHOD { id: 'java.nio.ByteBuffer.limit'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.get'}),(target:METHOD { id: 'java.nio.ByteBuffer.limit'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPool'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Throwable'}),(target:METHOD { id: 'java.lang.Throwable.getCause'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPoolBlock'}),(target:METHOD { id: 'java.lang.Throwable.getCause'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPoolBlock'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:PACKAGE { id: 'java.util.concurrent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.Future'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.Future'}),(target:METHOD { id: 'java.util.concurrent.Future.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.doInHashThreadPoolBlock'}),(target:METHOD { id: 'java.util.concurrent.Future.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.CommonFuture'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.CommonFuture'}),(target:METHOD { id: 'tao.study.disk.CommonFuture.value'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue.FutureFlushCallback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue.FutureFlushCallback'}),(target:METHOD { id: 'tao.study.disk.FileQueue.FutureFlushCallback.callback'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FileQueue.FutureFlushCallback.callback'}),(target:METHOD { id: 'tao.study.disk.CommonFuture.value'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushCallback'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FileQueue.FutureFlushCallback'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FlushCallback.callback'}),(target:METHOD { id: 'tao.study.disk.FileQueue.FutureFlushCallback.callback'}) MERGE (source)-[:OVERRIDDEN_OR_OVERLOADED_BY]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.google'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google'}),(target:PACKAGE { id: 'com.google.common'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common'}),(target:PACKAGE { id: 'com.google.common.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.util'}),(target:PACKAGE { id: 'com.google.common.util.concurrent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.google.common.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'com.google.common.util.concurrent.AbstractFuture'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.util.concurrent.AbstractFuture'}),(target:METHOD { id: 'com.google.common.util.concurrent.AbstractFuture.set'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.CommonFuture.value'}),(target:METHOD { id: 'com.google.common.util.concurrent.AbstractFuture.set'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.util.concurrent.AbstractFuture'}),(target:METHOD { id: 'com.google.common.util.concurrent.AbstractFuture.setException'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.CommonFuture'}),(target:METHOD { id: 'tao.study.disk.CommonFuture.exception'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.CommonFuture.exception'}),(target:METHOD { id: 'com.google.common.util.concurrent.AbstractFuture.setException'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.google.common.util.concurrent.AbstractFuture'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.CommonFuture'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.List'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.List'}),(target:METHOD { id: 'java.util.List.add'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.HashThreadPool'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.HashThreadPool'}),(target:METHOD { id: 'java.util.List.add'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.inHashTread'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.inHashTread'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.getThread'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.getThread'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.BlockingQueue'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.BlockingQueue'}),(target:METHOD { id: 'java.util.concurrent.BlockingQueue.add'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}),(target:METHOD { id: 'java.util.concurrent.BlockingQueue.add'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool.FutureCallable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool.FutureCallable'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.submit'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.String'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.hashCode'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.getThread'}),(target:METHOD { id: 'java.lang.String.hashCode'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.List'}),(target:METHOD { id: 'java.util.List.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.getThread'}),(target:METHOD { id: 'java.util.List.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.inHashTread'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.getThread'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Thread'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Thread'}),(target:METHOD { id: 'java.lang.Thread.getId'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.inHashTread'}),(target:METHOD { id: 'java.lang.Thread.getId'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Thread'}),(target:METHOD { id: 'java.lang.Thread.currentThread'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.inHashTread'}),(target:METHOD { id: 'java.lang.Thread.currentThread'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool.FutureCallable'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.call'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.call'}),(target:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask'}),(target:METHOD { id: 'tao.study.disk.CommonFuture.exception'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.Callable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.Callable'}),(target:METHOD { id: 'java.util.concurrent.Callable.call'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask'}),(target:METHOD { id: 'java.util.concurrent.Callable.call'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.HashThreadPool.FutureCallable.doTask'}),(target:METHOD { id: 'tao.study.disk.CommonFuture.value'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool.HashThread'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Thread'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.HashThreadPool.HashThread'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.System'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.System'}),(target:METHOD { id: 'java.lang.System.currentTimeMillis'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.App'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.App'}),(target:METHOD { id: 'tao.study.disk.App.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.lang.System.currentTimeMillis'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.nio.channels'}),(target:PACKAGE { id: 'java.nio.channels.spi'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.nio.channels.spi'}),(target:CLASS_OR_INTERFACE { id: 'java.nio.channels.spi.AbstractInterruptibleChannel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.nio.channels.spi.AbstractInterruptibleChannel'}),(target:METHOD { id: 'java.nio.channels.spi.AbstractInterruptibleChannel.close'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.nio.channels.spi.AbstractInterruptibleChannel.close'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.io.File.exists'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.io.File.createNewFile'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.io.RandomAccessFile.getChannel'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.nio.channels.FileChannel.map'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.App'}),(target:METHOD { id: 'tao.study.disk.App.write'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'tao.study.disk.App.write'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.nio.MappedByteBuffer.force'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.main'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.App.write'}),(target:METHOD { id: 'java.nio.ByteBuffer.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.Executors'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.Executors'}),(target:METHOD { id: 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.disk'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushManager'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FlushManager'}),(target:METHOD { id: 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.ScheduledExecutorService'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.ScheduledExecutorService'}),(target:METHOD { id: 'java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushManager'}),(target:METHOD { id: 'tao.study.disk.FlushManager.init'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FlushManager.init'}),(target:METHOD { id: 'java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushManager'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushManager.FlushRunner'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.disk.FlushManager.FlushRunner'}),(target:METHOD { id: 'tao.study.disk.FlushManager.FlushRunner.run'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.disk.FlushManager.FlushRunner.run'}),(target:METHOD { id: 'tao.study.disk.FileQueue.flushAtOnce'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.AppTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:PACKAGE { id: 'tao.study.netty'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study.netty'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.SimpleCommondServerChannelHandler'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.SimpleCommondServerChannelHandler'}),(target:METHOD { id: 'tao.study.netty.SimpleCommondServerChannelHandler.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.SimpleCommondServerChannelHandler.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.LineTextServerChannelHandler'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.LineTextServerChannelHandler'}),(target:METHOD { id: 'tao.study.netty.LineTextServerChannelHandler.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.LineTextServerChannelHandler.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyServer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyServer'}),(target:METHOD { id: 'tao.study.netty.NettyServer.listen'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'tao.study.netty.NettyServer.listen'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.LengthFieldServerChannelHandler'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.LengthFieldServerChannelHandler'}),(target:METHOD { id: 'tao.study.netty.LengthFieldServerChannelHandler.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.LengthFieldServerChannelHandler.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.NettyServer.listen'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:PACKAGE { id: 'tao.study.algorithm'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.algorithm'}),(target:PACKAGE { id: 'tao.study.algorithm.concurrent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.algorithm.concurrent'}),(target:PACKAGE { id: 'tao.study.algorithm.concurrent.sync'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study.algorithm.concurrent.sync'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.algorithm.concurrent.sync'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.randomTimeOut'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.randomTimeOut'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.sleep'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.sleep'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.sleep'}),(target:METHOD { id: 'java.lang.System.currentTimeMillis'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:PACKAGE { id: 'java.util.concurrent.locks'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent.locks'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.sleep'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.sleep'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.release'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.interrupt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.interrupt'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.release'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Random'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Random'}),(target:METHOD { id: 'java.util.Random.nextInt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.randomTimeOut'}),(target:METHOD { id: 'java.util.Random.nextInt'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.setState'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.Sync'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.Sync'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.setState'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.getState'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryReleaseShared'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryReleaseShared'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.getState'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryReleaseShared'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryAcquireShared'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryAcquireShared'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.getState'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryAcquireShared'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.run'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.run'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Thread'}),(target:METHOD { id: 'java.lang.Thread.start'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.main'}),(target:METHOD { id: 'java.lang.Thread.start'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.main'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Thread'}),(target:METHOD { id: 'java.lang.Thread.sleep'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.main'}),(target:METHOD { id: 'java.lang.Thread.sleep'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.main'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.interrupt'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync'}) MERGE (source)-[:EXTENDED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryReleaseShared'}) MERGE (source)-[:OVERRIDDEN_OR_OVERLOADED_BY]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer'}),(target:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.sync.CycleTimer.Sync.tryAcquireShared'}) MERGE (source)-[:OVERRIDDEN_OR_OVERLOADED_BY]->(target);
MATCH (source:PACKAGE { id: 'tao.study.algorithm'}),(target:PACKAGE { id: 'tao.study.algorithm.sort'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study.algorithm.sort'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.Arrays'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.Arrays'}),(target:METHOD { id: 'java.util.Arrays.copyOfRange'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.algorithm.sort'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.sort.MergeSort'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.sort.MergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.sort'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.sort'}),(target:METHOD { id: 'java.util.Arrays.copyOfRange'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.sort.MergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.sort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.sort.MergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.print'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.sort.MergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.swap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.swap'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Comparable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Comparable'}),(target:METHOD { id: 'java.lang.Comparable.compareTo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}),(target:METHOD { id: 'java.lang.Comparable.compareTo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.sort.MergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.printArray'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.mergeSort'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.printArray'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.sort.MergeSort.printArray'}),(target:METHOD { id: 'tao.study.algorithm.sort.MergeSort.print'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:Project { id: 'chaotaostudy'}),(target:PACKAGE { id: 'tao.study.algorithm.concurrent'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent.locks'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.ReentrantLock'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.ReentrantLock'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.newCondition'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.algorithm.concurrent'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.newCondition'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent'}),(target:PACKAGE { id: 'java.util.concurrent.atomic'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent.atomic'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.atomic.AtomicLong'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.atomic.AtomicLong'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicLong.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicLong.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.atomic.AtomicLong'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicLong.compareAndSet'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicLong.compareAndSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent.atomic'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.atomic.AtomicBoolean'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.atomic.AtomicBoolean'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicBoolean.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicBoolean.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.ReentrantLock'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.tryLock'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.tryLock'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.ReentrantLock'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.unlock'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.unlock'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util.concurrent.locks'}),(target:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.Condition'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.Condition'}),(target:METHOD { id: 'java.util.concurrent.locks.Condition.signal'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.put'}),(target:METHOD { id: 'java.util.concurrent.locks.Condition.signal'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.atomic.AtomicBoolean'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicBoolean.set'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue'}),(target:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicBoolean.set'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicLong.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.tryLock'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}),(target:METHOD { id: 'java.util.concurrent.locks.ReentrantLock.unlock'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.concurrent.locks.Condition'}),(target:METHOD { id: 'java.util.concurrent.locks.Condition.await'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}),(target:METHOD { id: 'java.util.concurrent.locks.Condition.await'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.algorithm.concurrent.RingSingleConsumeBlcokingQueue.take'}),(target:METHOD { id: 'java.util.concurrent.atomic.AtomicLong.compareAndSet'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:PACKAGE { id: 'java.lang.management'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang.management'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.management.ManagementFactory'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.management.ManagementFactory'}),(target:METHOD { id: 'java.lang.management.ManagementFactory.getGarbageCollectorMXBeans'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.lang.management.ManagementFactory.getGarbageCollectorMXBeans'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.sun'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.sun'}),(target:PACKAGE { id: 'com.sun.management'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.sun.management'}),(target:CLASS_OR_INTERFACE { id: 'com.sun.management.GarbageCollectorMXBean'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.sun.management.GarbageCollectorMXBean'}),(target:METHOD { id: 'com.sun.management.GarbageCollectorMXBean.getLastGcInfo'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'com.sun.management.GarbageCollectorMXBean.getLastGcInfo'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.lang.Thread.sleep'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.System'}),(target:METHOD { id: 'java.lang.System.gc'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.lang.System.gc'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyClient'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.LengthFieldClientChannelHandler'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.LengthFieldClientChannelHandler'}),(target:METHOD { id: 'tao.study.netty.LengthFieldClientChannelHandler.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.LengthFieldClientChannelHandler.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.App2'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.App2'}),(target:METHOD { id: 'tao.study.App2.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App2.main'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App2.main'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyClient'}),(target:METHOD { id: 'tao.study.netty.NettyClient.connect'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App2.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.connect'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyClient'}),(target:METHOD { id: 'tao.study.netty.NettyClient.getChannel'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App2.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.getChannel'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.LineTextClientChannelHandler'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.LineTextClientChannelHandler'}),(target:METHOD { id: 'tao.study.netty.LineTextClientChannelHandler.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.LineTextClientChannelHandler.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.App3'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.App3'}),(target:METHOD { id: 'tao.study.App3.main'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App3.main'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App3.main'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App3.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.connect'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.getBytes'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App3.main'}),(target:METHOD { id: 'java.lang.String.getBytes'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App3.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.getChannel'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'tao.study.netty'}),(target:CLASS_OR_INTERFACE { id: 'tao.study.netty.SimpleCommondClientChannelHandler'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.SimpleCommondClientChannelHandler'}),(target:METHOD { id: 'tao.study.netty.SimpleCommondClientChannelHandler.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.netty.SimpleCommondClientChannelHandler.print'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.connect'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.BufferedReader'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.BufferedReader'}),(target:METHOD { id: 'java.io.BufferedReader.readLine'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.io.BufferedReader.readLine'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyClient'}),(target:METHOD { id: 'tao.study.netty.NettyClient.flush'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.flush'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyClient'}),(target:METHOD { id: 'tao.study.netty.NettyClient.send'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.send'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'tao.study.netty.NettyClient'}),(target:METHOD { id: 'tao.study.netty.NettyClient.close'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'tao.study.App.main'}),(target:METHOD { id: 'tao.study.netty.NettyClient.close'}) MERGE (source)-[:CALLS]->(target);
