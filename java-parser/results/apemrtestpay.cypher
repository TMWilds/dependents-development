MERGE (p:PACKAGE {id: 'com', name: 'com'});
MERGE (p:PACKAGE {id: 'com.Config', name: 'Config'});
MERGE (p:Project {id: 'apemrtestpay', name: 'testpay'});
MERGE (p:PACKAGE {id: 'java', name: 'java'});
MERGE (p:PACKAGE {id: 'java.io', name: 'io'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.io.PrintStream', name: 'PrintStream'});
MERGE (p:METHOD {id: 'java.io.PrintStream.println', name: 'println'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.Config.PostUtil', name: 'PostUtil'});
MERGE (p:METHOD {id: 'com.Config.PostUtil.get', name: 'get'});
MERGE (p:METHOD {id: 'java.io.PrintStream.print', name: 'print'});
MERGE (p:PACKAGE {id: 'java.lang', name: 'lang'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.String', name: 'String'});
MERGE (p:METHOD {id: 'java.lang.String.replaceAll', name: 'replaceAll'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.Config.RestTempleConfig', name: 'RestTempleConfig'});
MERGE (p:PACKAGE {id: 'com.util', name: 'util'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.Throwable', name: 'Throwable'});
MERGE (p:METHOD {id: 'java.lang.Throwable.printStackTrace', name: 'printStackTrace'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.util.APIutil', name: 'APIutil'});
MERGE (p:METHOD {id: 'com.util.APIutil.getcrypt', name: 'getcrypt'});
MERGE (p:METHOD {id: 'java.lang.String.equals', name: 'equals'});
MERGE (p:METHOD {id: 'java.lang.String.equalsIgnoreCase', name: 'equalsIgnoreCase'});
MERGE (p:METHOD {id: 'com.util.APIutil.isnull', name: 'isnull'});
MERGE (p:METHOD {id: 'java.lang.String.trim', name: 'trim'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.lang.System', name: 'System'});
MERGE (p:METHOD {id: 'java.lang.System.currentTimeMillis', name: 'currentTimeMillis'});
MERGE (p:METHOD {id: 'com.util.APIutil.getData', name: 'getData'});
MERGE (p:PACKAGE {id: 'java.text', name: 'text'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.text.Format', name: 'Format'});
MERGE (p:METHOD {id: 'java.text.Format.format', name: 'format'});
MERGE (p:CLASS_OR_INTERFACE {id: 'com.ConsumerBootStrap', name: 'ConsumerBootStrap'});
MERGE (p:PACKAGE {id: 'test', name: 'test'});
MERGE (p:PACKAGE {id: 'test.com', name: 'com'});
MERGE (p:PACKAGE {id: 'java.util', name: 'util'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.HashMap', name: 'HashMap'});
MERGE (p:METHOD {id: 'java.util.HashMap.put', name: 'put'});
MERGE (p:CLASS_OR_INTERFACE {id: 'test.com.payTest', name: 'payTest'});
MERGE (p:METHOD {id: 'test.com.payTest.test', name: 'test'});
MERGE (p:METHOD {id: 'java.util.HashMap.get', name: 'get'});
MERGE (p:METHOD {id: 'com.util.APIutil.crypt', name: 'crypt'});
MERGE (p:CLASS_OR_INTERFACE {id: 'java.util.TreeMap', name: 'TreeMap'});
MERGE (p:METHOD {id: 'java.util.TreeMap.put', name: 'put'});
MERGE (p:CLASS_OR_INTERFACE {id: 'test.com.CashPay', name: 'CashPay'});
MERGE (p:METHOD {id: 'test.com.CashPay.test', name: 'test'});
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.Config'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'apemrtestpay'}),(target:PACKAGE { id: 'com.Config'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.io'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.io'}),(target:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.Config'}),(target:CLASS_OR_INTERFACE { id: 'com.Config.PostUtil'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.Config.PostUtil'}),(target:METHOD { id: 'com.Config.PostUtil.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.Config.PostUtil.get'}),(target:METHOD { id: 'java.io.PrintStream.println'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.io.PrintStream'}),(target:METHOD { id: 'java.io.PrintStream.print'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.Config.PostUtil.get'}),(target:METHOD { id: 'java.io.PrintStream.print'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.lang'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.String'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.replaceAll'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.Config.PostUtil.get'}),(target:METHOD { id: 'java.lang.String.replaceAll'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'com.Config'}),(target:CLASS_OR_INTERFACE { id: 'com.Config.RestTempleConfig'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:PACKAGE { id: 'com.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'apemrtestpay'}),(target:PACKAGE { id: 'com.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.Throwable'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.Throwable'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com.util'}),(target:CLASS_OR_INTERFACE { id: 'com.util.APIutil'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.util.APIutil'}),(target:METHOD { id: 'com.util.APIutil.getcrypt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.getcrypt'}),(target:METHOD { id: 'java.lang.Throwable.printStackTrace'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.equals'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.getcrypt'}),(target:METHOD { id: 'java.lang.String.equals'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.util.APIutil'}),(target:METHOD { id: 'com.util.APIutil.isnull'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.isnull'}),(target:METHOD { id: 'java.lang.String.equalsIgnoreCase'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.String'}),(target:METHOD { id: 'java.lang.String.trim'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.isnull'}),(target:METHOD { id: 'java.lang.String.trim'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.isnull'}),(target:METHOD { id: 'java.lang.String.equals'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.lang'}),(target:CLASS_OR_INTERFACE { id: 'java.lang.System'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.lang.System'}),(target:METHOD { id: 'java.lang.System.currentTimeMillis'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.util.APIutil'}),(target:METHOD { id: 'com.util.APIutil.getData'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.getData'}),(target:METHOD { id: 'java.lang.System.currentTimeMillis'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.text'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.text'}),(target:CLASS_OR_INTERFACE { id: 'java.text.Format'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.text.Format'}),(target:METHOD { id: 'java.text.Format.format'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'com.util.APIutil.getData'}),(target:METHOD { id: 'java.text.Format.format'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:Project { id: 'apemrtestpay'}),(target:PACKAGE { id: 'com'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'com'}),(target:CLASS_OR_INTERFACE { id: 'com.ConsumerBootStrap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'test'}),(target:PACKAGE { id: 'test.com'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:Project { id: 'apemrtestpay'}),(target:PACKAGE { id: 'test.com'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java'}),(target:PACKAGE { id: 'java.util'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.HashMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.HashMap'}),(target:METHOD { id: 'java.util.HashMap.put'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'test.com'}),(target:CLASS_OR_INTERFACE { id: 'test.com.payTest'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'test.com.payTest'}),(target:METHOD { id: 'test.com.payTest.test'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'test.com.payTest.test'}),(target:METHOD { id: 'java.util.HashMap.put'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.HashMap'}),(target:METHOD { id: 'java.util.HashMap.get'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'test.com.payTest.test'}),(target:METHOD { id: 'java.util.HashMap.get'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'com.util.APIutil'}),(target:METHOD { id: 'com.util.APIutil.crypt'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'test.com.payTest.test'}),(target:METHOD { id: 'com.util.APIutil.crypt'}) MERGE (source)-[:CALLS]->(target);
MATCH (source:PACKAGE { id: 'java.util'}),(target:CLASS_OR_INTERFACE { id: 'java.util.TreeMap'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'java.util.TreeMap'}),(target:METHOD { id: 'java.util.TreeMap.put'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:PACKAGE { id: 'test.com'}),(target:CLASS_OR_INTERFACE { id: 'test.com.CashPay'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:CLASS_OR_INTERFACE { id: 'test.com.CashPay'}),(target:METHOD { id: 'test.com.CashPay.test'}) MERGE (source)-[:CONTAINS]->(target);
MATCH (source:METHOD { id: 'test.com.CashPay.test'}),(target:METHOD { id: 'java.util.TreeMap.put'}) MERGE (source)-[:CALLS]->(target);
